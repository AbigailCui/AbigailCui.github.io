<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git</title>
    <url>/2021/05/14/Git%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Git初步认识"><a href="#1-Git初步认识" class="headerlink" title="1.Git初步认识"></a>1.Git初步认识</h2><h2 id="1-1Git操作"><a href="#1-1Git操作" class="headerlink" title="1.1Git操作"></a>1.1Git操作</h2><h3 id="1-1-1基础操作"><a href="#1-1-1基础操作" class="headerlink" title="1.1.1基础操作"></a>1.1.1基础操作</h3><ul>
<li>git init （初始化仓库）</li>
<li>git status （检查文件，仓库状态）</li>
<li>git add 文件名.文件后缀（添加文件至暂存区）</li>
<li>git commit -m “更新记录” （提交）</li>
<li>git log （查看日志）</li>
<li>gitk （图形界面）-patch（差异）</li>
</ul>
<h3 id="1-1-2远程仓库操作"><a href="#1-1-2远程仓库操作" class="headerlink" title="1.1.2远程仓库操作"></a>1.1.2远程仓库操作</h3><ul>
<li>git config –global user.name “账户名” （绑定账户）</li>
<li>git config –global user.email “绑定邮箱” （绑定账户）</li>
<li>git clone GitHub仓库地址 （加载到本地仓库）</li>
<li>git remote add 自定义仓库标识名 仓库地址 （连接GitHub仓库）</li>
<li>git remote show （显示连接的仓库）</li>
<li>git remote show 仓库标识名 （显示仓库信息）</li>
<li>git push 仓库标识名 main（推送到远程仓库）</li>
<li>git push –set -unstream 仓库名 main（设置默认push仓库名）</li>
<li>git remote remove 仓库标识名 （移除仓库）</li>
<li>git pull 仓库标识名 分支名 （从远程仓库获取代码并合并版本）</li>
<li>git push -f (强制上传)</li>
</ul>
<h3 id="1-1-3-文件编辑操作"><a href="#1-1-3-文件编辑操作" class="headerlink" title="1.1.3 文件编辑操作"></a>1.1.3 文件编辑操作</h3><ul>
<li>vi 文件名 （用vi文本编辑器打开当前文件）<ul>
<li>:q（退出该编辑器）</li>
<li>:光标+i（在光标处开启编辑）</li>
<li>ESC （退出编辑）</li>
<li>:w （保存）</li>
<li>:wq（保存并退出）<br><a href="https://blog.csdn.net/weixin_43423781/article/details/117926189">编辑具体使用</a></li>
</ul>
</li>
<li>git commit –amend（修改最近一次历史版本提交日志）</li>
<li>git add 文件夹名/ （将该文件夹所有文件放入暂存区）</li>
<li>git add –all （将当前目录下所有文件放入暂存区）</li>
<li>git rm 文件名 （从本地仓库移除文件）</li>
<li>git mv 原文件名 新文件名 （修改文件名）</li>
<li>git rm –cashed 文件名</li>
<li>git commit -a （越过暂存区直接到仓库）</li>
<li>git checkout – 文件 （恢复并覆盖最近一次暂存区的文件到工作区）</li>
<li>git reset –hard 版本id号（回退版本）</li>
</ul>
<h3 id="1-1-4-分支管理"><a href="#1-1-4-分支管理" class="headerlink" title="1.1.4 分支管理"></a>1.1.4 分支管理</h3><ul>
<li>git branch （查看分支）</li>
<li>git branch 分支名 （新建分支）</li>
<li>git ·checkout -b 分支名 （新建并切换到该分支）</li>
<li>git checkout 分支名 （切换分支）</li>
<li>git checkout - （切换到上个分支）</li>
<li>git merge 分支名 （合并指定分支到当前分支）</li>
<li>git branch -d 分支名 （删除分支）</li>
<li>git branch 新分支 已存在分支 （基于分支创建新分支）</li>
</ul>
<h2 id="2-git（本地）推送远程仓库流程"><a href="#2-git（本地）推送远程仓库流程" class="headerlink" title="2.git（本地）推送远程仓库流程"></a>2.git（本地）推送远程仓库流程</h2><p>1.首先，绑定github（gitee）账户</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">1.首先，绑定github（gitee）账户</span><br><span class="line">git config –global user.name “账户名” （绑定账户）</span><br><span class="line">git config –global user.email “绑定邮箱” （绑定账户）</span><br></pre></td></tr></tbody></table></figure>
<p>2.初始化要push的文件夹</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git init （初始化仓库）</span><br></pre></td></tr></tbody></table></figure>
<p>3.添加文件至暂存区并提交，注意这里还是在本地进行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">git add 文件名.文件后缀 /git add . （提交全部）</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">git commit -m “更新记录” （提交）</span><br></pre></td></tr></tbody></table></figure>
<p>4.更改分支名为main</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">git branch -m main</span><br></pre></td></tr></tbody></table></figure>
<p>5.连接github仓库</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">git remote add 自定义仓库标识名 仓库地址</span><br></pre></td></tr></tbody></table></figure>
<p>6.推送（必须在有网的前提下）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">git push 仓库标识名 main</span><br></pre></td></tr></tbody></table></figure>
<h2 id="3-git分支管理策略"><a href="#3-git分支管理策略" class="headerlink" title="3.git分支管理策略"></a>3.git分支管理策略</h2><p>一般大型项目的维护、开发以及发布过程会遵循以下的策略（结合图来理解）</p>
<p>粉色模块Master是项目用来发布重大版本的分支，它是一个项目的主分支，日常开发所进行的分支则应在develop上进行，相应的功能模块会在基于develop分支上进行创建，功能模块实现并完成了它的任务（功能）并和develop分支合并（merge）后，则可清除该分支（红色曲线）。</p>
<p>在develop开发到一定程度决定发布后，则可以通过release-（橙色，\代表版本号）分支进行测试，release分支进行项目的运行测试并修改相应bug并确认无误后则可在Master主分支上对release进行合并（merge），同时将无bug版本在develop上也进行合并（merge），之后它便可以光荣退休（红线）了，等待下一个重大的日常版本来再出现。</p>
<p>Maste主分支在对外发布并运行的过程多多少少（当然能尽量避免就尽量避免）可能会出现一些测试未发现的bug，这时，则可以在它上面新建分支，用来解决对应bug，名称为fixbug-bug名，在对bug进行解决后则可继续合并到主分支，同时合并到develop上去，这时的fixbug也可以退休（红线）啦。<br><img src="/2021/05/14/Git%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5.png" alt="git分支管理策略"></p>
<p>可以同时参考这篇博客<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">http://www.ruanyifeng.com/blog/2012/07/git.html</a></p>
<p>下图是另外一种结构图（图源网络）</p>
<p><img src="/2021/05/14/Git%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/git%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="git分支结构图"><br>总结：如果要清晰完整的开发好一个大型多人合作的项目，做好以下几点</p>
<p>   *列好分支清单，统一好分支的命名，不要使分支混乱<br>   *定时合并和清理分支，保证分支的简洁度和项目功能的完整度<br>   *在一个大版本即将发布之时，检查好该版本的功能完整性以及测试是否可以正常运行，尽量少做在发布之时修改bug。<br>   *提交每个版本时要做好清晰的备注</p>
<h2 id="4-git工作流程"><a href="#4-git工作流程" class="headerlink" title="4.git工作流程"></a>4.git工作流程</h2><p>参考博客：<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">http://www.ruanyifeng.com/blog/2015/12/git-workflow.html</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>基于vue的简易Todo-List</title>
    <url>/2021/07/01/Todo-List/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>###1.简介<br>基于Vue半全家桶的新拟态板ToDoList，一个todolist而已，用几乎Vue全家桶是不是有点小题大做，是的，必须的，因为要巩固的知识，并且功能也相应的增加了，你可以打卡想看的书或者电影，以及小小的改变了todolist的相应逻辑，当天未完成的ToDo会累计到待完成任务，看着一天一天积下来的待办，多多少少希望减少你的惰性吧（希望目的达到），从而激发你一天满满的动力</p>
<p>注意：所使用的是localStorage存储数据（没用服务器），所以，如果你一不小心用了什么清垃圾软件或者手动清掉浏览器数据的话，它会消失，它会消失，它会消失</p>
<p>采用纯less写样式，只写了PC端响应式布局，没做移动端适配（就不要尝试用手机打开了，大丑）</p>
<p><a href="https://abigailcui.github.io/todo-List/index.html#/myday">在线地址</a></p>
<p>###2.功能<br> 1.输入代办，按下回车键，添加到当天待办事项<br> 2.点击完成按钮，完成该代办，添加至完成事项<br> 3.点击删除按钮，删除该待办<br> 4.动态显示已完成和未完成事项数量<br> 5.当天未完成待办，第二天添加至待完成任务，可在第二天点击“今天完成”重新添加至我的一天中<br> 6.阅读选项打卡想看的书<br> 7.电影选项卡打卡想看的电影<br> 8.点击头像就是回到我的博客啦<br> 9.导航栏右侧文字根据时间改变相应问候语</p>
<p><img src="/2021/07/01/Todo-List/1.jpg" alt="1"><br><img src="/2021/07/01/Todo-List/2.jpg" alt="2"></p>
<p>###3.技术架构</p>
<ul>
<li>Vue</li>
<li>Vue CLI</li>
<li>Vue Router</li>
<li>Less</li>
<li>webpack</li>
</ul>
<p>主要划分为三个大组件</p>
<p>3.1 NavBar</p>
<p>  +分为左中右三个插槽<br>  +中间添加待办事项<br>  +左插槽展示当前路由信息<br>  +右插槽按时间显示问候信息</p>
<p>3.2 SideBar</p>
<p>  +用来控制路由的主要组件<br>  +分为两个部分，一个头像模块，一个路由切换模块<br>  +路由切换模块放置切换路由的小item</p>
<p>3.3 TaskBar</p>
<p>  +放置待办的组件<br>  +根据待办状态显示不同状态的item</p>
<p>###4.核心代码<br>最重要的当然就是侦听数据的改变啦，毕竟你时时刻刻都在改变数据，vue官网<a href="https://cn.vuejs.org/v2/api/#watch">watch函数介绍</a></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//监听数据变化</span></span><br><span class="line"><span class="attr">watch</span>: {</span><br><span class="line">  <span class="attr">mydayList</span>: {</span><br><span class="line">    <span class="comment">// 该回调会在任何被侦听的对象的 mydayList 改变时被调用，不论其被嵌套多深</span></span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params"></span>)</span>{</span><br><span class="line">      saveData( <span class="built_in">this</span>.mydayList, <span class="string">"myday"</span>)</span><br><span class="line">      getData()</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>          </span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>通过监听mydayList数据的变化，实时保存改变后的数据以及加载保存后的数据</p>
<p>其它就是简单的localStorage增删改查操作啦</p>
<p>###5.函数封装<br>这里通过函数封装，得到localStorage增删查操作，并单独设置成一个js文件，后面组件需要用到即可直接导入使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//获取本地数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">dataName</span>) </span>{</span><br><span class="line">  <span class="comment">// localStorge为window内置属性，用于在浏览器存储本地信息</span></span><br><span class="line">  <span class="comment">// 该数据除非手动删除，否则会一直存在</span></span><br><span class="line">  <span class="comment">// let data = localStorage.getItem("todoList") //取值</span></span><br><span class="line">  <span class="keyword">let</span> data = <span class="built_in">localStorage</span>.getItem(dataName) <span class="comment">//取值</span></span><br><span class="line">  <span class="keyword">if</span> (data !== <span class="literal">null</span>) {</span><br><span class="line">    <span class="comment">//ES6将变量作为键→[变量名]</span></span><br><span class="line">    <span class="comment">// return JSON.parse(data).[dataName] //将数据转换为json</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存本地数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params">data, dataName</span>) </span>{</span><br><span class="line">  <span class="comment">//JSON.stringify()将json数据转换为字符串</span></span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(dataName, <span class="built_in">JSON</span>.stringify(data)) <span class="comment">//设值    </span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteData</span>(<span class="params">index, dataName</span>) </span>{</span><br><span class="line">  <span class="comment">//获取本地数据</span></span><br><span class="line">  <span class="keyword">let</span> data = getData(dataName)</span><br><span class="line">  <span class="comment">// let index = index //获取索引号</span></span><br><span class="line">  <span class="comment">//改本地数据（删除数据）</span></span><br><span class="line">  data.splice(index, <span class="number">1</span>)</span><br><span class="line">  <span class="comment">//保存本地数据</span></span><br><span class="line">  saveData(data)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>后面就是简单的给各个组件注册事件，然后执行相关操作就可以啦</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue应用</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/07/hello-world/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="766ef0593174295131e599100b10574d388562bf5ee62d350ed7065b21ae9e8f">bd25ed9264b080267271e137e33d0ce1e1069d88f9699965ec2c8f2e4412683a11965185006bffa98a0a821510d9346f09318e6bad83c5df43f6251105f61d270c32a97bb2827cd20739af9fa6249e35c85c31d992cfc84594787d1b1d756b950129204f1db9ebdc2dcc2139a424c278f9349328ea0bfda7dcca73edde1d2463919630f3e33888be0c5d834c6036bb29575a57777f3eb42fcef0f42bda50f8752731fd8bb0f042c3834a79f66f8f1b37b2d4f6534dc1951f4f050fe56a5ad68d546fc98b4c81c1c835cad394a0c2017e755e7fba3ca8ee502c6af8c76c1ee4c234e88ef270ec93375da953d9e9ca533f898b4b4344eeac752730d54ffc29692be5445bf50368a578a87be73fcab8c6f6d480b702d5a5f4d257cd9cfbf3a9d898c131547cf3f8bbd0ba372870a0866ee6cd34aca84d1d371795d50890b3e096de083698555fc035bac7faef38b2a5a4785f07d7fbab90b68c7ac4b7bec3ddfb3c2b6a2ef286a5f1090f1361e1f612f60189a945a16c3beed79610458520a8a5107f9b85d13c5a99b36675c41240465836441e289ff0eea003e38f084d2d06fe2f8d2077660f767d88d3208bf4a5f108819ac9245043515b6821e184a3b2cc8f97e7bd168d124199f31e5f2bbe2dcd20faad685276d052a17516f00a9d0251f28daacc22e72e7fb8d5541f645d0d394690fd7b97c8abaa8a33f6df14e708f850bc0c1b400ce68d97a9ba0725917f8b30a3b4dea80a11982f07eb6ab58adb64af3950658bf184792b9726355e3489acc43e59b4b06e33139271ee7de2b3ac507293c60622e2613f0066eb1b25386737c54d12dc6b7dacdaad5a2a45c62de24d083d24e5f80c44e35f7e98ce11610420a5e593d1d20426be05adcde28ae8bd366ccc7aa72c0fb4d0a047ad43f27ff928c694eaea61ca52bf1f7e7d841c804b990a87bc5931b2c5301567f2eb360a775a6798c053de7db8bd0fdd1f0d19bac3b9ceaa04f714b4a84dc9af4a77a844cb2ccbb7a085a30e6e5be54d88c03aff3c64f356c6f2091052b6e5ab09d38e21cb1ff0704942627850278ed84555cf8ce984f1e7e4bca27cf9eced6e3df6da1bf35f0a1c31cc0ede46d8dad631221453d2e640106d933edbda579122bb6992fad8dfad3b619421ce7af3651debcc501904beeb62a47ae682d4dcda771662c4e0844ee1501a1c4b7e4e60f26325bc4a1ca0e0781e9fcc877e23f55e9255cb79389ac82720eeb811dd21ee0cd3278e7be9afc94f68027187942180d1ede19e35dc60b3facf442f5ca9c5157e0a24fea141d0f647681a6957e7f32f4978d32bbe3c2a97e60c60cb7e64806ff1828caa2f73935129324a51379436fc93f5f269dbd3eebd8a9292a83827688b6c705556ca607145a79cb674f2a0d8b1b76431cb7047d4fb4b883dd9f1429f070c43a729005c467c0396fd3f4ee4950dfe8bfd1d06d793910f1b7121470fdc6191e2d43f4b50b3c4a53fca81f00e57629eee4ecb522317b011038c6367579a2135bafaa963c77efed341320535baa24549696a75faaeeda508bcaa3adbe545814a305f0f7fe22e019da7beac9a57056c7cae8425226b4c70e6d90f40ee9bb9dc65ada548cd6f0ec46e3cad8293e395e6d2756dbb90e7e18e7d67f0ba0744fb7a7cf01ebaa5113cc0b20fa114bf0159b7e939e890c81c00860dd5e6d1e3bba4a8c8b5180d90c18dca3a01218cc1fe07bb55dad7c5540aa85f97d32872c8f894ec37abfd26fa71a8540e6c942788e6effd1ec650b0d3d35c6e063fe09557560b6f7c289848463bf5e4581b4cc13ab0ff76d2fbe0d1997b6f9bdffdb6a3fbee40d84b6e25b20ee33306379c47186e8ac45db9941bf62c8444c4a13d6afaa905a946b943096bcaef6c30ca311009cfc4d7cffb0b850f670fcdf4b86c2909214217acab3f1c94e6f64857ef0d790747841c17d82c927be84981cea5dd26fe5a6bddb12b97591ea1e12faee19a5d2e92edbd0dd4ea6e43ef9de97dcd42eb42a46e5400a6317b4e2040bf163db3eadacd0423c1250121d864d039c01019a3c40c7bbec2b248713eb9254e1e696cecfb5207872bcdba0bd444ade698fc73bed2d658b7111945e0b22b3ca75d41ac16f296a24d3869fc06ae14fd893ee9cef3674d6d57d7be1f105caac22e9379bc3044683190b43f1696d65e3c9c70985e5b9c931e33ec9488e19fc85e4d715858af1c903db48e618c362a4ca84d79b451d4c94d75e9566addf17b395357be03e5f032247cf680f0ecf9bf81eaad596e3fa1edcfca46a34d7ca588160bf00fe6c72c44f38fc60f986e6a11233373b3681c2caede0ae3b135c650cf0ae6eba0b07232bbee78202bd305317bcce14f07b0990947db53693c54f857b902c5db8d97a25afc44e8aa212bdce97064b504414d76f84a6cbcccca808fba25ff19a39dc7b05744df026809af9861170a14b45b3314ba8014990b0a7ea67507eda5bee9b1e38d081c9bb11ece7e4996d1c6d5b9e6d2af52077599d40e2f6352885ef54154cfeae58add13a5bd595a93fdde5a792888a3dc635a097696672a67959f4078a5fd0153884ccab29c83b7f0116d949e0691e9bbc9a62840b039f4af28d00d1e569678593dd5df8421ecf5bb9d16e885394647bde2c5ed1c0768a5f451cf4dcaf1e5253ad0f3130b109cfb072c0fd439b1138c8f36ff9479e5782bb6b24d32d64a94fce4283cdd510ae1ecb3fbcd0e4c11a36cd86b36087a2f2a9dfbf70bb03ccb9e40956d9476e579df2abf53816fc9d57c50991136af2531a1875529fb733eaacf08d63c37f33e963ad5aa572acf6643f2b7feecd8ba3468b328c2a447b03b92a23c372092a8ecf989b321f7239ac7f931b62a36a2780d74e959fec988f57f7924e20217bbd111d026ef98822e536f1ecdd3a4e1e5f67d1eed4e61023635b030705b7448e3de324c9e710b3aec2e04d448690d7abff070a9cfbbfd44b306bb44addc9645e74718f94e266562b6a3a0d178d4a8e19bfa37714b06026768ca3f6b1e707083621a085756567b7f01e75c3696ced4681f24a8144b2b6f366ca1273d50fb555cc7f28d385edb5932378bba02f98044212bf44d250c090b407110955c150c71e6c4352453c90f5edaf6dd5b18fa58a3e576c8ae8c5707dfe862832f15d5528d9c26df23237e477b693328a66562c6ed4db50c6effcb32a7b20a3c489ffdc2367d1688d7078180d057546246298befe2bcae70c1f56aa41d99c935e5946b4931713ac360cd3817ef72e3bf30d436b61f7fed5649c7c7d106206a6bc0c6fd92cf081cbce22ff1a2717f1d416aaf2a5715887d27c53092c3c88b5f757ee5b15f66b400bd726d5d8159b9194d553321fb3978cfe93fedd54cffb4b7cdeac8260315b40f0c3921bda29f6100c68ee729dee32acbdefdc175758a721a489a4434cf05fb68ed675ae0cbf5b43caf0e2eb862199f4414c29b0568ba183957df2d15</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">test</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Node.js笔记(1)</title>
    <url>/2021/03/02/Node.js%E7%AC%94%E8%AE%B0(1)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>根据B站黑马记录的笔记，并且也做了对应的<a href="https://www.processon.com/view/link/604b5c207d9c08389fdda72a">思维导图</a>，搭配食用更佳</p>
</blockquote>
<h1 id="Node-JS简介"><a href="#Node-JS简介" class="headerlink" title="Node.JS简介"></a>Node.JS简介</h1><h2 id="何为Node-JS"><a href="#何为Node-JS" class="headerlink" title="何为Node.JS"></a>何为Node.JS</h2><ul>
<li>Node.JS为JavaScript运行时</li>
<li>Node.JS是JavaScript的运行平台</li>
<li>它既不是一门语言，也不是框架，它是一个平台<h2 id="Node-JS中的JS"><a href="#Node-JS中的JS" class="headerlink" title="Node.JS中的JS"></a>Node.JS中的JS</h2></li>
<li>Node.JS没有dom和bom</li>
<li>EcmaScript</li>
<li>Node.JS在JavaScript执行环境中为JavaScript提供一些服务器级别的API<ul>
<li>文件读写</li>
<li>网络服务构建</li>
<li>网络通信</li>
<li>http服务器</li>
<li>……</li>
</ul>
</li>
</ul>
<h2 id="Node-JS构建于Chrome的V8引擎"><a href="#Node-JS构建于Chrome的V8引擎" class="headerlink" title="Node.JS构建于Chrome的V8引擎"></a>Node.JS构建于Chrome的V8引擎</h2><ul>
<li>代码只是具有特定格式的字符串</li>
<li>引擎可以认识它，帮你解析和执行</li>
<li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li>
<li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li>
</ul>
<h2 id="Node-JS的特性"><a href="#Node-JS的特性" class="headerlink" title="Node.JS的特性"></a>Node.JS的特性</h2><ul>
<li>envent-driven 事件驱动</li>
<li>non-blocking I/O mode 非阻塞I/O模型（异步）</li>
<li>ightweight and efficent. 轻量和高效</li>
</ul>
<h2 id="Node-JS的作用"><a href="#Node-JS的作用" class="headerlink" title="Node.JS的作用"></a>Node.JS的作用</h2><ul>
<li><p>web服务器后台</p>
</li>
<li><p>命令行工具<br>*npm(node)</p>
<ul>
<li>git(c语言)</li>
<li>hexo（node）</li>
<li>…</li>
</ul>
</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>npm为世界上最大的开源生态系统</p>
<h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><p>安装配置</p>
<ul>
<li>下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li>
<li>安装node环境</li>
<li>检测node环境<br>*开启命令行提示符（cmd）<br>*输入<code>node --vesion</code><br>*或<code>node -v</code><br>*正常状态下返回版本号</li>
<li>解析执行JavaScript<br>*创建和编写JavaScript脚本文件<br>*打开终端（cmd），定位脚本文件所在位置（也就是执行脚本所在文件目录）<br>*输入node 文件名进行执行<br>注意：文件名不要使用Node.JS命名，并且最好不用中文</li>
</ul>
<h1 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h1><p>文件操作模块</p>
<ul>
<li>浏览器中的 JavaScript 没有文件操作能力</li>
<li>Node中的 JavaScript 具有文件操作能力</li>
<li>fs 是 file-system 的简写，为文件系统的意思</li>
<li>在 Node 中如果想要进行文件操作，就必须引入 fs 这个核心模块</li>
<li>在 fs 这个核心模块中，就提供了所有文件操作相关的 API，<ul>
<li>fs.readFile 用来读取文件</li>
<li>fs.writeFile用来写入文件</li>
</ul>
</li>
<li>文件中存储的都是二进制数据，用toString()方法转换为字符串</li>
</ul>
<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>1.使用<code>require</code>方法加载<code>fs</code>核心模块</p>
<p>2.使用<code>readFile</code>函数读取文件</p>
<ul>
<li><p>两个参数，第一个为文件路径，第二个为回调函数</p>
</li>
<li><p>回调函数中有两个参数</p>
</li>
<li><p>第一个参数为返回错误，第二个为数据</p>
</li>
<li><p>成功：error: null; data: 返回数据</p>
</li>
<li><p>失败: error: 错误对象; data: undefined</p>
</li>
<li><p>可以利用<code>error</code>进行语句判断</p>
</li>
</ul>
  <figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//使用node中的fs模块读取文件（使用require语句）</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//readFIle方法读取文件内容</span></span><br><span class="line">a.readFile(<span class="string">'测试.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>{	</span><br><span class="line">	<span class="built_in">console</span>.log(error);</span><br><span class="line">	<span class="keyword">if</span>(error === <span class="literal">null</span>){</span><br><span class="line">		<span class="built_in">console</span>.log(data.toString());</span><br><span class="line">	} <span class="keyword">else</span> {</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"文件错误,读取文件失败"</span>);</span><br><span class="line">	}</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>1.使用require方法加载fs核心模块<br>2.使用writeFile函数读取文件</p>
<ul>
<li><p>包含三个参数</p>
</li>
<li><p>第一个参数为文件路径及名称</p>
</li>
<li><p>第二个参数为写入文本内容</p>
</li>
<li><p>第三个参数为回调函数</p>
</li>
<li><p>回调函数中的<code>error</code>参数<br>文件写入成功 :<code>error</code> 是 <code>null</code><br>文件写入失败: <code>error</code> 就是错误对象</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">a.writeFile(<span class="string">'你是最棒的.md'</span>,<span class="string">'你是最棒的'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>{</span><br><span class="line">	<span class="built_in">console</span>.log(error);</span><br><span class="line">	<span class="keyword">if</span> (error === <span class="literal">null</span>) {</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"写入成功"</span>);</span><br><span class="line">	} <span class="keyword">else</span> {</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"写入失败"</span>);</span><br><span class="line">	}</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><h2 id="IP地址和端口号"><a href="#IP地址和端口号" class="headerlink" title="IP地址和端口号"></a>IP地址和端口号</h2><ul>
<li>IP地址用来定位计算机</li>
<li>端口号用来定位具体应用程序</li>
<li>所有需要联网的应用程序都需要占用一个端口号</li>
<li>计算机默认端口号尽量不要访问<ul>
<li>80</li>
<li>…</li>
</ul>
</li>
</ul>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ul>
<li>提供服务：为数据服务</li>
<li>发请求</li>
<li>接收请求</li>
<li>处理请求</li>
<li>反馈（发送响应）</li>
<li>当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</li>
</ul>
<h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><p>1.加载http模块<br>2.创建web服务对象<br>3.监听（注册）request事件<br>4.绑定端口号，启动服务</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建web服务对象</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册request事件</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'收到客户端请求'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'服务器启动成功了，可以通过 http://127.0.0.1:3000/ 来进行访问'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>


<h2 id="request请求事件处理函数"><a href="#request请求事件处理函数" class="headerlink" title="request请求事件处理函数"></a>request请求事件处理函数</h2><ul>
<li>request 请求事件处理函数，需要接收两个参数：request和response</li>
<li>request 请求对象：请求对象可以用来获取客户端的一些请求信息，例如请求路径</li>
<li>reponse响应对象：响应对象可以用来给客户端发送响应消息</li>
<li>响应内容只能是二进制数据或者字符串</li>
<li>转出数据内容为其他数据类型时需转化格式</li>
<li>一个请求对应一个响应，已经结束响应则无法重复发送响应</li>
<li>无请求就无响应<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">//创建web服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"><span class="comment">//监听request事件，设置请求处理函数，函数参数调用request和response</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request,response</span>) </span>{</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'请求路径为'</span> + request.url) <span class="comment">//request.url为请求路径</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'请求我的客户端的地址是：'</span>, request.socket.remoteAddress,</span><br><span class="line">                request.socket.remotePort)</span><br><span class="line">	<span class="comment">//响应条件判断，判断请求路径</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">//json测试</span></span><br><span class="line">	<span class="keyword">var</span> phone = [</span><br><span class="line">	{</span><br><span class="line">		<span class="attr">name</span>: <span class="string">'apache'</span>,</span><br><span class="line">		<span class="attr">price</span>: <span class="number">80000</span>,</span><br><span class="line">		<span class="attr">lcd</span>: <span class="string">'a'</span></span><br><span class="line">	},</span><br><span class="line">	{</span><br><span class="line">		<span class="attr">name</span>: <span class="string">'asdfg'</span>,</span><br><span class="line">		<span class="attr">price</span>: <span class="number">5000</span>,</span><br><span class="line">		<span class="attr">lcd</span>: <span class="string">'d'</span></span><br><span class="line">	},</span><br><span class="line">	{</span><br><span class="line">		<span class="attr">name</span>: <span class="string">'hello'</span>,</span><br><span class="line">		<span class="attr">price</span>: <span class="number">25000</span>,</span><br><span class="line">		<span class="attr">lcd</span>: <span class="string">'c'</span></span><br><span class="line">	}]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (request.url) {</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">			response.write(<span class="string">'你好啊'</span>)</span><br><span class="line">			response.end()			</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/a'</span>:</span><br><span class="line">			response.write(<span class="string">'hello'</span>)</span><br><span class="line">			response.end()			</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/b'</span>:</span><br><span class="line">			response.end(<span class="string">'leihoua'</span>)	<span class="comment">//可以直接使用.end()函数		</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/c'</span>:</span><br><span class="line">			response.end(<span class="built_in">JSON</span>.stringify(phone))	<span class="comment">//转化为字符串格式		</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			response.write(<span class="string">'当前路径未存在'</span>)</span><br><span class="line">			response.end()			</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">})</span><br><span class="line"><span class="comment">//绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'服务器启动成功了，可以通过 http://127.0.0.1:3000/ 来进行访问'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="Content-type"><a href="#Content-type" class="headerlink" title="Content-type"></a>Content-type</h2><ul>
<li>服务器默认发送的数据为utf8编码内容</li>
<li>浏览器在不知道浏览器响应内容编码的情况下，会按当前操作系统默认编码解析</li>
<li>中文操作系统默认编码为gbk</li>
<li>在 http 协议中，Content-Type 就是用来告知对方我给你发送的数据内容是什么类型</li>
<li>不同的资源对应的 Content-Type 是不一样</li>
<li>Content-Type工具：<a href="http://tool.oschina.net/commons">http://tool.oschina.net/commons</a></li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">//创建web服务对象</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"><span class="comment">//注册request监听事件</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>{</span><br><span class="line">	<span class="keyword">if</span>(req.url === <span class="string">'/index'</span>) {</span><br><span class="line">		res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)</span><br><span class="line">		res.end(<span class="string">'hello,你好鸭'</span>)</span><br><span class="line">	} <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">'/html'</span>) {</span><br><span class="line">		res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>)</span><br><span class="line">		res.end(<span class="string">'&lt;p&gt;来呀来呀，快来&lt;a href="#"&gt;点我&lt;/a&gt;鸭&lt;/p&gt;'</span>)</span><br><span class="line">	}</span><br><span class="line"><span class="comment">// text/plain 就是普通文本</span></span><br><span class="line"><span class="comment">// 如果你发送的是 html 格式的字符串，则也要告诉浏览器我给你发送是 text/html 格式的内容</span></span><br><span class="line">}) </span><br><span class="line"><span class="comment">//绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="string">'3000'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'server begin...'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="返回文件（http-fs）"><a href="#返回文件（http-fs）" class="headerlink" title="返回文件（http-fs）"></a>返回文件（http-fs）</h2><ul>
<li><p>发送的并不是文件，本质上来讲发送是文件的内容（一堆字符串）</p>
</li>
<li><p>当浏览器收到服务器响应内容之后，就会根据你的 Content-Type 进行对应的解析处理</p>
</li>
<li><p>结合 fs 发送文件中的数据</p>
</li>
<li><p>字符数据需指定编码</p>
</li>
<li><p>图片不需要指定编码</p>
</li>
</ul>
<h3 id="根据url返回内容"><a href="#根据url返回内容" class="headerlink" title="根据url返回内容"></a>根据url返回内容</h3><ol>
<li><p>加载指定模块</p>
</li>
<li><p>创建服务对象</p>
</li>
<li><p>监听request事件</p>
<ul>
<li>判断请求的url</li>
<li>为对应的url返回文件</li>
</ul>
<ul>
<li>读取文件内容</li>
<li>响应输出文件内容（注意转换格式与编码）</li>
</ul>
</li>
<li><p>绑定端口号，启动服务</p>
</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//加载指定模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"><span class="comment">//监听request事件</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>{</span><br><span class="line">	<span class="keyword">var</span> url = req.url;</span><br><span class="line">	<span class="keyword">if</span>(url === <span class="string">'/index'</span>){</span><br><span class="line">		<span class="comment">//读取页面文件</span></span><br><span class="line">		fs.readFile(<span class="string">'09-data/abc.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>{</span><br><span class="line">			<span class="keyword">if</span>(err) {</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span>)</span><br><span class="line">			} <span class="keyword">else</span>{			</span><br><span class="line">				res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>)</span><br><span class="line">				res.end(data.toString())</span><br><span class="line">			}</span><br><span class="line">		})</span><br><span class="line">	} <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/img'</span>) {</span><br><span class="line">		<span class="comment">//读取图像文件</span></span><br><span class="line">		fs.readFile(<span class="string">'09-data/601db542da7bc1d7ecbfb218685332a.jpg'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>{</span><br><span class="line">			<span class="keyword">if</span>(err) {</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">'无法读取该文件'</span>)</span><br><span class="line">			} <span class="keyword">else</span> {</span><br><span class="line">					res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'image/jpeg'</span>)</span><br><span class="line">					res.end(data);</span><br><span class="line">			}		</span><br><span class="line">		})</span><br><span class="line">	} <span class="keyword">else</span> {</span><br><span class="line">		res.end(<span class="string">'404'</span>)</span><br><span class="line">	}</span><br><span class="line">})</span><br><span class="line"><span class="comment">//绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="string">'3000'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'server is running'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="浏览器输入路径打开文件"><a href="#浏览器输入路径打开文件" class="headerlink" title="浏览器输入路径打开文件"></a>浏览器输入路径打开文件</h3><p>需求：用户在浏览器输入文件名即可访问该文件内容</p>
<ol>
<li>将用户输入的文件转化为fs所找文件路径</li>
<li>fs读取文件</li>
<li>res响应文件内容</li>
<li>输出文件内容</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//引用模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">//创建服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"><span class="comment">//监听request事件</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> www = <span class="string">'C:/Users/12524/Desktop/Node.JS'</span></span><br><span class="line">    <span class="keyword">var</span> url = req.url <span class="comment">//不能为中文路径</span></span><br><span class="line">    fs.readFile(www + url, <span class="string">"GBK"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (err) {</span><br><span class="line">            <span class="keyword">return</span> res.end(<span class="string">'404,nod found'</span>) <span class="comment">//return停止代码执行</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            res.end(data)</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">})</span><br><span class="line"><span class="comment">//设置端口号，发布服务</span></span><br><span class="line">server.listen(<span class="string">'3000'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server is running'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><h2 id="状态码301和302"><a href="#状态码301和302" class="headerlink" title="状态码301和302"></a>状态码301和302</h2><p><code>301</code></p>
<ul>
<li><p>永久性的重定向，搜索引擎在抓取新内容的同时将旧网址替换为重定向之后的网址<br><code>302</code></p>
</li>
<li><p>暂时性跳转，搜索引擎抓取新的内容的同时保留旧网址</p>
</li>
<li><p>服务器返回302时，搜索引擎认为新网址时暂时的</p>
</li>
</ul>
<h1 id="path"><a href="#path" class="headerlink" title="path"></a>path</h1><p>路径操作模块</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><blockquote>
<p>官方文档：<a href="https://nodejs.org/docs/latest-v13.x/api/path.html">https://nodejs.org/docs/latest-v13.x/api/path.html</a></p>
</blockquote>
<ul>
<li>path.basename：获取路径的文件名，默认包含扩展名</li>
<li>path.dirname：获取路径中的目录部分</li>
<li>path.extname：获取一个路径中的扩展名部分</li>
<li>path.parse：把路径转换为对象<ul>
<li>root：根路径</li>
<li>dir：目录</li>
<li>base：包含后缀名的文件名</li>
<li>ext：后缀名</li>
<li>name：不包含后缀名的文件名</li>
</ul>
</li>
<li>🔺path.join：拼接路径（第二个参数会自动判断/是否多余）</li>
<li>path.isAbsolute：判断一个路径是否为绝对路径</li>
</ul>
<h1 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>body post解析中间件</p>
<p>处理程序之前，在中间件中对传入的请求体进行解析（response body）</p>
<p>处理post请求体</p>
<p><code>body-parser</code> 提供四种解析器<br>JSON body parser<br>Raw body parser<br>Text body parser<br>URL-encoded form body parser</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm i body-parser</span><br></pre></td></tr></tbody></table></figure>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParse = <span class="built_in">require</span>(<span class="string">"body-parse"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded({ <span class="attr">extended</span>: <span class="literal">false</span> }))</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></tbody></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">router.post(<span class="string">'/login'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>{</span><br><span class="line">	<span class="built_in">console</span>.log(req.body)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="原生获取post请求体方式"><a href="#原生获取post请求体方式" class="headerlink" title="原生获取post请求体方式"></a>原生获取post请求体方式</h2><p>记得先引入<code>querystring</code>模块</p>
<p><code>querystring</code>用作分割请求体内容并转化为对象格式</p>
<p>因为有时候会用到文件上传，所以这里要判断数据请求头的<code>content-type</code>，如果是<code>multipart/form-data</code>，则让<code>formidable</code>中间件去处理，否则自己处理</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">``</span></span><br><span class="line">    <span class="keyword">if</span> (req.method.toLowerCase() === <span class="string">'get'</span>) {</span><br><span class="line">        <span class="keyword">return</span> next()</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 如果是有文件的表单POST，则不处理</span></span><br><span class="line">    <span class="keyword">if</span> (req.headers[<span class="string">'content-type'</span>].startsWith(<span class="string">'multipart/form-data'</span>)) {</span><br><span class="line">        req.on(<span class="string">'data'</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> {</span><br><span class="line">            data += chunk</span><br><span class="line">        })</span><br><span class="line">        req.on(<span class="string">'end'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">            req.body = queryString.parse(data)</span><br><span class="line">            next()</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h1 id="node中的其他成员"><a href="#node中的其他成员" class="headerlink" title="node中的其他成员"></a>node中的其他成员</h1><h2 id="dirname-filename"><a href="#dirname-filename" class="headerlink" title="__dirname() __filename"></a>__dirname() __filename</h2><ul>
<li>__dirname:动态获取当前模块文件所处目录的绝对路径</li>
<li>__filename: 动态获取当前文件的绝对路径<br>在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。为了解决这个问题，需要使用<code>__dirname()</code>或 <code>__filename</code>把相对路径变为绝对路径（绝对路径不受任何影响）。</li>
</ul>
<p>在拼接路径的过程中，为了避免手动拼接带来的一些错误，就可以使用path.join()来辅助拼接</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//path会将路径名和文件名拼接起来且能识别适应文件名前路径形式</span></span><br><span class="line">fs.readFile(path.join(__dirname, <span class="string">'a.txt'</span>), <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="built_in">console</span>.log(path.join(__dirname, <span class="string">'./a.txt'</span>))</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>注意：</p>
<p>模块中的路径标识和文件操作中的相对路径标识不一致</p>
<p>模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响</p>
<h1 id="node中的模块系统"><a href="#node中的模块系统" class="headerlink" title="node中的模块系统"></a>node中的模块系统</h1><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="何为模块化"><a href="#何为模块化" class="headerlink" title="何为模块化"></a>何为模块化</h3><ul>
<li>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)<ul>
<li>注意: 在node中没有全局作用域，它是文件模块作用域</li>
</ul>
</li>
<li>通信规则<ul>
<li>加载: <code>require</code></li>
<li>导出: <code>exports</code></li>
</ul>
</li>
</ul>
<h3 id="模块类型"><a href="#模块类型" class="headerlink" title="模块类型"></a>模块类型</h3><ul>
<li>核心模块<ul>
<li>文件操作的fs</li>
<li>http服务操作的http</li>
<li>url路径操作模块</li>
<li>path路径处理模块</li>
<li>os操作系统信息</li>
<li>……</li>
</ul>
</li>
<li>第三方模块<ul>
<li>art-template</li>
<li>必须通过npm来下载才可以使用</li>
</ul>
</li>
<li>自己写的模块<ul>
<li>自己创建的文件</li>
</ul>
</li>
</ul>
<h3 id="模块标识"><a href="#模块标识" class="headerlink" title="模块标识"></a>模块标识</h3><p><code>./</code>相对于当前路径（在文件操作中可省略）</p>
<p><code>/</code>在当前模块所处的磁盘根目录</p>
<h2 id="javascript模块化（需补充）"><a href="#javascript模块化（需补充）" class="headerlink" title="javascript模块化（需补充）"></a>javascript模块化（需补充）</h2><ul>
<li>Node 中的 CommonJS</li>
<li>浏览器中的：<ul>
<li>AMD require.js</li>
<li>CMD sea.js</li>
</ul>
</li>
<li>es6中增加了官方支持</li>
</ul>
<h2 id="CommonJS模块规范"><a href="#CommonJS模块规范" class="headerlink" title="CommonJS模块规范"></a>CommonJS模块规范</h2><ul>
<li>模块作用域</li>
<li>使用require方法来加载模块</li>
<li>使用exports接口对象来导出模板中的成员</li>
</ul>
<h3 id="加载require"><a href="#加载require" class="headerlink" title="加载require"></a>加载<code>require</code></h3><p>使用<code>require</code>函数加载模块</p>
<ul>
<li><p>若调用非核心模块和第三方模块，必须加上相对路径<code>./</code>,可以省略后缀名</p>
</li>
<li><p><code>require</code>作用</p>
<ul>
<li>加载文件模块并执行里面的代码</li>
<li>拿到被加载文件模块导出的接口对象</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="require方法加载规则"><a href="#require方法加载规则" class="headerlink" title="require方法加载规则"></a>require方法加载规则</h3><ul>
<li>优先从缓存加载（即不会重复调用同个模块中的函数）<ul>
<li>避免重复加载，提高模块加载效率</li>
<li>node会自动寻找当前文件路径的node_modules,从而加载第三方包，若没有，则会继续往上一级目录找，直到找到（如没找到则报错）</li>
</ul>
</li>
</ul>
<p>main.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先从缓存加载</span></span><br><span class="line"><span class="comment">// 由于 在 a 中已经加载过 b 了</span></span><br><span class="line"><span class="comment">// 所以这里不会重复加载</span></span><br><span class="line"><span class="comment">// 可以拿到其中的接口对象，但是不会重复执行里面的代码</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="built_in">require</span>(<span class="string">'./b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>a.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js 被加载了'</span>)</span><br><span class="line"><span class="keyword">var</span> fn = <span class="built_in">require</span>(<span class="string">'./b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>b.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js 被加载了'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello bbb'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line">### 第三方模块加载过程</span><br><span class="line">art-template为例</span><br><span class="line"></span><br><span class="line"> <span class="number">1.</span> 先找到当前项目路径的node_modules</span><br><span class="line"> <span class="number">2.</span> node-modules/art-template</span><br><span class="line"> <span class="number">3.</span> node-modules/art-template/package.json</span><br><span class="line"> <span class="number">4.</span> 找到说明文件中的main属性</span><br><span class="line">   + main属性记录art-template的入口模块</span><br><span class="line"> <span class="number">5.</span> 加载使用这个第三方包</span><br><span class="line">   + 实际加载的还是index.js文件</span><br><span class="line"> <span class="number">6.</span> 若，package.json或main指定的入口模块不存在则node会找该目录下的index.js文件</span><br><span class="line"> <span class="number">7.</span> 条件均不满足则自动往上一级目录查找</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 导出<span class="built_in">exports</span></span><br><span class="line">使用<span class="built_in">exports</span>函数导出需被外部访问的成员</span><br><span class="line">+ <span class="built_in">exports</span></span><br><span class="line">   * 在每个文件模块中都提供了一个对象：<span class="built_in">exports</span></span><br><span class="line">   * <span class="built_in">exports</span> 默认是一个空对象</span><br><span class="line">   * 将需被外部访问的成员挂载到这个 <span class="built_in">exports</span> 对象中</span><br><span class="line">导出多个成员</span><br><span class="line"></span><br><span class="line">**方法一**</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">exports.a = 123;</span></span><br><span class="line"><span class="string">exports.b = function(){</span></span><br><span class="line"><span class="string">    console.log('bbb')</span></span><br><span class="line"><span class="string">};</span></span><br><span class="line"><span class="string">exports.c = {</span></span><br><span class="line"><span class="string">    foo:"bar"</span></span><br><span class="line"><span class="string">};</span></span><br><span class="line"><span class="string">exports.d = 'hello';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">**方法二**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    foo = <span class="string">'hello'</span>,</span><br><span class="line">    <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line">导出单个成员（这时引用该模块，直接返回hello字符串）</span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">module.exports = 'hello';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">案例：假设存在a模块和b模块，现在要用a模块访问b模块的成员</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**a模块**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello,i am a'</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);<span class="comment">//调用该模块的同时，将该模块内容引入</span></span><br><span class="line"><span class="comment">// require('./b.js');</span></span><br><span class="line"><span class="built_in">console</span>.log(b.bbb(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bye,a are leave'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line">**b模块**</span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">// var c = require('./c');</span></span><br><span class="line"><span class="string">console.log('hello,i am b.');</span></span><br><span class="line"><span class="string">require('./c');</span></span><br><span class="line"><span class="string">exports.bbb = function(a,b) {</span></span><br><span class="line"><span class="string">	return a + b;</span></span><br><span class="line"><span class="string">};</span></span><br><span class="line"><span class="string">console.log('bye,b are leave');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">**c模块**</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello,i am c'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bye,c are leave'</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line">### <span class="built_in">module</span>.exports和<span class="built_in">exports</span>的关系</span><br><span class="line">真正要导出数据是<span class="built_in">module</span>.exports，而node为了方便我们操作，所以指定了一个变量<span class="built_in">exports</span>等同于<span class="built_in">module</span>.exports，，如下代码所示</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">var exports = module.exports</span></span><br></pre></td></tr></tbody></table></figure>
<p>所以</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.a = <span class="number">2</span></span><br><span class="line"><span class="built_in">exports</span>.b = <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure>
<p>这些值最终会等同于module.exports.a = 2和module.exports.a = 3，同时会被导出</p>
<p>但如果，你这样写代码</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span> = <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure>
<p>那么，你相当于改了exports的值，那么它就会与module.exports分道扬镳，它的值也不会等于module导出的值</p>
<p>所以，为了保险起见，新手最好使用module.exports导出你要导出的内容，避免错误</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js笔记(2)</title>
    <url>/2021/03/03/Node.js%E7%AC%94%E8%AE%B0(2)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ul>
<h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><p>npmjs.com 网站 是用来搜索npm包的</p>
<h2 id="npm命令行工具"><a href="#npm命令行工具" class="headerlink" title="npm命令行工具"></a>npm命令行工具</h2><p>npm也有版本概念，可以通过npm –version来查看npm的版本</p>
<p>升级npm(自己升级自己)：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm install --global npm</span><br></pre></td></tr></tbody></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h2><ul>
<li><p><code>npm init</code>(生成package.json说明书文件)</p>
</li>
<li><p><code>npm init -y</code>(可以跳过向导，快速生成)</p>
</li>
<li><p><code>npm install</code></p>
<ul>
<li>一次性把dependencies选项中的依赖项全部安装</li>
<li>简写（npm i）</li>
</ul>
</li>
<li><p><code>npm install</code>包名</p>
<ul>
<li>只下载</li>
<li>简写（npm i 包名）</li>
</ul>
</li>
<li><p><code>npm install –save</code> 包名</p>
<ul>
<li>下载并且保存依赖项（package.json文件中的dependencies选项）</li>
<li>简写（npm i 包名）</li>
<li>–save 自动生成说明说文件信息package.json</li>
<li>文件信息自动添加至package.json</li>
<li>若删除掉某些项目使用的模块但有保留package.json，则可在命令行（当前项目文件夹下）执行 npm install 全部自动下回来</li>
</ul>
</li>
<li><p><code>npm uninstall</code> 包名</p>
<ul>
<li>只删除，如果有依赖项会依然保存</li>
<li>简写（npm un 包名）</li>
</ul>
</li>
<li><p><code>npm uninstall –save</code>包名</p>
<ul>
<li>删除的同时也会把依赖信息全部删除</li>
<li>简写（npm un 包名）</li>
</ul>
</li>
<li><p><code>npm help</code></p>
<ul>
<li>查看使用帮助</li>
</ul>
</li>
<li><p>npm 命令 –help</p>
<ul>
<li>查看具体命令的使用帮助（npm uninstall –help）</li>
</ul>
</li>
</ul>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p>
<p>这个文件可以通过<code>npm init</code>自动初始化出来</p>
<p>对于目前来讲，最有用的是<code>dependencies</code>选项，可以用来帮助我们保存第三方包的依赖信息。</p>
<p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p>
<ul>
<li>建议每个项目的根目录下都有一个<code>package.json</code>文件</li>
<li>建议执行<code>npm install</code> 包名的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</li>
</ul>
<h3 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h3><p>npm 5以前是不会有<code>package-lock.json</code>这个文件</p>
<p>npm5以后才加入这个文件</p>
<p>当你安装包的时候，npm都会生成或者更新<code>package-lock.json</code>这个文件</p>
<h3 id="package-json用处"><a href="#package-json用处" class="headerlink" title="package.json用处"></a>package.json用处</h3><h3 id="提升下载速度"><a href="#提升下载速度" class="headerlink" title="提升下载速度"></a>提升下载速度</h3><ul>
<li><p>npm5以后的版本安装都不要加–save参数，它会自动保存依赖信息</p>
</li>
<li><p>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件</p>
</li>
</ul>
<p>package-lock.json</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">这个文件会包含</span><br></pre></td></tr></tbody></table></figure>

<p>node_modules</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">中所有包的信息（版本，下载地址。。。）</span><br><span class="line"></span><br><span class="line">  - 这样的话重新`npm install`的时候速度就可以提升</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 锁定版本号</span><br><span class="line"></span><br><span class="line">- 从文件来看，有一个</span><br></pre></td></tr></tbody></table></figure>
<p>lock</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">称之为锁</span><br><span class="line"></span><br><span class="line">- 这个`lock`使用来锁版本的</span><br><span class="line">- 如果项目依赖了`1.1.1`版本</span><br><span class="line">- 如果你重新install其实会下载最新版本，而不是`1.1.1`</span><br><span class="line">- `package-lock.json`的另外一个作用就是锁定版本号，防止自动升级</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p>案例：express留言板、学生信息增删改</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Express 是一个简洁而灵活的 Node.JS Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。</p>
<p>使用 Express 可以快速地搭建一个完整功能的网站。</p>
<p>Express 框架核心特性：</p>
<ul>
<li>可以设置中间件来响应 HTTP 请求。</li>
<li>定义了路由表用于执行不同的 HTTP 请求动作。</li>
<li>可以通过向模板传递参数来动态渲染 HTML 页面。</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm init //生成说明文件</span><br><span class="line">npm install --save express</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><ol>
<li>引包</li>
<li>创建服务器应用程序</li>
<li>接受请求，返回响应</li>
<li>发布服务<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//引包</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务</span></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//开放文件路径</span></span><br><span class="line">app.use(<span class="string">'/public'</span>, express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收请求，返回响应</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>{</span><br><span class="line">	res.send(<span class="string">'成功啦！'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//发布服务</span></span><br><span class="line">app.listen(<span class="string">'3000'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'server is running...'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line">## art-template</span><br><span class="line">### 安装</span><br><span class="line"><span class="string">``</span><span class="string">`Shell</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">npm install --sava art-template</span></span><br><span class="line"><span class="string">npm install -save express-art-template</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line">app.set(<span class="string">'/views'</span>, <span class="string">'./views/'</span>) <span class="comment">//可以更改模板引擎默认调用资源文件夹路径,注意书写</span></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line">### 使用</span><br><span class="line"><span class="string">``</span><span class="string">`Javascript</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">res.render('index.html', {</span></span><br><span class="line"><span class="string">    students: students.students</span></span><br><span class="line"><span class="string">})</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 初识（数据渲染）</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>Javascript</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/public'</span>, express.static(<span class="string">'./public/'</span>))</span><br><span class="line">app.use(<span class="string">'/node_modules/'</span>, express.static(<span class="string">'./node_modules/'</span>))</span><br><span class="line"></span><br><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line">app.set(<span class="string">'/views'</span>, <span class="string">'./views/'</span>) <span class="comment">//可以更改模板引擎默认调用资源文件夹路径,注意书写</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>{</span><br><span class="line">    fs.readFile(<span class="string">'db.json'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (err) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'数据有误'</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// console.log(JSON.parse(data))</span></span><br><span class="line">        <span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">        res.render(<span class="string">'index.html'</span>, {</span><br><span class="line">            <span class="attr">students</span>: students.students</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server is running...'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="express-session"><a href="#express-session" class="headerlink" title="express-session"></a>express-session</h2>官方文档：<a href="https://github.com/expressjs/session">https://github.com/expressjs/session</a></li>
</ol>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm i express-session</span><br></pre></td></tr></tbody></table></figure>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><ul>
<li>该插件会为req请求对象添加一个成员:req.session默认是一个对象<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//配置session中间件</span></span><br><span class="line">app.use(session({</span><br><span class="line">	<span class="comment">//自定义字符串来对sessionid进行加密处理，避免出现相同的sessionid</span></span><br><span class="line">    <span class="attr">secret</span>: <span class="string">'dong yi'</span>,</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//无论是否使用了session，设置为true都会默认都会给予钥匙(sessionid)</span></span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">false</span></span><br><span class="line">    <span class="attr">cookie</span>: { <span class="attr">secure</span>: <span class="literal">true</span> }</span><br><span class="line">}))</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line">### 使用</span><br><span class="line"><span class="string">``</span><span class="string">`Javascript</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//写</span></span><br><span class="line"><span class="string">//添加Session数据</span></span><br><span class="line"><span class="string">//session就是一个对象</span></span><br><span class="line"><span class="string">req.session.foo = 'bar';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//读</span></span><br><span class="line"><span class="string">//获取session数据</span></span><br><span class="line"><span class="string">req.session.foo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//删</span></span><br><span class="line"><span class="string">req.session.foo = null;</span></span><br><span class="line"><span class="string">delete req.session.foo //推荐</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><code>session</code>：保存登录选项，🔺在内存中存储</p>
<p><code>cookie</code>：保存不敏感数据</p>
<h1 id="🔺异步编程"><a href="#🔺异步编程" class="headerlink" title="🔺异步编程"></a>🔺异步编程</h1><h2 id="得到函数内部异步操作的结果"><a href="#得到函数内部异步操作的结果" class="headerlink" title="得到函数内部异步操作的结果"></a>得到函数内部异步操作的结果</h2><p>回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</p>
<ul>
<li><p>在该情况下无法获得函数内异步操作的结果</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(a + b)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        ret = a + b</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    }, <span class="number">6000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(get(<span class="number">20</span>,<span class="number">30</span>))</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line">结果：返回<span class="string">`undefined`</span></span><br><span class="line"></span><br><span class="line">+ 若要获得该数据则只能通过回调函数</span><br><span class="line"><span class="string">``</span><span class="string">`Javascript</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function get(a, b, c) {</span></span><br><span class="line"><span class="string">    console.log(a + b)</span></span><br><span class="line"><span class="string">    setTimeout(function() {</span></span><br><span class="line"><span class="string">        console.log(2)</span></span><br><span class="line"><span class="string">        ret = a + b</span></span><br><span class="line"><span class="string">        return c(ret)</span></span><br><span class="line"><span class="string">    }, 6000); </span></span><br><span class="line"><span class="string">    console.log(3)</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// console.log(get(20,30))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">get(20, 30, function(a) {</span></span><br><span class="line"><span class="string">    console.log(a)</span></span><br><span class="line"><span class="string">})</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><strong>注意：</strong></p>
<p>凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</p>
<p>这种情况必须通过 回调函数 (异步API都会伴随着一个回调函数)</p>
</li>
</ul>
<h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><h2 id="啥是回调地狱"><a href="#啥是回调地狱" class="headerlink" title="啥是回调地狱"></a>啥是回调地狱</h2><p>就是这幅图 </p>
<p><img src="/2021/03/03/Node.js%E7%AC%94%E8%AE%B0(2)/1.jpg" alt="1"></p>
<h2 id="为什么会有回调地狱"><a href="#为什么会有回调地狱" class="headerlink" title="为什么会有回调地狱"></a>为什么会有回调地狱</h2><p>回调地狱的原因是，当人们试图以一种从上到下的视觉方式执行JavaScript的方式编写JavaScript时。期望第1行发生的任何事情都会在第2行的代码开始运行之前完成，但是，在JavaScript上，有时候这并没办法进行，比如，在你通过异步读取文件时，也就是用fs模块读取多个文件时</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./a.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./b.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./c.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p>执行多次后，你会发现，有那么几次，也有可能好几次，看人品吧反正是，它是没有规则的读出来的（往往可能你的文件越大，读出来的时间会更久），也就是说，它并不会按照代码书写顺序去执行，这便是异步编程（如果试了没有，那就一直试，反正总会有的）。异步API导致了代码并不是按顺序执行的（可以读读这篇文章 <a href="https://www.jianshu.com/p/39adf6ab8ad1">https://www.jianshu.com/p/39adf6ab8ad1</a> ——然后嘞，就会有上面那种解决方法，但是你会发现，代码非常的丑（别人是这样说的，反正我不是太这么认为，甚至觉得有点好看），还有非常难维护（这点认同）。所以就出现了几种解决方法 —Promise</p>
<p>Promise<br>Promise：承诺，保证<br>Promise本身不是异步的，但往往都是内部封装一个异步任务<br>丢出一张图形容Promise函数，相当于一个容器（下图源于所学教程，pending（悬而未决的））</p>
<p><img src="/2021/03/03/Node.js%E7%AC%94%E8%AE%B0(2)/2.jpg" alt="2"></p>
<p>代码如下，较易维护</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//resolved(解决（成功）)，rejected（驳回（失败））</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolved, rejected</span>) </span>{</span><br><span class="line">    <span class="comment">//文件编码！！！！！！</span></span><br><span class="line">    fs.readFile(<span class="string">'./a.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (err) {</span><br><span class="line">            rejected(err)</span><br><span class="line">        }</span><br><span class="line">        resolved(data)</span><br><span class="line">    })</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolved, rejected</span>) </span>{</span><br><span class="line">    fs.readFile(<span class="string">'./b.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (err) {</span><br><span class="line">            rejected(err)</span><br><span class="line">        }</span><br><span class="line">        resolved(data)</span><br><span class="line">    })</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolved, rejected</span>) </span>{</span><br><span class="line">    fs.readFile(<span class="string">'c.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (err) {</span><br><span class="line">            rejected(err)</span><br><span class="line">        }</span><br><span class="line">        resolved(data)</span><br><span class="line">    })</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//链式编程，🔺Promise会默认将then中return的值实例成一个promise对象，所以可以调用then方法，实现链式调用</span></span><br><span class="line">p1</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> p2</span><br><span class="line">    })</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> p3</span><br><span class="line">    }).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    }, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    })</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>then函数（ES6）说明：</p>
<p><img src="/2021/03/03/Node.js%E7%AC%94%E8%AE%B0(2)/3.jpg" alt="3"></p>
<p>封装Promise中的<code>readFile</code>方法</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pReadFile = <span class="function"><span class="keyword">function</span>(<span class="params">filepath</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolved, rejected</span>) </span>{</span><br><span class="line">        <span class="comment">//文件编码！！！！！！</span></span><br><span class="line">        fs.readFile(filepath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>{</span><br><span class="line">            <span class="keyword">if</span> (err) {</span><br><span class="line">                rejected(err)</span><br><span class="line">            }</span><br><span class="line">            resolved(data)</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">pReadFile(<span class="string">"a.txt"</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> pReadFile(<span class="string">"b.txt"</span>)</span><br><span class="line">    })</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> pReadFile(<span class="string">"c.txt"</span>)</span><br><span class="line">    }).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    }, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line">## <span class="built_in">Promise</span>应用场景</span><br><span class="line">### 解决客户端回调嵌套问题</span><br><span class="line">当出现类似于表关联的数据时，这时候就会遇到嵌套问题，当嵌套的数据只有一两个个还好，如果出现三四个甚至五六个，这时候就会出现回调地狱的问题，这里使用promise解决</span><br><span class="line"></span><br><span class="line">### 所需知识：</span><br><span class="line"><span class="number">1.</span> npm模块：json-server、http-server</span><br><span class="line"><span class="number">2.</span> 客户端模板引擎art-template</span><br><span class="line"><span class="number">3.</span> Ajax</span><br><span class="line"><span class="number">4.</span> jquery</span><br><span class="line"></span><br><span class="line">### 步骤</span><br><span class="line"><span class="number">1.</span> 安装json-server和http-server以及其他必要模块</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`Powershell</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">npm i -g http-server</span></span><br><span class="line"><span class="string">npm i -g json-server</span></span><br><span class="line"><span class="string">npm i jquery --save</span></span><br><span class="line"><span class="string">npm i template --save</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li><p>建立html页面</p>
</li>
<li><p>设计表单，人员信息与工作职业相关联，搭配模板字符串使用</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"user_form"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"tpl"</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">{{ <span class="name">user.username</span> }}</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">{{ <span class="name">user.age</span> }}</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        </span><span class="template-variable">{{ <span class="name"><span class="builtin-name">each</span></span> jobs }}</span><span class="xml"> </span><span class="template-variable">{{ <span class="name"><span class="builtin-name">if</span></span> user.job === $value.id }}</span><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">{{ <span class="name">$value.id</span> }}</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">selected</span>&gt;</span></span><span class="template-variable">{{ <span class="name">$value.name</span> }}</span><span class="xml"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        </span><span class="template-variable">{{ <span class="name">else</span> }}</span><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">{{ <span class="name">$value.id</span> }}</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">{{ <span class="name">$value.name</span> }}</span><span class="xml"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        </span><span class="template-variable">{{ <span class="name">/if</span> }}</span><span class="xml"> </span><span class="template-variable">{{ <span class="name">/each</span> }}</span><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>引用相关模板字符串以及JQuery模块</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/art-template/lib/template-web.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>书写Ajax向服务器发起请求,并封装便于使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">  	<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, callback</span>) </span>{</span><br><span class="line">    	  <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    	  oReq.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">oReq.responseText</span><br><span class="line">    	    callback(oReq.responseText)</span><br><span class="line">    	  }</span><br><span class="line">    	  oReq.open(<span class="string">"get"</span>, url, <span class="literal">true</span>)</span><br><span class="line">    	  oReq.send()</span><br><span class="line">    	}</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line"> <span class="number">6.</span> 开启json-server服务，使用data.json文件（<span class="number">67</span>步使用cmd）</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`Powershell</span></span><br><span class="line"><span class="string">json-server data.json</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>将当前文件所处文件夹开放为服务器</p>
</li>
</ol>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">http<span class="literal">-server</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>若要禁用缓存，则使用以下命令</li>
</ul>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">http<span class="literal">-server</span> <span class="literal">-c</span><span class="literal">-1</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="8">
<li>若采用回调地狱类型</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">get(<span class="string">"http://127.0.0.1:3000/users/1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">userData</span>)</span>{</span><br><span class="line">  			get(<span class="string">"http://127.0.0.1:3000/jobs"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">jobsData</span>)</span>{</span><br><span class="line">  				<span class="keyword">var</span> htmlStr = template(<span class="string">"tpl"</span>, {</span><br><span class="line">  					<span class="attr">user</span>: <span class="built_in">JSON</span>.parse(userData),</span><br><span class="line">  					<span class="attr">jobs</span>: <span class="built_in">JSON</span>.parse(jobsData)</span><br><span class="line">  				})</span><br><span class="line">  				<span class="built_in">console</span>.log(htmlStr)</span><br><span class="line">  				<span class="built_in">document</span>.querySelector(<span class="string">"#user_form"</span>).innerHTML = htmlStr</span><br><span class="line">  			})</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<ol start="9">
<li>使用Jquery版的Promise</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Jquery的Ajax自带promise</span></span><br><span class="line"><span class="keyword">var</span> data = {}</span><br><span class="line">$.get(<span class="string">"http://127.0.0.1:3000/users/2"</span>)</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>{</span><br><span class="line">   data.user = user</span><br><span class="line">   <span class="keyword">return</span> $.get(<span class="string">"http://127.0.0.1:3000/jobs"</span>)</span><br><span class="line"> })</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span>(<span class="params">jobs</span>)</span>{</span><br><span class="line">   data.jobs = jobs</span><br><span class="line">   <span class="comment">// console.log(data)</span></span><br><span class="line">   <span class="keyword">var</span> str = template(<span class="string">"tpl"</span>,{</span><br><span class="line">      <span class="attr">user</span>: data.user,</span><br><span class="line">      <span class="attr">jobs</span>: data.jobs</span><br><span class="line">    })</span><br><span class="line">   <span class="built_in">document</span>.querySelector(<span class="string">'#user_form'</span>).innerHTML = str</span><br><span class="line"> })</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> 封装<span class="built_in">Promise</span>版本的AJAX方法</span><br><span class="line"><span class="string">``</span><span class="string">`Js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Rget(url,callback){</span></span><br><span class="line"><span class="string">  return new Promise(function(resolve,reject){</span></span><br><span class="line"><span class="string">  var xhr = new XMLHttpRequest()</span></span><br><span class="line"><span class="string">  // 当请求加载成功之后要调用指定的函数</span></span><br><span class="line"><span class="string">  xhr.onload = function () {</span></span><br><span class="line"><span class="string">    // 我现在需要得到这里的 xhr.responseText</span></span><br><span class="line"><span class="string">    resolve(JSON.parse(xhr.responseText))</span></span><br><span class="line"><span class="string">    callback &amp;&amp; callback(JSON.parse(xhr.responseText))</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string">  xhr.onerror = function (err){</span></span><br><span class="line"><span class="string">    reject(err)</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string">  xhr.open("get", url, true)</span></span><br><span class="line"><span class="string">  xhr.send()</span></span><br><span class="line"><span class="string">  })</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">+ 使用</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>Js</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = {}</span><br><span class="line">Rget(<span class="string">"http://127.0.0.1:3000/users/2"</span>)</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>{</span><br><span class="line">    data.user = user</span><br><span class="line">    <span class="keyword">return</span> Rget(<span class="string">"http://127.0.0.1:3000/jobs"</span>)</span><br><span class="line"> })</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span>(<span class="params">jobs</span>)</span>{</span><br><span class="line">    data.jobs = jobs</span><br><span class="line">    <span class="keyword">var</span> str = template(<span class="string">"tpl"</span>, {</span><br><span class="line">      <span class="attr">user</span>: data.user,</span><br><span class="line">      <span class="attr">jobs</span>: data.jobs</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"#user_form"</span>).innerHTML = str</span><br><span class="line"> })</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line">### <span class="built_in">Promise</span>操作数据库</span><br><span class="line">（<span class="number">26</span>-<span class="built_in">Promise</span>，<span class="built_in">Promise</span>操作数据库）</span><br><span class="line"></span><br><span class="line">+ mongoose中所有的API都支持promise</span><br><span class="line">🔺根据查询是否已存在该记录从而决定是否创建新记录</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`Javascript</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Cat.findOne({ name: "好啊" })</span></span><br><span class="line"><span class="string">    .then(function(cat){</span></span><br><span class="line"><span class="string">    	if(cat){</span></span><br><span class="line"><span class="string">    		console.log('该cat已存在')</span></span><br><span class="line"><span class="string">    	} else{</span></span><br><span class="line"><span class="string">    		return new Cat({"name" : "好啊", "age" : 16 }).save()</span></span><br><span class="line"><span class="string">    	}</span></span><br><span class="line"><span class="string">    })</span></span><br><span class="line"><span class="string">    .then(function(data){</span></span><br><span class="line"><span class="string">    	console.log(data)</span></span><br><span class="line"><span class="string">    })</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">### 注意：</span></span><br><span class="line"><span class="string">1. 每次改完js或html文件后在浏览器需刷新多次</span></span><br><span class="line"><span class="string">2. 每次改完json文件后需要重新启动json-server服务</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### catch异常处理</span></span><br><span class="line"><span class="string">在全部then之后添加`</span>.catch(<span class="function"><span class="params">err</span> =&gt;</span> {})<span class="string">`即可对任何一个then处理过程抛出的异常进行捕获并中止代码继续执行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">例如：读取文件并进行后续相关操作，若处理过程发生一个错误则传递给catch，后面所有的then就不再执行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这里要注意区分，如果是在`</span>then<span class="string">`中自行处理`</span>err<span class="string">`，则代码还是会继续往下执行，这是和`</span><span class="keyword">catch</span><span class="string">`不同的点</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>Js</span><br><span class="line"></span><br><span class="line">readFile(<span class="string">'a.txt'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> readFile(<span class="string">'a.txt'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">  })</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  })</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 中间件</span><br><span class="line">案例：案例<span class="number">5</span>论坛</span><br><span class="line"></span><br><span class="line">### 中间件的概念</span><br><span class="line">&gt; 参考文档：http:<span class="comment">//expressjs.com/en/guide/using-middleware.html</span></span><br><span class="line"></span><br><span class="line">中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。</span><br><span class="line"></span><br><span class="line">说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。</span><br><span class="line"></span><br><span class="line">把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。</span><br><span class="line"></span><br><span class="line">同一个请求对象所经过的中间件都是同一个请求对象和响应对象。</span><br><span class="line"></span><br><span class="line">## 中间件的分类:</span><br><span class="line">### 应用程序级别的中间件</span><br><span class="line">万能匹配（不关心任何请求路径和请求方法的中间件）：</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`Javascript</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">app.use(function(req,res,next){</span></span><br><span class="line"><span class="string">    console.log('Time',Date.now());</span></span><br><span class="line"><span class="string">    next();</span></span><br><span class="line"><span class="string">});</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">关心请求路径和请求方法的中间件：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>Javascript</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Time'</span>,<span class="built_in">Date</span>.now());</span><br><span class="line">    next();</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line">## 路由级别的中间件</span><br><span class="line">严格匹配请求路径和请求方法的中间件</span><br><span class="line"></span><br><span class="line"><span class="attr">get</span>:</span><br><span class="line"><span class="string">``</span><span class="string">`Javascript</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">app.get('/',function(req,res){</span></span><br><span class="line"><span class="string">	res.send('get');</span></span><br><span class="line"><span class="string">});</span></span><br></pre></td></tr></tbody></table></figure>
<p>post：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">app.post(<span class="string">'/a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>{</span><br><span class="line">	res.send(<span class="string">'post'</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<p>put:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">app.put(<span class="string">'/user'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>{</span><br><span class="line">	res.send(<span class="string">'put'</span>);</span><br><span class="line">});</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"><span class="attr">delete</span>:</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`Javascript</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">app.delete('/delete',function(req,res){</span></span><br><span class="line"><span class="string">	res.send('delete');</span></span><br><span class="line"><span class="string">});</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 错误处理中间件</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>Javascript</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err,req,res,next</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.error(err,stack);</span><br><span class="line">    res.status(<span class="number">500</span>).send(<span class="string">'Something broke'</span>);</span><br><span class="line">});</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line">配置使用<span class="number">404</span>中间件：（论坛案例）</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`Javascript</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">app.use(function(req,res){</span></span><br><span class="line"><span class="string">    res.render('404.html');</span></span><br><span class="line"><span class="string">});</span></span><br></pre></td></tr></tbody></table></figure>
<p>配置全局错误处理中间件: (论坛案例）</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">app.get(<span class="string">'/a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>{</span><br><span class="line">	fs.readFile(<span class="string">'.a/bc'</span>, <span class="function"><span class="title">funtion</span>(<span class="params"></span>)</span> {</span><br><span class="line">		<span class="keyword">if</span> (err) {</span><br><span class="line">        	<span class="comment">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中</span></span><br><span class="line">        	<span class="comment">// 当发生全局错误的时候，我们可以调用next传递错误对象</span></span><br><span class="line">        	<span class="comment">// 然后被全局错误处理中间件匹配到并进行处理</span></span><br><span class="line">			next(err);</span><br><span class="line">		}</span><br><span class="line">	})</span><br><span class="line">});</span><br><span class="line"><span class="comment">//全局错误处理中间件</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err,req,res,next</span>)</span>{</span><br><span class="line">    res.status(<span class="number">500</span>).json({</span><br><span class="line">        <span class="attr">err_code</span>:<span class="number">500</span>,</span><br><span class="line">        <span class="attr">message</span>:err.message</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 内置中间件</span></span><br><span class="line"><span class="string">+ express.static(提供静态文件)</span></span><br><span class="line"><span class="string"> * http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 第三方中间件</span></span><br><span class="line"><span class="string">&gt;参考文档：http://expressjs.com/en/resources/middleware.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+ body-parser</span></span><br><span class="line"><span class="string">+ compression</span></span><br><span class="line"><span class="string">+ cookie-parser</span></span><br><span class="line"><span class="string">+ mogran</span></span><br><span class="line"><span class="string">+ response-time</span></span><br><span class="line"><span class="string">+ server-static</span></span><br><span class="line"><span class="string">+ session</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># art-template搭配dateformat模块</span></span><br><span class="line"><span class="string">## 简介</span></span><br><span class="line"><span class="string">art-template搭配dateFormat实现将时间戳格式化为你想要的日期格式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 步骤</span></span><br><span class="line"><span class="string"> 1. npm下载对应模块</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>Bash</span><br><span class="line">npm i --save dateformat</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>页面代码（注意art-template默认渲染的页面后缀名为art，time为渲染的时间数据，’yyyy-mm-dd’为你要定义的时间格式）</li>
</ol>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">1</span><br><span class="line">{{ dateFormat(time, 'yyyy-mm-dd')}}</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>node引用</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> dateFormat = <span class="built_in">require</span>(<span class="string">'dateformat'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line"> <span class="number">4.</span> 配置模板引擎</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`Js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">template.defaults.imports.dateFormat = dateFormat;</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 5. 渲染页面并打出在cmd控制台</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>Js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = template(<span class="string">'06.art'</span>, {</span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(html)</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line"># 其它</span><br><span class="line">## nodemon</span><br><span class="line">### 作用</span><br><span class="line">修改完代码自动重启</span><br><span class="line"></span><br><span class="line">### 安装</span><br><span class="line"><span class="string">``</span><span class="string">`Shell</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">npm install --global nodemon</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">nodemon 文件</span><br></pre></td></tr></tbody></table></figure>
<h2 id="ES6函数"><a href="#ES6函数" class="headerlink" title="ES6函数"></a>ES6函数</h2><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p>方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined</p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.findme = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) {</span><br><span class="line">    	<span class="keyword">if</span>(callback(<span class="built_in">this</span>[i],i)){</span><br><span class="line">    		<span class="keyword">return</span> <span class="built_in">this</span>[i]</span><br><span class="line">    	}</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(abc.findme(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">	<span class="keyword">return</span> item.id = <span class="number">3</span></span><br><span class="line">}))</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line">### findIndex()</span><br><span class="line">返回数组中满足提供的测试函数的第一个元素的索引</span><br><span class="line"></span><br><span class="line">## 隐藏元素控件</span><br><span class="line">用来放一些不希望被用户看见，但是需要被提交到服务端的数据</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`Html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;input type="hidden" name="id" value="{{ student.id }}"&gt;</span></span><br></pre></td></tr></tbody></table></figure>





]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Vuex</title>
    <url>/2021/07/02/VueX/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vuex基础-介绍"><a href="#vuex基础-介绍" class="headerlink" title="vuex基础-介绍"></a>vuex基础-介绍</h2><blockquote>
<p> 为什么会有Vuex ?</p>
</blockquote>
<p>​    Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用**<code>集中式</code><strong>存储管理应用的所有组件的状态，并以相应的规则保证状态以一种</strong><code>可预测</code>**的方式发生变化。</p>
<ul>
<li>vuex是采用集中式管理组件依赖的共享数据的一个工具，可以解决不同组件数据共享问题。</li>
</ul>
<p><img src="/2021/07/02/VueX/image-20200902235150562.png" alt="image-20200902235150562"></p>
<p><strong>结论</strong></p>
<ol>
<li>修改state状态必须通过**<code>mutations</code>**</li>
<li>**<code>mutations</code>**只能执行同步代码，类似ajax，定时器之类的代码不能在mutations中执行</li>
<li>执行异步代码，要通过actions，然后将数据提交给mutations才可以完成</li>
<li>state的状态即共享数据可以在组件中引用</li>
<li>组件中可以调用action</li>
</ol>
<h2 id="vuex基础-初始化功能"><a href="#vuex基础-初始化功能" class="headerlink" title="vuex基础-初始化功能"></a>vuex基础-初始化功能</h2><blockquote>
<p>建立一个新的脚手架项目, 在项目中应用vuex</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vue create  demo</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>开始vuex的初始化建立，选择模式时，选择默认模式</p>
</blockquote>
<p>初始化：</p>
<ul>
<li>第一步：<code>npm i vuex --save</code>  =&gt; 安装到**<code>运行时依赖</code>**   =&gt; 项目上线之后依然使用的依赖 ,开发时依赖  =&gt; 开发调试时使用  </li>
</ul>
<blockquote>
<p>开发时依赖 就是开开发的时候，需要的依赖，运行时依赖，项目上线运行时依然需要的</p>
</blockquote>
<ul>
<li>第二步： <strong>在main.js中</strong> <code>import Vuex from 'vuex'</code></li>
<li>第三步：<strong>在main.js中</strong>  <code>Vue.use(Vuex)</code>  =&gt; 调用了 vuex中的 一个install方法</li>
<li>第四步：<code>const store = new Vuex.Store({...配置项})</code></li>
<li>第五步：在根实例配置 store 选项指向 store 实例对象</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(vuex)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store({})</span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</span><br><span class="line">  store</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<h2 id="vuex基础-state"><a href="#vuex基础-state" class="headerlink" title="vuex基础-state"></a>vuex基础-state</h2><p>state是放置所有公共状态的属性，如果你有一个公共状态数据 ， 你只需要定义在 state对象中</p>
<p><strong>定义state</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化vuex对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">  <span class="attr">state</span>: {</span><br><span class="line">    <span class="comment">// 管理数据</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>如何在组件中获取count?</p>
</blockquote>
<p><strong>原始形式</strong>- 插值表达式</p>
<p><strong><code>App.vue</code></strong></p>
<p>组件中可以使用  <strong>this.$store</strong> 获取到vuex中的store对象实例，可通过<strong>state</strong>属性属性获取<strong>count</strong>， 如下</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div&gt; state的数据：{{ $store.state.count }}&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>计算属性</strong> - 将state属性定义在计算属性中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 把state中数据，定义在组件内的计算属性中</span></span><br><span class="line">  <span class="attr">computed</span>: {</span><br><span class="line">    count () {</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.count</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div&gt; state的数据：{{ count }}&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>辅助函数</strong>  - mapState</p>
<blockquote>
<p>mapState是辅助函数，帮助我们把store中的数据映射到 组件的计算属性中, 它属于一种方便用法</p>
</blockquote>
<p>用法 ： 第一步：导入mapState</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { mapState } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br></pre></td></tr></tbody></table></figure>

<p>第二步：采用数组形式引入state属性</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">mapState([<span class="string">'count'</span>]) </span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>上面代码的最终得到的是 <strong>类似</strong></p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">count () {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.count</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>第三步：利用<strong>延展运算符</strong>将导出的状态映射给计算属性</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">computed: {</span><br><span class="line">  ...mapState([<span class="string">'count'</span>])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div&gt; state的数据：{{ count }}&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="vuex基础-mutations"><a href="#vuex基础-mutations" class="headerlink" title="vuex基础-mutations"></a>vuex基础-mutations</h2><blockquote>
<p>state数据的修改只能通过mutations，并且mutations必须是同步更新，目的是形成**<code>数据快照</code>**</p>
</blockquote>
<p>数据快照：一次mutation的执行，<strong>立刻</strong>得到一种视图状态，因为是立刻，所以必须是同步</p>
<p><strong>定义mutations</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store  = <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">  <span class="attr">state</span>: {</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 定义mutations</span></span><br><span class="line">  <span class="attr">mutations</span>: {</span><br><span class="line">     </span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p><strong>格式说明</strong></p>
<p>mutations是一个对象，对象中存放修改state的方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">mutations: {</span><br><span class="line">    <span class="comment">// 方法里参数 第一个参数是当前store的state属性</span></span><br><span class="line">    <span class="comment">// payload 载荷 运输参数 调用mutaiions的时候 可以传递参数 传递载荷</span></span><br><span class="line">    addCount (state) {</span><br><span class="line">      state.count += <span class="number">1</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>如何在组件中调用mutations</p>
</blockquote>
<p><strong>原始形式</strong>-$store</p>
<blockquote>
<p>新建组件child-a.vue，内容为一个button按钮，点击按钮调用mutations</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click="addCount"&gt;+1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">    methods: {</span><br><span class="line">    //   调用方法</span><br><span class="line">      addCount () {</span><br><span class="line">         // 调用store中的mutations 提交给muations</span><br><span class="line">        // commit('muations名称', 2)</span><br><span class="line">        this.$store.commit('addCount', 10)  // 直接调用mutations</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>带参数的传递</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">addCount (state, payload) {</span><br><span class="line">    state.count += payload</span><br><span class="line">}</span><br><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">'addCount'</span>, <span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure>

<p><strong>辅助函数</strong> - mapMutations</p>
<blockquote>
<p>mapMutations和mapState很像，它把位于mutations中的方法提取了出来，我们可以将它导入</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  { mapMutations } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="attr">methods</span>: {</span><br><span class="line">    ...mapMutations([<span class="string">'addCount'</span>])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>上面代码的含义是将mutations的方法导入了methods中，等同于</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">methods: {</span><br><span class="line">      <span class="comment">// commit(方法名, 载荷参数)</span></span><br><span class="line">      addCount () {</span><br><span class="line">          <span class="built_in">this</span>.$store.commit(<span class="string">'addCount'</span>)</span><br><span class="line">      }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<p>此时，就可以直接通过this.addCount调用了</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;button @click="addCount(100)"&gt;+100&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>但是请注意： Vuex中mutations中要求不能写异步代码，如果有异步的ajax请求，应该放置在actions中</p>
<h2 id="vuex基础-actions"><a href="#vuex基础-actions" class="headerlink" title="vuex基础-actions"></a>vuex基础-actions</h2><blockquote>
<p>state是存放数据的，mutations是同步更新数据，actions则负责进行异步操作</p>
</blockquote>
<p><strong>定义actions</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">actions: {</span><br><span class="line"> <span class="comment">//  获取异步的数据 context表示当前的store的实例 可以通过 context.state 获取状态 也可以通过context.commit 来提交mutations， 也可以 context.diapatch调用其他的action</span></span><br><span class="line">   getAsyncCount (context) {</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">       <span class="comment">// 一秒钟之后 要给一个数 去修改state</span></span><br><span class="line">       context.commit(<span class="string">'addCount'</span>, <span class="number">123</span>)</span><br><span class="line">     }, <span class="number">1000</span>)</span><br><span class="line">   }</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure>

<p><strong>原始调用</strong> - $store</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">addAsyncCount () {</span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">'getAsyncCount'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>传参调用</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">addAsyncCount () {</span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">'getAsyncCount'</span>, <span class="number">123</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>辅助函数</strong> -mapActions</p>
<blockquote>
<p>actions也有辅助函数，可以将action导入到组件中</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { mapActions } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="attr">methods</span>: {</span><br><span class="line">    ...mapActions([<span class="string">'getAsyncCount'</span>])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>直接通过 this.方法就可以调用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;button @click="getAsyncCount(111)"&gt;+异步&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="vuex基础-getters"><a href="#vuex基础-getters" class="headerlink" title="vuex基础-getters"></a>vuex基础-getters</h2><blockquote>
<p>除了state之外，有时我们还需要从state中派生出一些状态，这些状态是依赖state的，此时会用到getters</p>
</blockquote>
<p>例如，state中定义了list，为1-10的数组，</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">state: {</span><br><span class="line">    <span class="attr">list</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>组件中，需要显示所有大于5的数据，正常的方式，是需要list在组件中进行再一步的处理，但是getters可以帮助我们实现它</p>
<p><strong>定义getters</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">getters: {</span><br><span class="line">  <span class="comment">// getters函数的第一个参数是 state</span></span><br><span class="line">  <span class="comment">// 必须要有返回值</span></span><br><span class="line">   <span class="attr">filterList</span>:  <span class="function"><span class="params">state</span> =&gt;</span>  state.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">5</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>使用getters</p>
<p><strong>原始方式</strong> -$store</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div&gt;{{ $store.getters.filterList }}&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>辅助函数</strong> - mapGetters</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">computed: {</span><br><span class="line">    ...mapGetters([<span class="string">'filterList'</span>])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div&gt;{{ filterList }}&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Vuex中的模块化-Module"><a href="#Vuex中的模块化-Module" class="headerlink" title="Vuex中的模块化-Module"></a>Vuex中的模块化-Module</h2><h3 id="为什么会有模块化？"><a href="#为什么会有模块化？" class="headerlink" title="为什么会有模块化？"></a>为什么会有模块化？</h3><blockquote>
<p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>
</blockquote>
<p>这句话的意思是，如果把所有的状态都放在state中，当项目变得越来越大的时候，Vuex会变得越来越难以维护</p>
<p>由此，又有了Vuex的模块化</p>
<p><img src="/2021/07/02/VueX/image-20200904155846709.png" alt="image-20200904155846709"></p>
<h3 id="模块化的简单应用"><a href="#模块化的简单应用" class="headerlink" title="模块化的简单应用"></a>模块化的简单应用</h3><p><strong>应用</strong></p>
<p>定义两个模块   <strong>user</strong> 和  <strong>setting</strong></p>
<p>user中管理用户的状态  token </p>
<p>setting中管理 应用的名称 name</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store  = <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">  <span class="attr">modules</span>: {</span><br><span class="line">    <span class="attr">user</span>: {</span><br><span class="line">       <span class="attr">state</span>: {</span><br><span class="line">         <span class="attr">token</span>: <span class="string">'12345'</span></span><br><span class="line">       }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">setting</span>: {</span><br><span class="line">      <span class="attr">state</span>: {</span><br><span class="line">         <span class="attr">name</span>: <span class="string">'Vuex实例'</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure>

<p>定义child-b组件，分别显示用户的token和应用名称name</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;div&gt;用户token {{ $store.state.user.token }}&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;网站名称 {{ $store.state.setting.name }}&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>请注意： 此时要获取子模块的状态 需要通过 $store.<strong><code>state</code></strong>.<strong><code>模块名称</code></strong>.<strong><code>属性名</code></strong> 来获取</p>
<blockquote>
<p>看着获取有点麻烦，我们可以通过之前学过的getters来改变一下</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">getters: {</span><br><span class="line">  <span class="attr">token</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.token,</span><br><span class="line">  <span class="attr">name</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.setting.name</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure>

<p>请注意：这个getters是根级别的getters哦</p>
<p><strong>通过mapGetters引用</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">computed: {</span><br><span class="line">      ...mapGetters([<span class="string">'token'</span>, <span class="string">'name'</span>])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="模块化中的命名空间"><a href="#模块化中的命名空间" class="headerlink" title="模块化中的命名空间"></a>模块化中的命名空间</h3><p><strong>命名空间</strong>  <strong><code>namespaced</code></strong></p>
<blockquote>
<p>这里注意理解</p>
</blockquote>
<p>默认情况下，模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p>
<blockquote>
<p>这句话的意思是 刚才的user模块还是setting模块，它的 action、mutation 和 getter 其实并没有区分，都可以直接通过全局的方式调用 如</p>
</blockquote>
<p><img src="/2021/07/02/VueX/image-20200904164007116.png" alt="image-20200904164007116"></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">user: {</span><br><span class="line">     <span class="attr">state</span>: {</span><br><span class="line">       <span class="attr">token</span>: <span class="string">'12345'</span></span><br><span class="line">     },</span><br><span class="line">     <span class="attr">mutations</span>: {</span><br><span class="line">      <span class="comment">//  这里的state表示的是user的state</span></span><br><span class="line">       updateToken (state) {</span><br><span class="line">          state.token = <span class="number">678910</span></span><br><span class="line">       }</span><br><span class="line">     }</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>

<p><strong>通过mapMutations调用</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">methods: {</span><br><span class="line">      ...mapMutations(['updateToken'])</span><br><span class="line"> }</span><br><span class="line">&lt;button @click="updateToken"&gt;修改token&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>但是，如果我们想保证内部模块的高封闭性，我们可以采用namespaced来进行设置</p>
</blockquote>
<p>高封闭性？可以理解成 <strong>一家人如果分家了，此时，你的爸妈可以随意的进出分给你的小家，你觉得自己没什么隐私了，我们可以给自己的房门加一道锁（命名空间 namespaced）,你的父母再也不能进出你的小家了</strong></p>
<p>如</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">user: {</span><br><span class="line">     <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="attr">state</span>: {</span><br><span class="line">       <span class="attr">token</span>: <span class="string">'12345'</span></span><br><span class="line">     },</span><br><span class="line">     <span class="attr">mutations</span>: {</span><br><span class="line">      <span class="comment">//  这里的state表示的是user的state</span></span><br><span class="line">       updateToken (state) {</span><br><span class="line">          state.token = <span class="number">678910</span></span><br><span class="line">       }</span><br><span class="line">     }</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>

<p>使用带命名空间的模块 <strong><code>action/mutations</code></strong></p>
<p>方案1：<strong>直接调用-带上模块的属性名路径</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">test () {</span><br><span class="line">   <span class="built_in">this</span>.$store.dispatch(<span class="string">'user/updateToken'</span>) <span class="comment">// 直接调用方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>方案2：<strong>辅助函数-带上模块的属性名路径</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">methods: {</span><br><span class="line">     ...mapMutations(['user/updateToken']),</span><br><span class="line">     test () {</span><br><span class="line">         this['user/updateToken']()</span><br><span class="line">     }</span><br><span class="line"> }</span><br><span class="line">&lt;button @click="test"&gt;修改token&lt;/button&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>方案3： <strong>createNamespacedHelpers</strong>  创建基于某个命名空间辅助函数</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import { mapGetters, createNamespacedHelpers } from 'vuex'</span><br><span class="line">const { mapMutations } = createNamespacedHelpers('user')</span><br><span class="line">&lt;button @click="updateToken"&gt;修改token2&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>关于Vuex的更多用法，后续在项目中讲解</p>
</blockquote>
<h2 id="vuex案例-搭建黑马头条项目"><a href="#vuex案例-搭建黑马头条项目" class="headerlink" title="vuex案例-搭建黑马头条项目"></a>vuex案例-搭建黑马头条项目</h2><p>接下来，通过一个案例来使用Vuex介入我们的数据管理</p>
<blockquote>
<p>通过vue-cli脚手架搭建项目</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vue create toutiao  <span class="comment">#创建项目</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>选择  vuex / eslint（stanadard） / pre-cssprocesser (less)  确定  </p>
</blockquote>
<p><strong>在main.js中引入样式</strong>(该样式在<strong>资源/vuex样式</strong>中，拷贝到styles目录下)</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./styles/index.css'</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>拷贝图片资源到assets目录下</strong>（在<strong>资源/vuex样式目录下的图片</strong>）</p>
<p><strong>在App.vue中拷贝基本结构</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">     &lt;ul class="catagtory"&gt;</span><br><span class="line">       &lt;li class='select'&gt;开发者资讯&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;ios&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;c++&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;android&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;css&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;数据库&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;区块链&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;go&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;产品&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;后端&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;linux&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;人工智能&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;php&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;javascript&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;架构&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;前端&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;python&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;java&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;算法&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;面试&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;科技动态&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;js&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;设计&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;数码产品&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;html&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;软件测试&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;测试开发&lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;</span><br><span class="line">     &lt;div class="list"&gt;</span><br><span class="line">       &lt;div class="article_item"&gt;</span><br><span class="line">         &lt;h3 class="van-ellipsis"&gt;python数据预处理 ：数据标准化&lt;/h3&gt;</span><br><span class="line">         &lt;div class="img_box"&gt;</span><br><span class="line">           &lt;img src="@/assets/back.jpg"</span><br><span class="line">           class="w100" /&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">         &lt;!----&gt;</span><br><span class="line">         &lt;div class="info_box"&gt;</span><br><span class="line">           &lt;span&gt;13552285417&lt;/span&gt;</span><br><span class="line">           &lt;span&gt;0评论&lt;/span&gt;</span><br><span class="line">           &lt;span&gt;2018-11-29T17:02:09&lt;/span&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="vuex案例-封装分类组件和频道组件"><a href="#vuex案例-封装分类组件和频道组件" class="headerlink" title="vuex案例-封装分类组件和频道组件"></a>vuex案例-封装分类组件和频道组件</h2><p>为了更好的区分组件之间的职责，我们将上方的频道和下方的列表封装成不同的组件</p>
<p><strong><code>components/catagtory.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;    </span><br><span class="line">   &lt;ul class="catagtory"&gt;</span><br><span class="line">        &lt;li class='select'&gt;开发者资讯&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;ios&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;c++&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;android&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;css&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;数据库&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;区块链&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;go&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;产品&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;后端&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;linux&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;人工智能&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;php&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;javascript&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;架构&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;前端&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;python&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;java&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;算法&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;面试&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;科技动态&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;js&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;设计&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;数码产品&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;html&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;软件测试&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;测试开发&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;    </span><br></pre></td></tr></tbody></table></figure>

<p><strong><code>components/new-list.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt; </span><br><span class="line">  &lt;div class="list"&gt;</span><br><span class="line">        &lt;div class="article_item"&gt;</span><br><span class="line">          &lt;h3 class="van-ellipsis"&gt;python数据预处理 ：数据标准化&lt;/h3&gt;</span><br><span class="line">          &lt;div class="img_box"&gt;</span><br><span class="line">             &lt;img src="@/assets/back.jpg"</span><br><span class="line">            class="w100" /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!----&gt;</span><br><span class="line">          &lt;div class="info_box"&gt;</span><br><span class="line">            &lt;span&gt;13552285417&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;0评论&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;2018-11-29T17:02:09&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>在App.vue中引入并使用</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;!-- app.vue是根组件 --&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;catagtory /&gt;</span><br><span class="line">    &lt;new-list /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Catagtory from './components/catagtory'</span><br><span class="line">import NewList from './components/new-list'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  components: {</span><br><span class="line">    Catagtory, NewList</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="vuex案例-在vuex中加载分类和频道数据"><a href="#vuex案例-在vuex中加载分类和频道数据" class="headerlink" title="vuex案例-在vuex中加载分类和频道数据"></a>vuex案例-在vuex中加载分类和频道数据</h2><h3 id="设计categtory和newlist的vuex模块"><a href="#设计categtory和newlist的vuex模块" class="headerlink" title="设计categtory和newlist的vuex模块"></a>设计categtory和newlist的vuex模块</h3><p><strong>安装请求数据的工具 axios</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i axios</span><br></pre></td></tr></tbody></table></figure>

<p><strong>接口</strong></p>
<p>​    获取频道列表 </p>
<p>​            <a href="http://ttapi.research.itcast.cn/app/v1_0/channels">http://ttapi.research.itcast.cn/app/v1_0/channels</a></p>
<p>​    获取频道头条</p>
<p>​          <a href="http://ttapi.research.itcast.cn/app/v1_1/articles?channel_id=%E9%A2%91%E9%81%93id&amp;timestamp=%E6%97%B6%E9%97%B4%E6%88%B3&amp;with_top=1">http://ttapi.research.itcast.cn/app/v1_1/articles?channel_id=频道id&amp;timestamp=时间戳&amp;with_top=1</a></p>
<blockquote>
<p>我们采用模块化的管理模式，建立一个专门的模块来管理分类和新闻数据</p>
</blockquote>
<p><strong>在store目录下新建目录modules， 新建 catagtory.js和newlist.js</strong></p>
<p><strong>模块结构</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: {},</span><br><span class="line">  <span class="attr">mutations</span>: {},</span><br><span class="line">  <span class="attr">actions</span>: {}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>在store/index.js中引入定义的两个模块</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> catagtory <span class="keyword">from</span> <span class="string">'./modules/catagtory'</span></span><br><span class="line"><span class="keyword">import</span> newlist <span class="keyword">from</span> <span class="string">'./modules/newlist'</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">  <span class="attr">state</span>: {</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">mutations</span>: {</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">actions</span>: {</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">modules</span>: {</span><br><span class="line">    catagtory,</span><br><span class="line">    newlist</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="分类模块下设置分类数组和当前激活分类"><a href="#分类模块下设置分类数组和当前激活分类" class="headerlink" title="分类模块下设置分类数组和当前激活分类"></a>分类模块下设置分类数组和当前激活分类</h3><p><strong>在catagtory的 state中定义分类频道列表和当前激活</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">state: {</span><br><span class="line">    <span class="attr">catagtory</span>: [],</span><br><span class="line">    <span class="attr">currentCatagtory</span>: <span class="string">''</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>定义更新频道列表的mutations</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">mutations: {</span><br><span class="line">  updateCatagtory (state, payload) {</span><br><span class="line">      state.catagtory = payload <span class="comment">// 更新分类数据</span></span><br><span class="line">   },</span><br><span class="line">   updateCurrentCatagtory (state, payload) {</span><br><span class="line">      state.currentCatagtory = payload</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>通过getters建立对于分类数据和当前分类的快捷访问</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">  <span class="attr">state</span>: {</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">mutations</span>: {</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">actions</span>: {</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">modules</span>: {</span><br><span class="line">    catagtory,</span><br><span class="line">    newlist</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">getters</span>: {</span><br><span class="line">    <span class="attr">catagtory</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.catagtory.catagtory, <span class="comment">// 建立快捷访问</span></span><br><span class="line">    <span class="attr">currentCatagtory</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.catagtory.currentCatagtory</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<h3 id="遍历分类数据并判断激活class"><a href="#遍历分类数据并判断激活class" class="headerlink" title="遍历分类数据并判断激活class"></a>遍历分类数据并判断激活class</h3><p><strong>分类组件遍历vuex数据</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { mapGetters } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="attr">computed</span>: {</span><br><span class="line">    ...mapGetters([<span class="string">'catagtory'</span>, <span class="string">'currentCatagtroy'</span>])</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;ul class="catagtory"&gt;</span><br><span class="line">   &lt;li :class="{ select: currentCatagtory === item.id }" v-for="item in catagtory"  :key="item.id"&gt;{{ item.name }}&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="封装调用获取分类action-激活第一个分类"><a href="#封装调用获取分类action-激活第一个分类" class="headerlink" title="封装调用获取分类action,激活第一个分类"></a>封装调用获取分类action,激活第一个分类</h3><p><strong>定义获取频道列表的action,  将第一个频道激活</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">actions: {</span><br><span class="line">  <span class="keyword">async</span>  getCatagtory (context) {</span><br><span class="line">    <span class="keyword">const</span> { <span class="attr">data</span>: { <span class="attr">data</span>: { channels } } } = <span class="keyword">await</span>                  axios.get(<span class="string">'http://ttapi.research.itcast.cn/app/v1_0/channels'</span>)</span><br><span class="line">    context.commit(<span class="string">'updateCatagtory'</span>, channels)</span><br><span class="line">    context.commit(<span class="string">'updateCurrentCatagtory'</span>, channels[<span class="number">0</span>].id)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>初始化catagtory时调用action</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { mapGetters } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">computed</span>: {</span><br><span class="line">    ...mapGetters([<span class="string">'catagtory'</span>])</span><br><span class="line">  },</span><br><span class="line">  created () {</span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">'catagtory/getCatagtory'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>点击分类时，触发分类切换</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;li @click="$store.commit('catagtory/updateCurrentCatagtory', item.id)" :class="{ select: currentCatagtroy === item.id }" v-for="item in catagtory"  :key="item.id"&gt;{{ item.name }}&lt;/li&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="定义新闻数据，并封装获取新闻的Action"><a href="#定义新闻数据，并封装获取新闻的Action" class="headerlink" title="定义新闻数据，并封装获取新闻的Action"></a>定义新闻数据，并封装获取新闻的Action</h3><p><strong>在newlist.js中定义获取头条内容的数据</strong>    </p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">state: {</span><br><span class="line">   <span class="attr">allData</span>: {}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>定义更新头条内容的mutations</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">mutations: {</span><br><span class="line">  <span class="comment">// payload 载荷  { 1: [], 2: [], 3: [], 4}</span></span><br><span class="line">  updateList (state, { currentCatagtory, list }) {</span><br><span class="line">    <span class="comment">// 不是响应式的</span></span><br><span class="line">    <span class="comment">// state.allData[currentCatagtory] = list // 这样做事大错特错第  感觉不到变化 就不会通知组件</span></span><br><span class="line">    state.allData = { ...state.allData, [currentCatagtory]: list }</span><br><span class="line">    <span class="comment">// 这句代码的含义 就相当于 在一个新的对象后面追加了一个属性  更新某个属性的内容</span></span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<p><strong>定义根据分类标识获取新闻的action</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">actions: {</span><br><span class="line">  <span class="comment">// 获取新闻列表数据</span></span><br><span class="line">  <span class="comment">// 分类id只能通过传递的方式传进来</span></span><br><span class="line">  <span class="keyword">async</span> getNewList (context, cataId) {</span><br><span class="line">    <span class="keyword">const</span> { <span class="attr">data</span>: { <span class="attr">data</span>: { results } } } = <span class="keyword">await</span> axios.get(<span class="string">`http://ttapi.research.itcast.cn/app/v1_1/articles?channel_id=<span class="subst">${cataId}</span>&amp;timestamp=<span class="subst">${<span class="built_in">Date</span>.now()}</span>&amp;with_top=1`</span>)</span><br><span class="line">    <span class="comment">// results是新闻列表</span></span><br><span class="line">    context.commit(<span class="string">'updateList'</span>, { <span class="attr">currentCatagtory</span>: cataId, <span class="attr">list</span>: results })</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="监听激活分类，触发获取新闻Action"><a href="#监听激活分类，触发获取新闻Action" class="headerlink" title="监听激活分类，触发获取新闻Action"></a>监听激活分类，触发获取新闻Action</h3><p><strong>在new-list组件中，引入当前分类的id，监视其改变，一旦改变，触发获取新闻的action</strong> </p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { mapGetters } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">computed</span>: {</span><br><span class="line">    ...mapGetters([<span class="string">'currentCatagtroy'</span>])</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">watch</span>: {</span><br><span class="line">    currentCatagtory (newValue) {</span><br><span class="line">      <span class="built_in">this</span>.$store.dispatch(<span class="string">'newlist/getNewList'</span>, newValue)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="处理显示新闻内容的数据"><a href="#处理显示新闻内容的数据" class="headerlink" title="处理显示新闻内容的数据"></a>处理显示新闻内容的数据</h3><p><strong>定义当前显示列表的getters</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">getters: {</span><br><span class="line">    <span class="attr">currentList</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.newlist.allData[state.catagtory.currentCatagtory] || []</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>修改new-list内容</strong></p>
<figure class="highlight plaintext"><figcaption><span>&lt;div class</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">     &lt;div class="list"&gt;</span><br><span class="line">        &lt;div class="article_item" v-for="item in currentList" :key="item.art_id"&gt;</span><br><span class="line">          &lt;h3 class="van-ellipsis"&gt;{{ item.title }}&lt;/h3&gt;</span><br><span class="line">          &lt;div class="img_box" v-if="item.cover.type === 1"&gt;</span><br><span class="line">            &lt;img :src="item.cover.images[0]"</span><br><span class="line">            class="w100" /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class="img_box" v-else-if="item.cover.type === 3"&gt;</span><br><span class="line">            &lt;img :src="item.cover.images[0]"</span><br><span class="line">            class="w33" /&gt;</span><br><span class="line">             &lt;img :src="item.cover.images[1]"</span><br><span class="line">            class="w33" /&gt;</span><br><span class="line">             &lt;img :src="item.cover.images[2]"</span><br><span class="line">            class="w33" /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!----&gt;</span><br><span class="line">          &lt;div class="info_box"&gt;</span><br><span class="line">            &lt;span&gt;{{ item.aut_name }}&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;{{ item.comm_count }}评论&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;{{ item.pubdate }}&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入当前激活的分类id</span><br><span class="line">import { mapGetters } from 'vuex'</span><br><span class="line">export default {</span><br><span class="line">  computed: {</span><br><span class="line">    ...mapGetters(['currentCatagtory', 'currentList'])</span><br><span class="line">  },</span><br><span class="line">  watch: {</span><br><span class="line">    currentCatagtory (newValue) {</span><br><span class="line">      // newValue是当前最新的激活的id</span><br><span class="line">      this.$store.dispatch('newlist/getNewList', newValue)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>






]]></content>
      <categories>
        <category>Vuex</category>
      </categories>
      <tags>
        <tag>Vue - Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础6-路由_vant组件库使用</title>
    <url>/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="知识点自测"><a href="#知识点自测" class="headerlink" title="知识点自测"></a>知识点自测</h2><ul>
<li><input disabled="" type="checkbox"> url的组成部分都有哪些, hash值指的什么</li>
</ul>
<h2 id="今日学习目标"><a href="#今日学习目标" class="headerlink" title="今日学习目标"></a>今日学习目标</h2><ol>
<li>能够了解单页面应用概念和优缺点</li>
<li>能够掌握vue-router路由系统使用</li>
<li>能够掌握链接导航和编程式导航用法</li>
<li>能够掌握路由嵌套和路由守卫</li>
<li>能够掌握vant组件库基础使用</li>
</ol>
<h2 id="1-vue路由简介和基础使用"><a href="#1-vue路由简介和基础使用" class="headerlink" title="1. vue路由简介和基础使用"></a>1. vue路由简介和基础使用</h2><h3 id="1-0-什么是路由"><a href="#1-0-什么是路由" class="headerlink" title="1.0 什么是路由"></a>1.0 什么是路由</h3><blockquote>
<p>目标: 设备和ip的映射关系</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/image-20210512095742920.png" alt="image-20210512095742920"></p>
<blockquote>
<p>目标: 接口和服务的映射关系</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/image-20210512095805578.png" alt="image-20210512095805578"></p>
<blockquote>
<p>目标: 路径和组件的映射关系</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/image-20210512095825389.png" alt="image-20210512095825389"></p>
<h3 id="1-1-为什么使用路由"><a href="#1-1-为什么使用路由" class="headerlink" title="1.1 为什么使用路由"></a>1.1 为什么使用路由</h3><blockquote>
<p>目标: 在一个页面里, 切换业务场景</p>
</blockquote>
<p>具体使用示例: 网易云音乐 <a href="https://music.163.com/">https://music.163.com/</a></p>
<p>单页面应用(SPA): 所有功能在一个html页面上实现</p>
<p>前端路由作用: 实现业务场景切换</p>
<p>优点：</p>
<ul>
<li><p>整体不刷新页面，用户体验更好</p>
</li>
<li><p>数据传递容易, 开发效率高</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>开发成本高(需要学习专门知识)</p>
</li>
<li><p>首次加载会比较慢一点。不利于seo</p>
</li>
</ul>
<h3 id="1-2-vue-router介绍"><a href="#1-2-vue-router介绍" class="headerlink" title="1.2 vue-router介绍"></a>1.2 vue-router介绍</h3><blockquote>
<p>目标: 如何在Vue项目中集成路由</p>
</blockquote>
<p>官网: <a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a></p>
<p>vue-router模块包</p>
<p>它和 Vue.js 深度集成</p>
<p>可以定义 - 视图表(映射规则)</p>
<p>模块化的</p>
<p>提供2个内置全局组件</p>
<p>声明式导航自动激活的 CSS class 的链接</p>
<p>……</p>
<h3 id="1-3-路由-组件分类"><a href="#1-3-路由-组件分类" class="headerlink" title="1.3 路由 - 组件分类"></a>1.3 路由 - 组件分类</h3><blockquote>
<p>目标:  .vue文件分2类, 一个是页面组件, 一个是复用组件</p>
</blockquote>
<p>.vue文件本质无区别, 方便大家学习和理解, 总结的一个经验</p>
<p>src/views(或pages) 文件夹 和 src/components文件夹</p>
<ul>
<li>页面组件 - 页面展示 - 配合路由用</li>
<li>复用组件 - 展示数据/常用于复用</li>
</ul>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/image-20210424215930981.png" alt="image-20210424215930981"></p>
<blockquote>
<p>总结: views下的页面组件, 配合路由切换, components下的一般引入到views下的vue中复用展示数据</p>
</blockquote>
<h3 id="1-4-vue-router使用"><a href="#1-4-vue-router使用" class="headerlink" title="1.4 vue-router使用"></a>1.4 vue-router使用</h3><blockquote>
<p>目标: 学会vue官方提供的vue-router路由系统功能模块使用</p>
</blockquote>
<p>App.vue - 页面标签和样式准备(==可复制继续写==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class="footer_wrap"&gt;</span><br><span class="line">      &lt;a href="#/find"&gt;发现音乐&lt;/a&gt;</span><br><span class="line">      &lt;a href="#/my"&gt;我的音乐&lt;/a&gt;</span><br><span class="line">      &lt;a href="#/part"&gt;朋友&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="top"&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.footer_wrap {</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  display: flex;</span><br><span class="line">  width: 100%;</span><br><span class="line">  text-align: center;</span><br><span class="line">  background-color: #333;</span><br><span class="line">  color: #ccc;</span><br><span class="line">}</span><br><span class="line">.footer_wrap a {</span><br><span class="line">  flex: 1;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  padding: 20px 0;</span><br><span class="line">  line-height: 20px;</span><br><span class="line">  background-color: #333;</span><br><span class="line">  color: #ccc;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">}</span><br><span class="line">.footer_wrap a:hover {</span><br><span class="line">  background-color: #555;</span><br><span class="line">}</span><br><span class="line">.top {</span><br><span class="line">  padding-top: 62px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><a href="https://router.vuejs.org/zh/">vue-router文档</a></p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn add vue-router</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>导入路由</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>使用路由插件</li>
</ul>
<figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 在vue中，使用使用vue的插件，都需要调用Vue.use()</span></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>创建路由规则数组</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">"/find"</span>,</span><br><span class="line">    <span class="attr">component</span>: Find</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">"/my"</span>,</span><br><span class="line">    <span class="attr">component</span>: My</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">"/part"</span>,</span><br><span class="line">    <span class="attr">component</span>: Part</span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>创建路由对象 -  传入规则</li>
</ul>
<figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter({</span><br><span class="line">  routes</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>关联到vue实例</li>
</ul>
<figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  router</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>components换成router-view</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 下载路由模块, 编写对应规则注入到vue实例上, 使用router-view挂载点显示切换的路由</p>
<p>总结2: 一切都围绕着hash值变化为准</p>
</blockquote>
<h2 id="2-vue路由-声明式导航"><a href="#2-vue路由-声明式导航" class="headerlink" title="2. vue路由 - 声明式导航"></a>2. vue路由 - 声明式导航</h2><h3 id="2-0-声明式导航-基础使用"><a href="#2-0-声明式导航-基础使用" class="headerlink" title="2.0 声明式导航 - 基础使用"></a>2.0 声明式导航 - 基础使用</h3><blockquote>
<p>目标: 可用全局组件router-link来替代a标签</p>
</blockquote>
<ol>
<li> vue-router提供了一个全局组件 router-link</li>
<li>router-link实质上最终会渲染成a链接 to属性等价于提供 href属性(to无需#)</li>
<li>router-link提供了声明式导航高亮的功能(自带类名)</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class="footer_wrap"&gt;</span><br><span class="line">      &lt;router-link to="/find"&gt;发现音乐&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to="/my"&gt;我的音乐&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to="/part"&gt;朋友&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="top"&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* 省略了 其他样式 */</span><br><span class="line">.footer_wrap .router-link-active{</span><br><span class="line">  color: white;</span><br><span class="line">  background: black;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 链接导航, 用router-link配合to, 实现点击切换路由</p>
</blockquote>
<h3 id="2-1-声明式导航-跳转传参"><a href="#2-1-声明式导航-跳转传参" class="headerlink" title="2.1 声明式导航 - 跳转传参"></a>2.1 声明式导航 - 跳转传参</h3><blockquote>
<p>目标: 在跳转路由时, 可以给路由对应的组件内传值</p>
</blockquote>
<p>在router-link上的to属性传值, 语法格式如下</p>
<ul>
<li><p>/path?参数名=值</p>
</li>
<li><p>/path/值 – 需要路由对象提前配置 path: “/path/参数名”</p>
</li>
</ul>
<p>对应页面组件接收传递过来的值</p>
<ul>
<li><p>$route.query.参数名</p>
</li>
<li><p>$route.params.参数名</p>
</li>
</ul>
<ol>
<li><p>创建components/Part.vue - 准备接收路由上传递的参数和值</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;关注明星&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;发现精彩&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;寻找伙伴&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;加入我们&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;人名: {{ $route.query.name }} -- {{ $route.params.username }}&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>路由定义</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">path</span>: <span class="string">"/part"</span>,</span><br><span class="line">    <span class="attr">component</span>: Part</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">"/part/:username"</span>, <span class="comment">// 有:的路径代表要接收具体的值</span></span><br><span class="line">    <span class="attr">component</span>: Part</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>导航跳转, 传值给MyGoods.vue组件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;router-link to="/part?name=小传"&gt;朋友-小传&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to="/part/小智"&gt;朋友-小智&lt;/router-link&gt;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<blockquote>
<p>总结: </p>
<p>?key=value   用$route.query.key 取值</p>
<p>/值   提前在路由规则/path/:key  用$route.params.key  取值</p>
</blockquote>
<h2 id="3-vue路由-重定向和模式"><a href="#3-vue路由-重定向和模式" class="headerlink" title="3. vue路由 - 重定向和模式"></a>3. vue路由 - 重定向和模式</h2><h3 id="3-0-路由-重定向"><a href="#3-0-路由-重定向" class="headerlink" title="3.0 路由 - 重定向"></a>3.0 路由 - 重定向</h3><blockquote>
<p>目标: 匹配path后, 强制切换到目标path上</p>
</blockquote>
<ul>
<li>网页打开url默认hash值是/路径</li>
<li>redirect是设置要重定向到哪个路由路径</li>
</ul>
<p>例如: 网页默认打开, 匹配路由”/“, 强制切换到”/find”上</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">"/"</span>, <span class="comment">// 默认hash值路径</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">"/find"</span> <span class="comment">// 重定向到/find</span></span><br><span class="line">    <span class="comment">// 浏览器url中#后的路径被改变成/find-重新匹配数组规则</span></span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 强制重定向后, 还会重新来数组里匹配一次规则</p>
</blockquote>
<h3 id="3-1-路由-404页面"><a href="#3-1-路由-404页面" class="headerlink" title="3.1 路由 - 404页面"></a>3.1 路由 - 404页面</h3><blockquote>
<p>目标: 如果路由hash值, 没有和数组里规则匹配</p>
</blockquote>
<p>默认给一个404页面</p>
<p>语法: 路由最后, path匹配*(任意路径) – 前面不匹配就命中最后这个, 显示对应组件页面</p>
<ol>
<li><p>创建NotFound页面</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img src="../assets/404.png" alt=""&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    img{</span><br><span class="line">        width: 100%;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>在main.js - 修改路由配置</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">'@/views/NotFound'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// ...省略了其他配置</span></span><br><span class="line">  <span class="comment">// 404在最后(规则是从前往后逐个比较path)</span></span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">"*"</span>,</span><br><span class="line">    <span class="attr">component</span>: NotFound</span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<blockquote>
<p>总结: 如果路由未命中任何规则, 给出一个兜底的404页面</p>
</blockquote>
<h3 id="3-2-路由-模式设置"><a href="#3-2-路由-模式设置" class="headerlink" title="3.2 路由 - 模式设置"></a>3.2 路由 - 模式设置</h3><blockquote>
<p>目标: 修改路由在地址栏的模式</p>
</blockquote>
<p>hash路由例如:  <a href="http://localhost:8080/#/home">http://localhost:8080/#/home</a></p>
<p>history路由例如: <a href="http://localhost:8080/home">http://localhost:8080/home</a>  (以后上线需要服务器端支持, 否则找的是文件夹)</p>
<p><a href="https://router.vuejs.org/zh/api/#mode">模式文档</a></p>
<p>router/index.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter({</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">"history"</span> <span class="comment">// 打包上线后需要后台支持, 模式是hash</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-vue路由-编程式导航"><a href="#4-vue路由-编程式导航" class="headerlink" title="4. vue路由 - 编程式导航"></a>4. vue路由 - 编程式导航</h2><blockquote>
<p>用JS代码跳转, 声明式导航用a标签</p>
</blockquote>
<h3 id="4-0-编程式导航-基础使用"><a href="#4-0-编程式导航-基础使用" class="headerlink" title="4.0 编程式导航 - 基础使用"></a>4.0 编程式导航 - 基础使用</h3><blockquote>
<p>目标: 用JS代码来进行跳转</p>
</blockquote>
<p>语法:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push({</span><br><span class="line">    <span class="attr">path</span>: <span class="string">"路由路径"</span>, <span class="comment">// 都去 router/index.js定义</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">"路由名"</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<ol>
<li>main.js - 路由数组里, 给路由起名字</li>
</ol>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    path: <span class="string">"/find"</span>,</span><br><span class="line">    name: <span class="string">"Find"</span>,</span><br><span class="line">    component: Find</span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    path: <span class="string">"/my"</span>,</span><br><span class="line">    name: <span class="string">"My"</span>,</span><br><span class="line">    component: My</span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    path: <span class="string">"/part"</span>,</span><br><span class="line">    name: <span class="string">"Part"</span>,</span><br><span class="line">    component: Part</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>App.vue - 换成span 配合js的编程式导航跳转</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class="footer_wrap"&gt;</span><br><span class="line">      &lt;span @click="btn('/find', 'Find')"&gt;发现音乐&lt;/span&gt;</span><br><span class="line">      &lt;span @click="btn('/my', 'My')"&gt;我的音乐&lt;/span&gt;</span><br><span class="line">      &lt;span @click="btn('/part', 'Part')"&gt;朋友&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="top"&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 编程式导航 - js方式跳转路由</span><br><span class="line">// 语法:</span><br><span class="line">// this.$router.push({path: "路由路径"})</span><br><span class="line">// this.$router.push({name: "路由名"})</span><br><span class="line">// 注意:</span><br><span class="line">// 虽然用name跳转, 但是url的hash值还是切换path路径值</span><br><span class="line">// 场景:</span><br><span class="line">// 方便修改: name路由名(在页面上看不见随便定义)</span><br><span class="line">// path可以在url的hash值看到(尽量符合组内规范)</span><br><span class="line">export default {</span><br><span class="line">  methods: {</span><br><span class="line">    btn(targetPath, targetName){</span><br><span class="line">      // 方式1: path跳转</span><br><span class="line">      this.$router.push({</span><br><span class="line">        // path: targetPath,</span><br><span class="line">        name: targetName</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-1-编程式导航-跳转传参"><a href="#4-1-编程式导航-跳转传参" class="headerlink" title="4.1 编程式导航 - 跳转传参"></a>4.1 编程式导航 - 跳转传参</h3><blockquote>
<p>目标: JS跳转路由, 传参</p>
</blockquote>
<p>语法 query / params 任选 一个</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push({</span><br><span class="line">    <span class="attr">path</span>: <span class="string">"路由路径"</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">"路由名"</span>,</span><br><span class="line">    <span class="attr">query</span>: {</span><br><span class="line">    	<span class="string">"参数名"</span>: 值</span><br><span class="line">    }</span><br><span class="line">    <span class="attr">params</span>: {</span><br><span class="line">		<span class="string">"参数名"</span>: 值</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应路由接收   $route.params.参数名   取值</span></span><br><span class="line"><span class="comment">// 对应路由接收   $route.query.参数名    取值</span></span><br></pre></td></tr></tbody></table></figure>

<p>==格外注意: 使用path会自动忽略params==</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class="footer_wrap"&gt;</span><br><span class="line">      &lt;span @click="btn('/find', 'Find')"&gt;发现音乐&lt;/span&gt;</span><br><span class="line">      &lt;span @click="btn('/my', 'My')"&gt;我的音乐&lt;/span&gt;</span><br><span class="line">      &lt;span @click="oneBtn"&gt;朋友-小传&lt;/span&gt;</span><br><span class="line">      &lt;span @click="twoBtn"&gt;朋友-小智&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="top"&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 编程式导航 - 跳转路由传参</span><br><span class="line">// 方式1:</span><br><span class="line">// params =&gt; $route.params.参数名</span><br><span class="line">// 方式2:</span><br><span class="line">// query =&gt; $route.query.参数名</span><br><span class="line">// 重要: path会自动忽略params</span><br><span class="line">// 推荐: name+query方式传参</span><br><span class="line">// 注意: 如果当前url上"hash值和?参数"与你要跳转到的"hash值和?参数"一致, 爆出冗余导航的问题, 不会跳转路由</span><br><span class="line">export default {</span><br><span class="line">  methods: {</span><br><span class="line">    btn(targetPath, targetName){</span><br><span class="line">      // 方式1: path跳转</span><br><span class="line">      this.$router.push({</span><br><span class="line">        // path: targetPath,</span><br><span class="line">        name: targetName</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    oneBtn(){</span><br><span class="line">      this.$router.push({</span><br><span class="line">        name: 'Part',</span><br><span class="line">        params: {</span><br><span class="line">          username: '小传'</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    twoBtn(){</span><br><span class="line">      this.$router.push({</span><br><span class="line">        name: 'Part',</span><br><span class="line">        query: {</span><br><span class="line">          name: '小智'</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 传参2种方式</p>
<p>query方式 </p>
<p>params方式 </p>
</blockquote>
<h2 id="5-vue路由-嵌套和守卫"><a href="#5-vue路由-嵌套和守卫" class="headerlink" title="5. vue路由 - 嵌套和守卫"></a>5. vue路由 - 嵌套和守卫</h2><h3 id="5-0-vue路由-路由嵌套"><a href="#5-0-vue路由-路由嵌套" class="headerlink" title="5.0 vue路由 - 路由嵌套"></a>5.0 vue路由 - 路由嵌套</h3><blockquote>
<p>目标: 在现有的一级路由下, 再嵌套二级路由</p>
</blockquote>
<p><a href="https://music.163.com/">二级路由示例-网易云音乐-发现音乐下</a></p>
<p>router-view嵌套架构图</p>
<ol>
<li><p>创建需要用的所有组件</p>
<p>src/views/Find.vue – 发现音乐页</p>
<p>src/views/My.vue – 我的音乐页</p>
<p>src/views/Second/Recommend.vue  – 发现音乐页 / 推荐页面</p>
<p>src/views/Second/Ranking.vue      – 发现音乐页 / 排行榜页面</p>
<p>src/views/Second/SongList.vue     – 发现音乐页 / 歌单页面</p>
</li>
<li><p>main.js– 继续配置2级路由</p>
<p>一级路由path从/开始定义</p>
<p>二级路由往后path直接写名字, 无需/开头</p>
<p>嵌套路由在上级路由的children数组里编写路由信息对象</p>
</li>
<li><p>说明：</p>
<p>App.vue的router-view负责发现音乐和我的音乐页面, 切换</p>
<p>Find.vue的的router-view负责发现音乐下的, 三个页面, 切换</p>
</li>
</ol>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/image-20210116162013983.png" alt="image-20210116162013983"></p>
<ol>
<li>配置二级导航和样式(==可直接复制==) - 在Find.vue中</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- &lt;p&gt;推荐&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;排行榜&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;歌单&lt;/p&gt; --&gt;</span><br><span class="line">    &lt;div class="nav_main"&gt;</span><br><span class="line">      &lt;router-link to="/find/recommend"&gt;推荐&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to="/find/ranking"&gt;排行榜&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to="/find/songlist"&gt;歌单&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div style="1px solid red;"&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.nav_main {</span><br><span class="line">  background-color: red;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 10px 0;</span><br><span class="line">}</span><br><span class="line">.nav_main a {</span><br><span class="line">  text-align: center;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  color: white;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  margin: 7px 17px 0;</span><br><span class="line">  padding: 0px 15px 2px 15px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  line-height: 20px;</span><br><span class="line">  border-radius: 20px;</span><br><span class="line">}</span><br><span class="line">.nav_main a:hover {</span><br><span class="line">  background-color: brown;</span><br><span class="line">}</span><br><span class="line">.nav_main .router-link-active{</span><br><span class="line">  background-color: brown;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>配置路由规则-二级路由展示</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// ...省略其他</span></span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">"/find"</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"Find"</span>,</span><br><span class="line">    <span class="attr">component</span>: Find,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">"recommend"</span>,</span><br><span class="line">        <span class="attr">component</span>: Recommend</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">"ranking"</span>,</span><br><span class="line">        <span class="attr">component</span>: Ranking</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">"songlist"</span>,</span><br><span class="line">        <span class="attr">component</span>: SongList</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// ...省略其他</span></span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>说明：</li>
</ol>
<ul>
<li><p>App.vue, 外层的router-view负责发现音乐和我的音乐页面切换</p>
</li>
<li><p>Find.vue 内层的router-view负责发现音乐下的子tab对应的组件切换</p>
</li>
</ul>
<ol start="4">
<li>运行 - 点击导航观察嵌套路由在哪里展示</li>
</ol>
<blockquote>
<p>总结: 嵌套路由, 找准在哪个页面里写router-view和对应规则里写children</p>
</blockquote>
<h3 id="5-1-声明导航-类名区别"><a href="#5-1-声明导航-类名区别" class="headerlink" title="5.1 声明导航 - 类名区别"></a>5.1 声明导航 - 类名区别</h3><blockquote>
<p>目标: router-link自带的2个类名的区别是什么</p>
</blockquote>
<p>观察路由嵌套导航的样式</p>
<ul>
<li><p>router-link-exact-active  (精确匹配) url中hash值路径, 与href属性值完全相同, 设置此类名</p>
</li>
<li><p>router-link-active             (模糊匹配) url中hash值,    包含href属性值这个路径</p>
</li>
</ul>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/image-20210512102829250.png" alt="image-20210512102829250"></p>
<h3 id="5-2-全局前置守卫"><a href="#5-2-全局前置守卫" class="headerlink" title="5.2 全局前置守卫"></a>5.2 全局前置守卫</h3><blockquote>
<p>目标: 路由跳转之前, 先执行一次前置守卫函数, 判断是否可以正常跳转</p>
</blockquote>
<p>使用例子: 在跳转路由前, 判断用户登陆了才能去&lt;我的音乐&gt;页面, 未登录弹窗提示回到发现音乐页面</p>
<ol>
<li>在路由对象上使用固定方法beforeEach</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 目标: 路由守卫</span></span><br><span class="line"><span class="comment">// 场景: 当你要对路由权限判断时</span></span><br><span class="line"><span class="comment">// 语法: router.beforeEach((to, from, next)=&gt;{//路由跳转"之前"先执行这里, 决定是否跳转})</span></span><br><span class="line"><span class="comment">// 参数1: 要跳转到的路由 (路由对象信息)    目标</span></span><br><span class="line"><span class="comment">// 参数2: 从哪里跳转的路由 (路由对象信息)  来源</span></span><br><span class="line"><span class="comment">// 参数3: 函数体 - next()才会让路由正常的跳转切换, next(false)在原地停留, next("强制修改到另一个路由路径上")</span></span><br><span class="line"><span class="comment">// 注意: 如果不调用next, 页面留在原地</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子: 判断用户是否登录, 是否决定去"我的音乐"/my</span></span><br><span class="line"><span class="keyword">const</span> isLogin = <span class="literal">true</span>; <span class="comment">// 登录状态(未登录)</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">"/my"</span> &amp;&amp; isLogin === <span class="literal">false</span>) {</span><br><span class="line">    alert(<span class="string">"请登录"</span>)</span><br><span class="line">    next(<span class="literal">false</span>) <span class="comment">// 阻止路由跳转</span></span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    next() <span class="comment">// 正常放行</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: next()放行, next(false)留在原地不跳转路由, next(path路径)强制换成对应path路径跳转</p>
</blockquote>
<h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><h2 id="1-vant组件库"><a href="#1-vant组件库" class="headerlink" title="1. vant组件库"></a>1. vant组件库</h2><h3 id="1-0-vant组件库-介绍"><a href="#1-0-vant组件库-介绍" class="headerlink" title="1.0 vant组件库-介绍"></a>1.0 vant组件库-介绍</h3><blockquote>
<p>目标: vant是一个轻量、可靠的移动端 Vue 组件库, 开箱即用</p>
</blockquote>
<p><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/">vant官网</a></p>
<p>特点:</p>
<ul>
<li>提供 60 多个高质量组件，覆盖移动端各类场景</li>
<li>性能极佳，组件平均体积不到 1kb</li>
<li>完善的中英文文档和示例</li>
<li>支持 Vue 2 &amp; Vue 3</li>
<li>支持按需引入和主题定制</li>
</ul>
<h3 id="1-1-全部引入"><a href="#1-1-全部引入" class="headerlink" title="1.1 全部引入"></a>1.1 全部引入</h3><blockquote>
<p>目标: 看官网文档, 下载, 引入vant组件库</p>
</blockquote>
<p>全部引入, 快速开始:<a href="https://vant-contrib.gitee.io/vant/#/zh-CN/quickstart">https://vant-contrib.gitee.io/vant/#/zh-CN/quickstart</a></p>
<p>1.全部引入, 快速开始: <a href="https://vant-contrib.gitee.io/vant/">https://vant-contrib.gitee.io/vant/#/zh-CN/quickstart</a></p>
<p>2.下载Vant组件库到当前项目中</p>
<p>3.在main.js中全局导入所有组件,</p>
<p>4.使用按钮组件 – 作为示范的例子</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/image-20210512103112221.png" alt="image-20210512103112221"></p>
<ol>
<li><p>下载vant组件库到当前项目中</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn add vant -D</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>导入所有组件, 在main.js中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vant <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'vant/lib/index.css'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vant);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>使用按钮组件</p>
<p><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/button">https://vant-contrib.gitee.io/vant/#/zh-CN/button</a></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-button type="primary"&gt;主要按钮&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type="info"&gt;信息按钮&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type="default"&gt;默认按钮&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type="warning"&gt;警告按钮&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type="danger"&gt;危险按钮&lt;/van-button&gt;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="1-2-手动按需引入"><a href="#1-2-手动按需引入" class="headerlink" title="1.2 手动按需引入"></a>1.2 手动按需引入</h3><blockquote>
<p>目标: 只引入使用的组件</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/image-20210512103145759.png" alt="image-20210512103145759"></p>
<p>1.手动单独引入, 快速开始: <a href="https://vant-contrib.gitee.io/vant/">https://vant-contrib.gitee.io/vant/#/zh-CN/quickstart</a></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 方式2: 手动 按需引入</span></span><br><span class="line"><span class="comment">// import Button from 'vant/lib/button'; // button组件</span></span><br><span class="line"><span class="comment">// import 'vant/lib/button/style'; // button样式</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>注册</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// components: { // 手动注册组件名</span></span><br><span class="line"><span class="comment">//   // VanButton: Button</span></span><br><span class="line"><span class="comment">//   // 等价的</span></span><br><span class="line"><span class="comment">//   [Button.name]: Button</span></span><br><span class="line"><span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>使用</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-button type="primary"&gt;主要按钮&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type="info"&gt;信息按钮&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type="default"&gt;默认按钮&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type="warning"&gt;警告按钮&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type="danger"&gt;危险按钮&lt;/van-button&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="1-3-自动按需引入"><a href="#1-3-自动按需引入" class="headerlink" title="1.3 自动按需引入"></a>1.3 自动按需引入</h3><blockquote>
<p>目标: 按需加载组件</p>
</blockquote>
<p><a href="https://github.com/ant-design/babel-plugin-import">babel-plugin-import</a> 是一款 babel 插件，它会在编译过程中将 import 的写法自动转换为按需引入的方式。</p>
<ol>
<li><p>安装插件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn add babel-plugin-import -D</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>在babel配置文件里 (babel.config.js)</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">'import'</span>, {</span><br><span class="line">      <span class="attr">libraryName</span>: <span class="string">'vant'</span>,</span><br><span class="line">      <span class="attr">libraryDirectory</span>: <span class="string">'es'</span>,</span><br><span class="line">      <span class="attr">style</span>: <span class="literal">true</span></span><br><span class="line">    }, <span class="string">'vant'</span>]</span><br><span class="line">  ]</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>全局注册 - 会自动按需引入</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1: 全局 - 自动按需引入vant组件</span></span><br><span class="line"><span class="comment">// (1): 下载 babel-plugin-import</span></span><br><span class="line"><span class="comment">// (2): babel.config.js - 添加官网说的配置 (一定要重启服务器)</span></span><br><span class="line"><span class="comment">// (3): main.js 按需引入某个组件, Vue.use全局注册 - 某个.vue文件中直接使用vant组件</span></span><br><span class="line"><span class="keyword">import</span> { Button } <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br><span class="line">Vue.use(Button) <span class="comment">// Button组件全局注册, 真正注册的组件名VanButton</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="1-4-弹出框使用"><a href="#1-4-弹出框使用" class="headerlink" title="1.4 弹出框使用"></a>1.4 弹出框使用</h3><blockquote>
<p>目标: 使用弹出框组件</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/image-20210512103419096.png" alt="image-20210512103419096"></p>
<p><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/dialog">https://vant-contrib.gitee.io/vant/#/zh-CN/dialog</a></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;van-button type="primary" @click="btn"&gt;主要按钮&lt;/van-button&gt;</span><br><span class="line">    &lt;van-button type="info"&gt;信息按钮&lt;/van-button&gt;</span><br><span class="line">    &lt;van-button type="default"&gt;默认按钮&lt;/van-button&gt;</span><br><span class="line">    &lt;van-button type="warning"&gt;警告按钮&lt;/van-button&gt;</span><br><span class="line">    &lt;van-button type="danger"&gt;危险按钮&lt;/van-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 方式2: 手动 按需引入</span><br><span class="line">// import Button from 'vant/lib/button'; // button组件</span><br><span class="line">// import 'vant/lib/button/style'; // button样式</span><br><span class="line"></span><br><span class="line">// 目标: 使用弹出框</span><br><span class="line">// 1. 找到vant文档</span><br><span class="line">// 2. 引入</span><br><span class="line">// 3. 在恰当时机, 调用此函数 (还可以用组件的用法)</span><br><span class="line">import { Dialog } from "vant";</span><br><span class="line">export default {</span><br><span class="line">  // components: { // 手动注册组件名</span><br><span class="line">  //   // VanButton: Button</span><br><span class="line">  //   // 等价的</span><br><span class="line">  //   [Button.name]: Button</span><br><span class="line">  // }</span><br><span class="line">  methods: {</span><br><span class="line">    btn() {</span><br><span class="line">      Dialog({ message: "提示", showCancelButton: true }); // 调用执行时, 页面就会出弹出框</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="1-5-表单使用"><a href="#1-5-表单使用" class="headerlink" title="1.5 表单使用"></a>1.5 表单使用</h3><blockquote>
<p>目标: 使用vant组件里的表单组件</p>
</blockquote>
<p><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/form">https://vant-contrib.gitee.io/vant/#/zh-CN/form</a></p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/image-20210512103438024.png" alt="image-20210512103438024"></p>
<p>表单验证规则:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/image-20210321220047052.png" alt="image-20210321220047052"></p>
<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ul>
<li><p><input disabled="" type="checkbox">  了解什么是单页面应用, 以及优缺点</p>
</li>
<li><p><input disabled="" type="checkbox">  了解组件分为哪2类</p>
</li>
<li><p><input disabled="" type="checkbox">  路由的本质是什么, 就是改变url的hash值, 让js监听到, 根据配置好的映射规则, 显示不同的DOM</p>
</li>
<li><p><input disabled="" type="checkbox">  声明式导航router-link是vue-router封装注册的全局组件, 比a标签好处是封装了高亮类名等</p>
</li>
<li><p><input disabled="" type="checkbox">  编程式导航, 用Vue内置的方法改变浏览器url,  this.$router.push() </p>
</li>
<li><p><input disabled="" type="checkbox">  路由跳转传参总结</p>
<table>
<thead>
<tr>
<th>跳转方法</th>
<th>传参位置</th>
<th>路由规则</th>
<th>接收</th>
</tr>
</thead>
<tbody><tr>
<td><router-link to="/path?key=value"></router-link></td>
<td>/path?key=value</td>
<td>无特殊</td>
<td>$route.query.key</td>
</tr>
<tr>
<td><router-link to="/path/值"></router-link></td>
<td>/path/值</td>
<td>/path/:key</td>
<td>$route.params.key</td>
</tr>
<tr>
<td>this.$router.push({path: “/path”, query: {key: value}})</td>
<td>query的对象</td>
<td>无特殊</td>
<td>$route.query.key</td>
</tr>
<tr>
<td>this.$router.push({name: “com”, params: {key: value})</td>
<td>params的对象</td>
<td>路由规则需要name属性</td>
<td>$route.params.key(注意,这种在内存中保存)</td>
</tr>
</tbody></table>
<p>==无论哪种格式, 声明式和编程式都是通用的, 保证路径和参数格式正确就ok==</p>
</li>
<li><p><input disabled="" type="checkbox">  路由重定向, 在配置项上使用redirect到目标路由路径</p>
</li>
<li><p><input disabled="" type="checkbox">  嵌套路由就是在某个一级页面中, 在嵌套一套路由切换系统</p>
<ul>
<li>在路由规则里找到一级路由, 写children: []  注意: 除了第一层一级路由path写/, 子的开头都无需/</li>
<li>跳转时, 要去的路由路径从一级开始写</li>
<li>心中要做到 浏览器url 路由值  和路由规则里的path 对上即可</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox">  全局路由前置守卫 - 可以在跳转路由前进行一些权限判断</p>
</li>
<li><p><input disabled="" type="checkbox">  vant组件库是封装好的组件, 我们拿来即可使用</p>
</li>
</ul>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1-路由之间是怎么跳转的？有哪些方式"><a href="#1-路由之间是怎么跳转的？有哪些方式" class="headerlink" title="1. 路由之间是怎么跳转的？有哪些方式"></a>1. 路由之间是怎么跳转的？有哪些方式</h3><p>1、<router-link to="需要跳转到页面的路径"></router-link></p>
<p> 2、this.$router.push()跳转到指定的url，并在history中添加记录，点击回退返回到上一个页面</p>
<p> 3、this.$router.replace()跳转到指定的url，但是history中不会添加记录，点击回退到上上个页面</p>
<p> 4、this.$touter.go(n)向前或者后跳转n个页面，n可以是正数也可以是负数</p>
<h3 id="2-vue-router怎么配置路由"><a href="#2-vue-router怎么配置路由" class="headerlink" title="2. vue-router怎么配置路由"></a>2. vue-router怎么配置路由</h3><p>在vue中配置路由分为5个步骤，分别是：</p>
<ol>
<li>引入vue-router.js</li>
<li>配置路由path和组件, 和生成路由对象</li>
<li>把路由对象配置到new Vue中router选项下</li>
<li>页面使用<router-view></router-view> 承载路由</li>
<li><router-link to="要跳转的路径"></router-link> 设置路由导航(声明式导航方式/编程式跳转)</li>
</ol>
<h3 id="3-vue-router的钩子函数都有哪些"><a href="#3-vue-router的钩子函数都有哪些" class="headerlink" title="3. vue-router的钩子函数都有哪些"></a>3. vue-router的钩子函数都有哪些</h3><p>关于vue-router中的钩子函数主要分为3类</p>
<p>全局钩子函数要包含beforeEach</p>
<p>  beforeEach函数有三个参数,分别是:</p>
<p>​    to:router即将进入的路由对象<br>​    from:当前导航即将离开的路由<br>​    next:function,进行管道中的一个钩子，如果执行完了,则导航的状态就是 confirmed （确认的）否则为false,终止导航。</p>
<p>单独路由独享组件</p>
<p>​    beforeEnter,</p>
<p>组件内钩子</p>
<p>   beforeRouterEnter，<br>   beforeRouterUpdate,<br>   beforeRouterLeave</p>
<h3 id="4-路由传值的方式有哪几种"><a href="#4-路由传值的方式有哪几种" class="headerlink" title="4. 路由传值的方式有哪几种"></a>4. 路由传值的方式有哪几种</h3><p>Vue-router传参可以分为两大类，分别是编程式的导航 router.push和声明式的导航</p>
<p>router.push</p>
<p>   字符串：直接传递路由地址，但是不能传递参数</p>
<p>​          this.$router.push(“home”)</p>
<p>​    对象：</p>
<p>​      命名路由  这种方式传递参数，目标页面刷新会报错 - name+params</p>
<p>​               this.$router.push({name:”news”,params:{userId:123})</p>
<p>​      查询参数  和path配对的是query</p>
<p>​               this.$router.push({path:”/news’,query:{uersId:123}) </p>
<p>​      接收参数  this.$route.query</p>
<p>声明式导航</p>
<p>​      字符串 &lt;router-link to:”news”&gt;</p>
<p>​      命名路由 &lt;router-link :to:”{name:’news’,params:{userid:1111}}”&gt;</p>
<p>​      还可以to=”/path/值” - 需要提前在路由 规则里值 /path/:key</p>
<p>​      查询参数 <router-link :to="{path:'/news',query:{userId:1111}}"></router-link></p>
<p>​       还可以to=”/path?key=value</p>
<h3 id="5-怎么定义vue-router的动态路由-怎么获取传过来的动态参数"><a href="#5-怎么定义vue-router的动态路由-怎么获取传过来的动态参数" class="headerlink" title="5. 怎么定义vue-router的动态路由?怎么获取传过来的动态参数?"></a>5. 怎么定义vue-router的动态路由?怎么获取传过来的动态参数?</h3><p>   动态路由指的就是path路径上传智, 前提需要路由规则了提前配置/path/:key名, 可以写多个用/隔开, 获取使用$route.params.key名来提取对应用路径传过来的值</p>
<h3 id="6-Vue的路由实现模式：hash模式和history模式（必会）"><a href="#6-Vue的路由实现模式：hash模式和history模式（必会）" class="headerlink" title="6. Vue的路由实现模式：hash模式和history模式（必会）"></a>6. Vue的路由实现模式：hash模式和history模式（必会）</h3><p>hash模式：在浏览器中符号“#”，#以及#后面的字符称之为hash，用 window.location.hash 读取。特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。</p>
<p>history模式：history采用HTML5的新特性；且提供了两个新方法： pushState()， replaceState()可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更</p>
<h3 id="7-请说出路由配置项常用的属性及作用（必会）"><a href="#7-请说出路由配置项常用的属性及作用（必会）" class="headerlink" title="7. 请说出路由配置项常用的属性及作用（必会）"></a>7. 请说出路由配置项常用的属性及作用（必会）</h3><p>​    路由配置参数：  </p>
<p>​      path : 跳转路径<br>​      component : 路径相对于的组件<br>​     name:命名路由<br>​     children:子路由的配置参数(路由嵌套)<br>​     props:路由解耦<br>​     redirect : 重定向路由</p>
<h3 id="8-编程式导航使用的方法以及常用的方法（必会）"><a href="#8-编程式导航使用的方法以及常用的方法（必会）" class="headerlink" title="8. 编程式导航使用的方法以及常用的方法（必会）"></a>8. 编程式导航使用的方法以及常用的方法（必会）</h3><p>​    路由跳转 ： this.$router.push()<br>​    路由替换 : this.$router.replace()<br>​    后退： this.$router.back()<br>​    前进 ：this.$router.forward()</p>
<h3 id="9-Vue如何去除URL中的-（必会）"><a href="#9-Vue如何去除URL中的-（必会）" class="headerlink" title="9. Vue如何去除URL中的#（必会）"></a>9. Vue如何去除URL中的#（必会）</h3><p>​    vue-router 默认使用 hash 模式，所以在路由加载的时候，项目中的 URL 会自带 “#”。如果不想使用 “#”， 可以使用 vue-router 的另一种模式 history：new Router ({ mode : ‘history’, routes: [ ]})</p>
<p>​    需要注意的是，当我们启用 history 模式的时候，由于我们的项目是一个单页面应用，所以在路由跳转的时候，就会出现访问不到静态资源而出现 “404” 的情况，这时候就需要服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 “index.html” 页面。</p>
<h3 id="10-说一下你在vue中踩过的坑（必会）"><a href="#10-说一下你在vue中踩过的坑（必会）" class="headerlink" title="10. 说一下你在vue中踩过的坑（必会）"></a>10. 说一下你在vue中踩过的坑（必会）</h3><p>​    1、第一个是给对象添加属性的时候，直接通过给data里面的对象添加属性然后赋值，新添加的属性不是响应式的</p>
<p>​    【解决办法】通过Vue.set(对象，属性，值)这种方式就可以达到，对象新添加的属性是响应式的</p>
<p>2、 在created操作dom的时候，是报错的，获取不到dom，这个时候实例vue实例没有挂载</p>
<p>​    【解决办法】通过：Vue.nextTick(回调函数进行获取)</p>
<h3 id="11-route和-router的区别？"><a href="#11-route和-router的区别？" class="headerlink" title="11. $route和$router的区别？"></a>11. <strong>$route和$router的区别？</strong></h3><p>$route是路由信息对象，包括‘path，hash，query，fullPath，matched，name’等路由信息参数；<br>$router是路由实例对象，包括了路由的跳转方法，实例对象等</p>
<h2 id="附加练习-1-切换页面"><a href="#附加练习-1-切换页面" class="headerlink" title="附加练习_1.切换页面"></a>附加练习_1.切换页面</h2><blockquote>
<p>目的: 点击导航a标签, 实现下面页面内容的切换</p>
</blockquote>
<p>建议: 新初始化一个空白的项目来写, 避免新手放到一起, 看的乱</p>
<p>要求: 网页打开默认显示 - 首页部分</p>
<p>规范: </p>
<ul>
<li>views/ 4个页面.vue文件</li>
<li>router/index.js - 路由配置</li>
<li>App.vue显示, main.js 注册路由</li>
</ul>
<p>效果:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/13.5_%E8%AF%BE%E4%B8%8A%E7%BB%83%E4%B9%A0_%E5%AF%BC%E8%88%AA%E5%88%87%E6%8D%A2.gif" alt="13.5_课上练习_导航切换"></p>
<h2 id="附加练习-2-二级路由嵌套"><a href="#附加练习-2-二级路由嵌套" class="headerlink" title="附加练习_2.二级路由嵌套"></a>附加练习_2.二级路由嵌套</h2><blockquote>
<p>目标: 完成git演示的路由切换效果</p>
</blockquote>
<p>建议: 再新建一个工程来写</p>
<p>图示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/14.3_%E8%B7%AF%E7%94%B1%E5%B5%8C%E5%A5%97%E7%BB%83%E4%B9%A0.gif" alt="14.3_路由嵌套练习"></p>
<h2 id="附加练习-3-tabbar切换"><a href="#附加练习-3-tabbar切换" class="headerlink" title="附加练习_3-tabbar切换"></a>附加练习_3-tabbar切换</h2><p>把之前写的tabbar案例(原来用动态组件实现)</p>
<p>现在请用路由实现相同的切换效果</p>
<h2 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h2><h3 id="三级路由嵌套"><a href="#三级路由嵌套" class="headerlink" title="三级路由嵌套"></a>三级路由嵌套</h3><p>要求:</p>
<ul>
<li>默认显示第一个UI_Router路由(一级路由) 3个组件</li>
<li>第二个组件需要嵌入导航和二级路由 展示区域</li>
<li>Bob下才需要第三个路由嵌入</li>
</ul>
<p>提示:</p>
<blockquote>
<p>点击按钮使用编程式导航, 可以在2级路由导航路径(带2个/的) 先写成一个数组, 随机取1个然后跳转即可</p>
</blockquote>
<p>问题:</p>
<p>可能会爆出警告, 编程式导航如果当前已经在这页, 还想跳转当前路由就会出个警告, 无需关心不影响功能</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%806-%E8%B7%AF%E7%94%B1_vant%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BD%BF%E7%94%A8/Day05_%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A_%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1%E4%BD%9C%E4%B8%9A.gif" alt="Day05_课后作业_嵌套路由作业"></p>
<p>标签内容(有的短自己手写吧)</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Welcome to the UI-Router Demo<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Use the menu above to navigate. Pay attention to the $state and $stateParams values below.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Click these links—Alice or Bob—to see a url redirect in action.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>UI-Router Resources<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Source for this Sample<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>GitHub Main Page<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Quick Start<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>In-Depth Guide<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>API Reference<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="额外扩展"><a href="#额外扩展" class="headerlink" title="额外扩展"></a>额外扩展</h2><h3 id="路由-工作原理手写"><a href="#路由-工作原理手写" class="headerlink" title="路由 - 工作原理手写"></a>路由 - 工作原理手写</h3><blockquote>
<p>目标: 了解hash改变, 如何显示不同的组件的过程</p>
</blockquote>
<p>基本思路:</p>
<ol>
<li>用户点击了页面上的a链接</li>
<li>导致了 URL 地址栏中的 Hash 值发生了变化</li>
<li>前端js监听了到 Hash 地址的变化</li>
<li>前端js把当前 Hash 地址对应的组件渲染都浏览器中</li>
</ol>
<p>实现简单的前端路由:</p>
<ol>
<li><p>src/views/创建并在App.vue里导入和注册组件</p>
<p>MyHome.vue</p>
<p>MyMovie.vue</p>
<p>MyAbout.vue</p>
</li>
</ol>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyHome <span class="keyword">from</span> <span class="string">'@/views/MyHome.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyMovie <span class="keyword">from</span> <span class="string">'@/views/MyMovie.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyAbout <span class="keyword">from</span> <span class="string">'@/views/MyAbout.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {</span></span><br><span class="line"><span class="javascript">    MyHome,</span></span><br><span class="line"><span class="javascript">    MyMovie,</span></span><br><span class="line"><span class="javascript">    MyAbout,</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>通过动态组件, 控制要显示的组件</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;App组件&lt;/h1&gt;</span><br><span class="line">    &lt;component :is="comName"&gt;&lt;/component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  // ...省略其他</span><br><span class="line">  data () {</span><br><span class="line">    return {</span><br><span class="line">      comName: 'MyHome'</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>声明三个导航链接, 点击时修改地址栏的 hash 值</li>
</ol>
<figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/home"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/movie"</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/about"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"comName"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>在 created 中, 监视地址栏 hash 时的变化, 一旦变化, 动态切换展示的组件</li>
</ol>
<figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">created () {</span><br><span class="line">  <span class="built_in">window</span>.onhashchange = <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="keyword">switch</span>(location.hash) {</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'#/home'</span>:</span><br><span class="line">        <span class="built_in">this</span>.comName = <span class="string">'MyHome'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'#/movie'</span>:</span><br><span class="line">        <span class="built_in">this</span>.comName = <span class="string">'MyMovie'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'#/about'</span>:</span><br><span class="line">        <span class="built_in">this</span>.comName = <span class="string">'MyAbout'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 改变浏览器url的hash值, JS监听到hash值改变, 把对应的组件显示到同一个挂载点</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>初识webpack</title>
    <url>/2021/05/14/webpack/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="yarn包管理器-必须"><a href="#yarn包管理器-必须" class="headerlink" title="yarn包管理器(必须)"></a>yarn包管理器(必须)</h3><p>快速、可靠、安全的依赖管理工具。和 npm 类似, 都是包管理工具, 可以用于下载包, 就是比npm快</p>
<p>中文官网地址: <a href="https://yarn.bootcss.com/">https://yarn.bootcss.com/</a></p>
<h3 id="下载yarn"><a href="#下载yarn" class="headerlink" title="下载yarn"></a>下载yarn</h3><p>下载地址:  <a href="https://yarn.bootcss.com/docs/install/#windows-stable">https://yarn.bootcss.com/docs/install/#windows-stable</a> </p>
<ul>
<li><p>windows - 软件包(在笔记文件夹里)</p>
</li>
<li><p>mac - 通过homebrew安装(看上面地址里)</p>
<ul>
<li><p>mac如果没安装过homeBrew先运行这个命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ /usr/bin/ruby -e <span class="string">"<span class="subst">$(curl -fsSL http://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install)</span>"</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
<li><p>上面命令不行: 试试这个: curl -o- -L <a href="https://yarnpkg.com/install.sh">https://yarnpkg.com/install.sh</a> | bash (直接安装yarn)</p>
</li>
</ul>
<p>==不要安到带中文的路径下, 建议在C盘/==</p>
<h3 id="使用yarn"><a href="#使用yarn" class="headerlink" title="使用yarn"></a>使用yarn</h3><p>与npm类似, 可以试试, 新建一个空白文件夹, 执行以下命令尝试一下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 初始化, 得到package.json文件(终端路径所在文件夹下)</span></span><br><span class="line">$ yarn init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加依赖(下包)</span></span><br><span class="line"><span class="comment"># 命令: yarn add [package]</span></span><br><span class="line"><span class="comment"># 命令: yarn add [package]@[version]</span></span><br><span class="line">$ yarn add jquery</span><br><span class="line">$ yarn add jquery@3.5.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 移除包</span></span><br><span class="line"><span class="comment"># 命令: yarn remove [package]</span></span><br><span class="line">$ yarn remove jquery</span><br><span class="line">             </span><br><span class="line"><span class="comment"># 4. 安装项目全部依赖(一般拿到别人的项目时, 缺少node_modules)          </span></span><br><span class="line">yarn</span><br><span class="line"><span class="comment"># 会根据当前项目package.json记录的包名和版本, 全部下载到当前工程中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 全局</span></span><br><span class="line"><span class="comment"># 安装: yarn global add [package]</span></span><br><span class="line"><span class="comment"># 卸载: yarn global remove [package]</span></span><br><span class="line"><span class="comment"># 注意: global一定在add左边</span></span><br><span class="line">$ yarn global add @vue/cli</span><br><span class="line"><span class="comment"># 如何使用, 为学习vue做铺垫</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="yarn可能遇到的问题"><a href="#yarn可能遇到的问题" class="headerlink" title="yarn可能遇到的问题"></a>yarn可能遇到的问题</h3><p>如果报错参考报错文档: <a href="http://itcz_jiaoyu.gitee.io/error/#811">http://itcz_jiaoyu.gitee.io/error/#811</a></p>
<h2 id="知识点自测"><a href="#知识点自测" class="headerlink" title="知识点自测"></a>知识点自测</h2><p>对这些知识点了如指掌, 学习今天的内容会轻松很多</p>
<ul>
<li><p><input disabled="" type="checkbox">  什么是模块, 模块化开发规范(CommonJS / ES6)</p>
<p>commonJS规范:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs - commonJS规范-规定了导出和导入方式</span></span><br><span class="line"><span class="comment">// 导出 module.exports = {}</span></span><br><span class="line"><span class="comment">// 导入 const 变量 = require("模块标识")</span></span><br></pre></td></tr></tbody></table></figure>

<p>ES6规范</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 导出 export 或者 export default {}</span></span><br><span class="line"><span class="comment">// 导入 import 变量名 from '模块标识'</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><input disabled="" type="checkbox">  字体图标的使用</p>
<ol>
<li>可以去阿里巴巴矢量图标库, 选中想要的图标, 登录后, 生成css文件和字体文件</li>
<li>下载css文件和字体文件, 也可以使用在线地址</li>
<li>在自己页面中引入iconfont.css, 并在想显示字体图标的标签上使用类名即可</li>
</ol>
</li>
<li><p><input disabled="" type="checkbox">  箭头函数非常熟练</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function">() =&gt;</span> {}   </span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> {<span class="keyword">return</span> a + b} </span><br><span class="line">fn(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 结果是30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当形参只有一个()可以省略</span></span><br><span class="line"><span class="keyword">const</span> fn3 = <span class="function"><span class="params">a</span> =&gt;</span> {<span class="keyword">return</span> a * <span class="number">2</span>}</span><br><span class="line">fn(<span class="number">50</span>); <span class="comment">// 结果是100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当{}省略return也省略, 默认返回箭头后表达式结果</span></span><br><span class="line"><span class="keyword">const</span> fn4 = <span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">2</span>;</span><br><span class="line">fn(<span class="number">50</span>); <span class="comment">// 结果是100</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><input disabled="" type="checkbox">  什么是服务器, 本地启动node服务, 服务器和浏览器关系, 服务器作用</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">服务器是一台性能高, 24小时可以开机的电脑</span><br><span class="line"></span><br><span class="line">服务器可以提供服务(例如: 文件存储, 网页浏览, 资源返回)</span><br><span class="line"></span><br><span class="line">在window电脑里安装node后, 可以编写代码用node 启动一个web服务, 来读取本地html文件, 返回给浏览器查看</span><br><span class="line"></span><br><span class="line">浏览器 -&gt; 请求资源 -&gt; 服务器</span><br><span class="line"></span><br><span class="line">浏览器 &lt;-  响应数据 &lt;- 服务器</span><br></pre></td></tr></tbody></table></figure></li>
<li><p><input disabled="" type="checkbox">  开发环境 和 生产环境 以及英文”development”, “production” 2个单词尽量会写会读</p>
</li>
<li><p><input disabled="" type="checkbox">  初始化包环境和package.json文件作用</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm下载的包和对应版本号, 都会记录到下载包时终端所在文件夹下的package.json文件里</span><br></pre></td></tr></tbody></table></figure></li>
<li><p><input disabled="" type="checkbox">  package.json中的dependencies和 devDependencies区别和作用</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">* dependencies  别人使用你的包必须下载的依赖, 比如yarn add  jquery</span><br><span class="line"></span><br><span class="line">* devDependencies 开发你的包需要依赖的包,  比如yarn add webpack  webpack-cli -D (-D 相当于 --save-dev)</span><br></pre></td></tr></tbody></table></figure></li>
<li><p><input disabled="" type="checkbox">  终端的熟练使用: 切换路径, 清屏, 包下载命令等</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">切换路径  <span class="built_in">cd</span>  </span><br><span class="line"></span><br><span class="line">清屏 cls 或者 clear</span><br></pre></td></tr></tbody></table></figure></li>
<li><p><input disabled="" type="checkbox">  对base64字符串, 图片转base64字符串了解</p>
<p>在线装换图片<a href="http://tool.chinaz.com/tools/imgtobase/">http://tool.chinaz.com/tools/imgtobase/</a></p>
</li>
</ul>
<h2 id="今日学习目标"><a href="#今日学习目标" class="headerlink" title="今日学习目标"></a>今日学习目标</h2><ol>
<li><p>能够理解webpack基本概念和作用</p>
</li>
<li><p>能够掌握webpack使用步骤</p>
</li>
<li><p>能够使用webpack相关配置</p>
</li>
<li><p>能够使用webpack开发服务器</p>
</li>
<li><p>能够查阅使用webpack中文文档</p>
</li>
</ol>
<h2 id="1-webpack基本概念"><a href="#1-webpack基本概念" class="headerlink" title="1. webpack基本概念"></a>1. webpack基本概念</h2><blockquote>
<p>目标: webpack本身是, node的一个第三方模块包, 用于打包代码</p>
</blockquote>
<p><a href="https://webpack.docschina.org/">webpack官网</a></p>
<ul>
<li><p>现代 javascript 应用程序的 <strong>静态模块打包器 (module bundler)</strong></p>
</li>
<li><p>为要学的 vue-cli 开发环境做铺垫</p>
</li>
</ul>
<blockquote>
<h3 id="webpack能做什么"><a href="#webpack能做什么" class="headerlink" title="==webpack能做什么=="></a>==webpack能做什么==</h3></blockquote>
<p>把很多文件打包整合到一起, 缩小项目体积, 提高加载速度(<strong>演示准备好的例子</strong>)</p>
<p><img src="/2021/05/14/webpack/image-20210207234927772.png" alt="image-20210207234927772"></p>
<p>其中功能:</p>
<ul>
<li><p>less/sass -&gt; css</p>
</li>
<li><p>ES6/7/8 -&gt; ES5</p>
</li>
<li><p>html/css/js -&gt; 压缩合并</p>
</li>
</ul>
<h2 id="2-webpack的使用步骤"><a href="#2-webpack的使用步骤" class="headerlink" title="2. webpack的使用步骤"></a>2. webpack的使用步骤</h2><h3 id="2-0-webpack基础使用"><a href="#2-0-webpack基础使用" class="headerlink" title="2.0_webpack基础使用"></a>2.0_webpack基础使用</h3><blockquote>
<p>目标: 把src下的2个js文件, 打包到1个js中, 并输出到默认dist目录下</p>
</blockquote>
<p>默认入口: ./src/index.js</p>
<p>默认出口: ./dist/main.js</p>
<p>==注意:路径上, 文件夹, 文件名不能叫webpack/其他已知的模块名==</p>
<ol>
<li><p>初始化包环境</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yarn init</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>安装依赖包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yarn add webpack webpack-cli -D</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>配置scripts(自定义命令)</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scripts: {</span><br><span class="line">	<span class="string">"build"</span>: <span class="string">"webpack"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>新建目录src</p>
</li>
<li><p>新建src/add/add.js - 定义求和函数导出</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addFn = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>新建src/index.js导入使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> {addFn} <span class="keyword">from</span> <span class="string">'./add/add'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(addFn(<span class="number">10</span>, <span class="number">20</span>));</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>运行打包命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yarn build</span><br><span class="line"><span class="comment">#或者 npm run build</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<blockquote>
<p>总结: src并列处, 生成默认dist目录和打包后默认main.js文件</p>
</blockquote>
<h3 id="2-1-webpack-更新打包"><a href="#2-1-webpack-更新打包" class="headerlink" title="2.1_webpack 更新打包"></a>2.1_webpack 更新打包</h3><blockquote>
<p>目标: 以后代码变更, 如何重新打包呢</p>
</blockquote>
<ol>
<li><p>新建src/tool/tool.js - 定义导出数组求和方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getArrSum = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> sum += val, <span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>src/index.js - 导入使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> {addFn} <span class="keyword">from</span> <span class="string">'./add/add'</span></span><br><span class="line"><span class="keyword">import</span> {getArrSum} <span class="keyword">from</span> <span class="string">'./tool/tool'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(addFn(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line"><span class="built_in">console</span>.log(getArrSum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>重新打包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yarn build</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<blockquote>
<p>总结1: src下开发环境, dist是打包后, 分别独立</p>
<p>总结2: 打包后格式压缩, 变量压缩等</p>
</blockquote>
<h2 id="3-webpack的配置"><a href="#3-webpack的配置" class="headerlink" title="3. webpack的配置"></a>3. webpack的配置</h2><h3 id="3-0-webpack-入口和出口"><a href="#3-0-webpack-入口和出口" class="headerlink" title="3.0_webpack-入口和出口"></a>3.0_webpack-入口和出口</h3><blockquote>
<p>目标: 告诉webpack从哪开始打包, 打包后输出到哪里</p>
</blockquote>
<p>默认入口: ./src/index.js</p>
<p>默认出口: ./dist/main.js</p>
<p>webpack配置 - webpack.config.js(默认)</p>
<ol>
<li>新建src并列处, webpack.config.js</li>
<li>填入配置项</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">"./src/main.js"</span>, <span class="comment">// 入口</span></span><br><span class="line">    <span class="attr">output</span>: { </span><br><span class="line">        <span class="attr">path</span>: path.join(__dirname, <span class="string">"dist"</span>), <span class="comment">// 出口路径</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">"bundle.js"</span> <span class="comment">// 出口文件名</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>修改package.json, 自定义打包命令 - 让webpack使用配置文件</li>
</ol>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: {</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>打包观察效果</li>
</ol>
<h3 id="3-1-打包流程图"><a href="#3-1-打包流程图" class="headerlink" title="3.1_打包流程图"></a>3.1_打包流程图</h3><p><img src="/2021/05/14/webpack/image-20210421125257233.png" alt="image-20210421125257233"></p>
<p>==重点: 所有要被打包的资源都要跟入口产生直接/间接的引用关系==</p>
<h3 id="3-2-案例-webpack隔行变色"><a href="#3-2-案例-webpack隔行变色" class="headerlink" title="3.2_案例-webpack隔行变色"></a>3.2_案例-webpack隔行变色</h3><blockquote>
<p>目标: 工程化模块化开发前端项目, webpack会对ES6模块化处理</p>
</blockquote>
<ol>
<li><p>回顾从0准备环境</p>
<ul>
<li><p>初始化包环境</p>
</li>
<li><p>下载依赖包</p>
</li>
<li><p>配置自定义打包命令</p>
</li>
</ul>
</li>
<li><p>下载jquery, 新建public/index.html</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yarn add jquery</span><br></pre></td></tr></tbody></table></figure>



<p><img src="/2021/05/14/webpack/image-20210208100817930.png" alt="image-20210208100817930"></p>
</li>
<li><p>index.html 准备一些li</p>
<ul>
<li>==因为import语法浏览器支持性不好, 需要被webpack转换后, 再使用JS代码==</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ul&gt;li{我是第$个li}*10 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第4个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第5个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第6个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第7个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第8个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第9个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>在src/main.js引入jquery</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn add jquery</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>src/main.js中编写隔行变色代码</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 引入jquery</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  $(<span class="string">'#app li:nth-child(odd)'</span>).css(<span class="string">'color'</span>, <span class="string">'red'</span>)</span><br><span class="line">  $(<span class="string">'#app li:nth-child(even)'</span>).css(<span class="string">'color'</span>, <span class="string">'green'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>执行打包命令观察效果</p>
</li>
<li><p>可以在dist下把public/index.html引入过来</p>
<p><img src="/2021/05/14/webpack/image-20210421125602484.png" alt="image-20210421125602484"></p>
<p>在index.html中==手动==引入js</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script src="../dist/bundle.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<blockquote>
<p>总结: 前端工程化模块化, 需要的包yarn下, 被webpack打包后引入到html中使用</p>
</blockquote>
<h3 id="3-3-插件-自动生成html文件"><a href="#3-3-插件-自动生成html文件" class="headerlink" title="3.3_插件-自动生成html文件"></a>3.3_插件-自动生成html文件</h3><blockquote>
<p>目标: html-webpack-plugin插件, 让webpack打包后生成html文件并自动引入打包后的js</p>
</blockquote>
<p><a href="https://www.webpackjs.com/plugins/html-webpack-plugin/">html-webpack-plugin插件地址</a></p>
<ol>
<li><p>下载插件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ yarn add html-webpack-plugin  -D</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>webpack.config.js配置</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 引入自动生成 html 的插件</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    <span class="comment">// ...省略其他代码</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">            <span class="attr">template</span>: <span class="string">'./public/index.html'</span> <span class="comment">// 以此为基准生成打包后html文件</span></span><br><span class="line">        })</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>重新打包后观察dist下是否多出html并运行看效果</p>
<p>==打包后的index.html自动引入打包后的js文件==</p>
</li>
</ol>
<blockquote>
<p>总结: webpack就像一个人, webpack.config.js是人物属性, 给它穿什么装备它就干什么活</p>
</blockquote>
<h3 id="3-4-加载器-处理css文件问题"><a href="#3-4-加载器-处理css文件问题" class="headerlink" title="3.4_加载器 - 处理css文件问题"></a>3.4_加载器 - 处理css文件问题</h3><blockquote>
<p>目标: 自己准备css文件, 引入到webpack入口, 测试webpack是否能打包css文件</p>
</blockquote>
<p>1.新建 - src/css/index.css</p>
<p>2.编写去除li圆点样式代码</p>
<p>3.(重要) 一定要引入到入口才会被webpack打包</p>
<p>4.执行打包命令观察效果</p>
<blockquote>
<p>总结: 保存原因, 因为webpack默认只能处理js类型文件</p>
</blockquote>
<h3 id="3-5-加载器-处理css文件"><a href="#3-5-加载器-处理css文件" class="headerlink" title="3.5_加载器 - 处理css文件"></a>3.5_加载器 - 处理css文件</h3><blockquote>
<p>目标: loaders加载器, 可让webpack处理其他类型的文件, 打包到js中</p>
</blockquote>
<p>原因: webpack默认只认识 js 文件和 json文件</p>
<p><a href="https://webpack.docschina.org/loaders/style-loader/">style-loader文档</a></p>
<p><a href="https://webpack.docschina.org/loaders/css-loader/">css-loader文档</a></p>
<ol>
<li><p>安装依赖</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yarn add style-loader css-loader -D</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>webpack.config.js 配置</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    <span class="comment">// ...其他代码</span></span><br><span class="line">    <span class="attr">module</span>: { </span><br><span class="line">        <span class="attr">rules</span>: [ <span class="comment">// loader的规则</span></span><br><span class="line">          {</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 匹配所有的css文件</span></span><br><span class="line">            <span class="comment">// use数组里从右向左运行</span></span><br><span class="line">            <span class="comment">// 先用 css-loader 让webpack能够识别 css 文件的内容并打包</span></span><br><span class="line">            <span class="comment">// 再用 style-loader 将样式, 把css插入到dom中</span></span><br><span class="line">            use: [ <span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>新建src/css/li.css - 去掉li默认样式</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">li</span>{</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>引入到main.js (因为这里是入口需要产生关系, 才会被webpack找到打包起来)</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./css/index.css"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>运行打包后dist/index.html观察效果和css引入情况</p>
</li>
</ol>
<blockquote>
<p>总结: 万物皆模块, 引到入口, 才会被webpack打包, css打包进js中, 然后被嵌入在style标签插入dom上</p>
</blockquote>
<h3 id="3-6-加载器-处理less文件"><a href="#3-6-加载器-处理less文件" class="headerlink" title="3.6_加载器 - 处理less文件"></a>3.6_加载器 - 处理less文件</h3><blockquote>
<p>目标: less-loader让webpack处理less文件, less模块翻译less代码</p>
</blockquote>
<p><a href="https://webpack.docschina.org/loaders/less-loader/">less-loader文档</a></p>
<ol>
<li><p>下载依赖包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yarn add less less-loader -D</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>webpack.config.js 配置</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">  <span class="attr">rules</span>: [ <span class="comment">// loader的规则</span></span><br><span class="line">    <span class="comment">// ...省略其他</span></span><br><span class="line">    {</span><br><span class="line">    	<span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">    	<span class="comment">// 使用less-loader, 让webpack处理less文件, 内置还会用less翻译less代码成css内容</span></span><br><span class="line">        use: [ <span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">'less-loader'</span>]</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>src/less/index.less  - 设置li字体大小24px</p>
<figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">@size:</span><span class="number">24px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">li</span>{</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">@size</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>引入到main.js中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./less/index.less"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>打包运行dist/index.html 观察效果</p>
</li>
</ol>
<blockquote>
<p>总结: 只要找到对应的loader加载器, 就能让webpack处理不同类型文件</p>
</blockquote>
<h3 id="3-7-加载器-处理图片文件"><a href="#3-7-加载器-处理图片文件" class="headerlink" title="3.7_加载器 - 处理图片文件"></a>3.7_加载器 - 处理图片文件</h3><blockquote>
<p>目标: 用asset module方式(webpack5版本新增)</p>
</blockquote>
<p><a href="https://webpack.docschina.org/guides/asset-modules/">asset module文档</a></p>
<p>如果使用的是webpack5版本的, 直接配置在webpack.config.js - 的 rules里即可</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,</span><br><span class="line">    type: <span class="string">'asset'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>如果你用的是webpack4及以前的, 请使用者里的配置</p>
<p><a href="https://webpack.docschina.org/loaders/url-loader/">url-loader文档</a></p>
<p><a href="https://webpack.docschina.org/loaders/file-loader/">file-loader文档</a></p>
<ol>
<li><p>下载依赖包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yarn add url-loader file-loader -D</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>webpack.config.js 配置</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,</span><br><span class="line">  use: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">'url-loader'</span>, <span class="comment">// 匹配文件, 尝试转base64字符串打包到js中</span></span><br><span class="line">      <span class="comment">// 配置limit,&nbsp;超过8k,&nbsp;不转, file-loader复制, 随机名, 输出文件</span></span><br><span class="line">      <span class="attr">options</span>: {</span><br><span class="line">        <span class="attr">limit</span>: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  ],</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>图片转成 base64 字符串</p>
<ul>
<li>好处就是浏览器不用发请求了，直接可以读取</li>
<li>坏处就是如果图片太大，再转<code>base64</code>就会让图片的体积增大 30% 左右</li>
</ul>
</li>
<li><p>src/assets/准备老师发的2个图文件</p>
</li>
<li><p>在css/less/index.less - 把小图片用做背景图</p>
<figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>{</span><br><span class="line">    <span class="attribute">background</span>: url(<span class="string">../assets/logo_small.png</span>) no-repeat center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>在src/main.js - 把大图插入到创建的img标签上, 添加body上显示</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 引入图片-使用</span></span><br><span class="line"><span class="keyword">import</span> imgUrl <span class="keyword">from</span> <span class="string">'./assets/1.gif'</span></span><br><span class="line"><span class="keyword">const</span> theImg = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>)</span><br><span class="line">theImg.src = imgUrl</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(theImg)</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>打包运行dist/index.html观察2个图片区别</p>
</li>
</ol>
<blockquote>
<p>总结:  url-loader 把文件转base64 打包进js中, 会有30%的增大, file-loader 把文件直接复制输出</p>
</blockquote>
<h3 id="3-8-webpack加载文件优缺点"><a href="#3-8-webpack加载文件优缺点" class="headerlink" title="3.8_webpack加载文件优缺点"></a>3.8_webpack加载文件优缺点</h3><p>图片转成 base64 字符串</p>
<ul>
<li>好处就是浏览器不用发请求了，直接可以读取</li>
<li>坏处就是如果图片太大，再转<code>base64</code>就会让图片的体积增大 30% 左右</li>
</ul>
<h3 id="3-9-加载器-处理字体文件"><a href="#3-9-加载器-处理字体文件" class="headerlink" title="3.9_加载器 - 处理字体文件"></a>3.9_加载器 - 处理字体文件</h3><blockquote>
<p>目标: 用asset module技术, asset/resource直接输出到dist目录下</p>
</blockquote>
<p>webpack5使用这个配置</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{ <span class="comment">// webpack5默认内部不认识这些文件, 所以当做静态资源直接输出即可</span></span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>,</span><br><span class="line">    type: <span class="string">'asset/resource'</span>,</span><br><span class="line">    <span class="attr">generator</span>: {</span><br><span class="line">    	<span class="attr">filename</span>: <span class="string">'font/[name].[hash:6][ext]'</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>webpack4及以前使用下面的配置</p>
<ol>
<li><p>webpack.config.js - 准备配置</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{ <span class="comment">// 处理字体图标的解析</span></span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">'url-loader'</span>,</span><br><span class="line">                <span class="attr">options</span>: {</span><br><span class="line">                    <span class="attr">limit</span>: <span class="number">2</span> * <span class="number">1024</span>,</span><br><span class="line">                    <span class="comment">// 配置输出的文件名</span></span><br><span class="line">                    <span class="attr">name</span>: <span class="string">'[name].[ext]'</span>,</span><br><span class="line">                    <span class="comment">// 配置输出的文件目录</span></span><br><span class="line">                    <span class="attr">outputPath</span>: <span class="string">"fonts/"</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>src/assets/ - 放入字体库fonts文件夹</p>
</li>
<li><p>在main.js引入iconfont.css</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 引入字体图标文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assets/fonts/iconfont.css'</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>在public/index.html使用字体图标样式</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-weixin"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>执行打包命令-观察打包后网页效果</p>
</li>
</ol>
<blockquote>
<p>总结: url-loader和file-loader 可以打包静态资源文件</p>
</blockquote>
<h3 id="3-10-加载器-处理高版本js语法"><a href="#3-10-加载器-处理高版本js语法" class="headerlink" title="3.10_加载器 - 处理高版本js语法"></a>3.10_加载器 - 处理高版本js语法</h3><blockquote>
<p>目标: 让webpack对高版本 的js代码, 降级处理后打包</p>
</blockquote>
<p>写代码演示: 高版本的js代码(箭头函数), 打包后, 直接原封不动打入了js文件中, 遇到一些低版本的浏览器就会报错</p>
<p>原因: <strong>webpack 默认仅内置了 模块化的 兼容性处理</strong>   <code>import  export</code></p>
<p>babel 的介绍 =&gt; 用于处理高版本 js语法 的兼容性  <a href="https://www.babeljs.cn/">babel官网</a></p>
<p>解决: 让webpack配合babel-loader 对js语法做处理</p>
<p><a href="https://webpack.docschina.org/loaders/babel-loader/">babel-loader文档</a></p>
<ol>
<li><p>安装包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yarn add -D babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>配置规则</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: {</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">'babel-loader'</span>,</span><br><span class="line">            <span class="attr">options</span>: {</span><br><span class="line">                <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>] <span class="comment">// 预设:转码规则(用bable开发环境本来预设的)</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>在main.js中使用箭头函数(高版本js)</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 高级语法</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"你好babel"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(fn) <span class="comment">// 这里必须打印不能调用/不使用, 不然webpack会精简成一句打印不要函数了/不会编译未使用的代码</span></span><br><span class="line"><span class="comment">// 没有babel集成时, 原样直接打包进lib/bundle.js</span></span><br><span class="line"><span class="comment">// 有babel集成时, 会翻译成普通函数打包进lib/bundle.js</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>打包后观察lib/bundle.js - 被转成成普通函数使用了 - 这就是babel降级翻译的功能</p>
</li>
</ol>
<blockquote>
<p>总结: babel-loader 可以让webpack 对高版本js语法做降级处理后打包</p>
</blockquote>
<h2 id="4-webpack-开发服务器"><a href="#4-webpack-开发服务器" class="headerlink" title="4. webpack 开发服务器"></a>4. webpack 开发服务器</h2><h3 id="4-0-webpack开发服务器-为何学"><a href="#4-0-webpack开发服务器-为何学" class="headerlink" title="4.0_webpack开发服务器-为何学?"></a>4.0_webpack开发服务器-为何学?</h3><p>文档地址: <a href="https://webpack.docschina.org/configuration/dev-server/">https://webpack.docschina.org/configuration/dev-server/</a></p>
<p>抛出问题: 每次修改代码, 都需要重新 yarn build 打包, 才能看到最新的效果, 实际工作中, 打包 yarn build 非常费时 (30s - 60s) 之间</p>
<p>为什么费时? </p>
<ol>
<li>构建依赖</li>
<li>磁盘读取对应的文件到内存, 才能加载  </li>
<li>用对应的 loader 进行处理  </li>
<li>将处理完的内容, 输出到磁盘指定目录  </li>
</ol>
<p>解决问题: 起一个开发服务器,  在电脑内存中打包, 缓存一些已经打包过的内容, 只重新打包修改的文件, 最终运行加载在内存中给浏览器使用</p>
<h3 id="4-1-webpack-dev-server自动刷新"><a href="#4-1-webpack-dev-server自动刷新" class="headerlink" title="==4.1_webpack-dev-server自动刷新=="></a>==4.1_webpack-dev-server自动刷新==</h3><blockquote>
<p>目标: 启动本地服务, 可实时更新修改的代码, 打包<strong>变化代码</strong>到内存中, 然后直接提供端口和网页访问</p>
</blockquote>
<ol>
<li><p>下载包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yarn add webpack-dev-server -D</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>配置自定义命令</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">scripts: {</span><br><span class="line">	<span class="string">"build"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">	<span class="string">"serve"</span>: <span class="string">"webpack serve"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>运行命令-启动webpack开发服务器</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ yarn serve</span><br><span class="line"><span class="comment">#或者 npm run serve</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<blockquote>
<p>总结: 以后改了src下的资源代码, 就会直接更新到内存打包, 然后反馈到浏览器上了</p>
</blockquote>
<h3 id="4-2-webpack-dev-server配置"><a href="#4-2-webpack-dev-server配置" class="headerlink" title="4.2_webpack-dev-server配置"></a>4.2_webpack-dev-server配置</h3><ol>
<li><p>在webpack.config.js中添加服务器配置</p>
<p>更多配置参考这里: <a href="https://webpack.docschina.org/configuration/dev-server/#devserverafter">https://webpack.docschina.org/configuration/dev-server/#devserverafter</a></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    <span class="comment">// ...其他配置</span></span><br><span class="line">    <span class="attr">devServer</span>: {</span><br><span class="line">      <span class="attr">port</span>: <span class="number">3000</span> <span class="comment">// 端口号</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ul>
<li><input disabled="" type="checkbox"> 什么是webpack, 它有什么作用</li>
<li><input disabled="" type="checkbox"> 知道yarn的使用过程, 自定义命令, 下载删除包</li>
<li><input disabled="" type="checkbox"> 有了webpack让模块化开发前端项目成为了可能, 底层需要node支持</li>
<li><input disabled="" type="checkbox"> 对webpack各种配置项了解<ul>
<li><input disabled="" type="checkbox"> 入口/出口</li>
<li><input disabled="" type="checkbox"> 插件</li>
<li><input disabled="" type="checkbox"> 加载器</li>
<li><input disabled="" type="checkbox"> mode模式</li>
<li><input disabled="" type="checkbox"> devServer</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> webpack开发服务器的使用和运作过程</li>
</ul>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1、什么是webpack（必会）"><a href="#1、什么是webpack（必会）" class="headerlink" title="1、什么是webpack（必会）"></a>1、什么是webpack（必会）</h3><p>​    webpack是一个打包模块化javascript的工具，在webpack里一切文件皆模块，通过loader转换文件，通过plugin注入钩子，最后输出由多个模块组合成的文件，webpack专注构建模块化项目</p>
<h3 id="2、Webpack的优点是什么？（必会）"><a href="#2、Webpack的优点是什么？（必会）" class="headerlink" title="2、Webpack的优点是什么？（必会）"></a>2、Webpack的优点是什么？（必会）</h3><ol>
<li>专注于处理模块化的项目，能做到开箱即用，一步到位</li>
<li>通过plugin扩展，完整好用又不失灵活</li>
<li>通过loaders扩展, 可以让webpack把所有类型的文件都解析打包</li>
<li>区庞大活跃，经常引入紧跟时代发展的新特性，能为大多数场景找到已有的开源扩展</li>
</ol>
<h3 id="3、webpack的构建流程是什么-从读取配置到输出文件这个过程尽量说全（必会）"><a href="#3、webpack的构建流程是什么-从读取配置到输出文件这个过程尽量说全（必会）" class="headerlink" title="3、webpack的构建流程是什么?从读取配置到输出文件这个过程尽量说全（必会）"></a>3、webpack的构建流程是什么?从读取配置到输出文件这个过程尽量说全（必会）</h3><p>​    Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p>
<p>​    1. 初始化参数：从配置文件读取与合并参数，得出最终的参数</p>
<pre><code> 2. 开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，开始执行编译
 3. 确定入口：根据配置中的 entry 找出所有的入口文件
 4. 编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理
 5. 完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系
 6. 输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会
 7. 输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。
</code></pre>
<p>在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果</p>
<h3 id="4、说一下-Webpack-的热更新原理-必会"><a href="#4、说一下-Webpack-的热更新原理-必会" class="headerlink" title="4、说一下 Webpack 的热更新原理(必会)"></a>4、说一下 Webpack 的热更新原理(必会)</h3><p>​    webpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p>
<p>​    HMR的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上 WDS 与浏览器之间维护了一个 Websocket，当本地资源发生变化时，WDS 会向浏览器推送更新，并带上构建时的 hash，让客户端与上一次资源进行对比。客户端对比出差异后会向 WDS 发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该chunk的增量更新。</p>
<p>​    后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像react-hot-loader 和 vue-loader 都是借助这些 API 实现 HMR。</p>
<h3 id="5、webpack与grunt、gulp的不同？（必会）"><a href="#5、webpack与grunt、gulp的不同？（必会）" class="headerlink" title="5、webpack与grunt、gulp的不同？（必会）"></a>5、webpack与grunt、gulp的不同？（必会）</h3><p>​    <strong>1)</strong> <strong>三者之间的区别</strong></p>
<p>​       三者都是前端构建工具，grunt和gulp在早期比较流行，现在webpack相对来说比较主流，不过一些轻量化的任务还是会用gulp来处理，比如单独打包CSS文件等。</p>
<p>​       grunt和gulp是基于任务和流（Task、Stream）的。类似jQuery，找到一个（或一类）文件，对其做一系列链式操作，更新流上的数据， 整条链式操作构成了一个任务，多个任务就构成了整个web的构建流程。</p>
<p>​       webpack是基于入口的。webpack会自动地递归解析入口所需要加载的所有资源文件，然后用不同的Loader来处理不同的文件，用Plugin来扩展webpack功能。</p>
<p>​    <strong>2)</strong> <strong>从构建思路来说</strong></p>
<p>​       gulp和grunt需要开发者将整个前端构建过程拆分成多个<code>Task</code>，并合理控制所有<code>Task</code>的调用关系 webpack需要开发者找到入口，并需要清楚对于不同的资源应该使用什么Loader做何种解析和加工</p>
<p>​    <strong>3)</strong> <strong>对于知识背景来说</strong></p>
<p>​       gulp更像后端开发者的思路，需要对于整个流程了如指掌 webpack更倾向于前端开发者的思路</p>
<h3 id="6、有哪些常见的Loader？他们是解决什么问题的？（必会）"><a href="#6、有哪些常见的Loader？他们是解决什么问题的？（必会）" class="headerlink" title="6、有哪些常见的Loader？他们是解决什么问题的？（必会）"></a>6、有哪些常见的Loader？他们是解决什么问题的？（必会）</h3><p>1、  file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件</p>
<p>2、  url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去</p>
<p>3、  source-map-loader：加载额外的 Source Map 文件，以方便断点调试</p>
<p>4、  image-loader：加载并且压缩图片文件</p>
<p>5、  babel-loader：把 ES6 转换成 ES5</p>
<p>6、  css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</p>
<p>7、  style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。</p>
<p>8、  eslint-loader：通过 ESLint 检查 JavaScript 代码</p>
<h3 id="7、Loader和Plugin的不同？（必会）"><a href="#7、Loader和Plugin的不同？（必会）" class="headerlink" title="7、Loader和Plugin的不同？（必会）"></a>7、Loader和Plugin的不同？（必会）</h3><p>​    <strong>1)</strong> <strong>不同的作用</strong></p>
<p>​       Loader直译为”加载器”。Webpack将一切文件视为模块，但是webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到loader。 所以Loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力。</p>
<p>​    Plugin直译为”插件”。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p>
<p><strong>2)</strong> <strong>不同的用法</strong></p>
<p>​    Loader在module.rules中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个Object，里面描述了对于什么类型的文件（test），使用什么加载(loader)和使用的参数（options）</p>
<p>​    Plugin在plugins中单独配置。 类型为数组，每一项是一个plugin的实例，参数都通过构造函数传入。</p>
<h2 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h2><ol>
<li><p>把课上webpack的配置从0开始, 再过一遍</p>
</li>
<li><p>(附加)可以调研, 在打包时, 如何把css提取成一个独立的文件</p>
<p>效果: 打包后的文件夹下多一个独立的css文件里有css代码</p>
<p>提示: 需要一个加载器</p>
</li>
<li><p>(附加)可以调用如何把vue文件让webpack打包使用 (vue-loader官网)</p>
<p>想要把App.vue的东西显示到index.html</p>
<p>(1): 在public/index.html 准备id叫app的div</p>
<p>(2): yarn add vue - 必须下载vue (和其他加载器和插件-具体参考vue-loader官网)</p>
<p>(3): 需要在main.js中引入App.vue模块对象并加入如下代码</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span> <span class="comment">// 根vue文件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span> <span class="comment">// 引入vue.js对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({ </span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App) <span class="comment">// 渲染函数, 渲染App组件里的标签</span></span><br><span class="line">}).$mount(<span class="string">'#app'</span>) <span class="comment">// 把vue文件的标签结构 -&gt; 挂载到id为app的标签里</span></span><br></pre></td></tr></tbody></table></figure>

<p>(4): 打包后运行dist/index.html, 观察是否把vue文件里的标签渲染到页面了</p>
</li>
<li><p>预习明天的笔记.md</p>
</li>
</ol>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础1-vue脚手架&amp;基础API</title>
    <url>/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="必安装-vue-devtools"><a href="#必安装-vue-devtools" class="headerlink" title="必安装 - vue-devtools"></a>必安装 - vue-devtools</h3><p>学习, 调试vue必备之利器 - 官方提供的呦</p>
<p>右上角-插件-谷歌访问助手-打开Chrome商店-搜索vue-devtools回车-然后添加至Chrome等待下载后自动安装-右上角显示已经添加即代表成功</p>
<p>如果实在打不开谷歌商店, 换个网 / 直接用备用文件夹里的vue-devtools插件包安装到浏览器扩展程序也一样用</p>
<p>==不要图标上带橘黄色beta的==</p>
<p>==如果这个网址打不开, 就用预习资料里备用的本地版安装也可以, 安装过程和上个插件安装过程一致==</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/%E5%AE%89%E8%A3%85vue_devtools%E6%8F%92%E4%BB%B6%E5%88%B0%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8.gif" alt="安装vue_devtools插件到谷歌浏览器"></p>
<h3 id="vscode-插件补充"><a href="#vscode-插件补充" class="headerlink" title="vscode-插件补充"></a>vscode-插件补充</h3><p>vue文件代码高亮插件-vscode中安装</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210212192713936.png" alt="image-20210212192713936"></p>
<p>代码提示插件-vscode中安装</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210304223236080.png" alt="image-20210304223236080"></p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>想学会今天的内容, 先测测这几个会不会</p>
<ul>
<li><input disabled="" type="checkbox"> 表达式, 变量是什么</li>
<li><input disabled="" type="checkbox"> new的作用和含义</li>
<li><input disabled="" type="checkbox"> 实例化对象</li>
<li><input disabled="" type="checkbox"> 什么是对象上的, 属性和方法</li>
<li><input disabled="" type="checkbox"> 对象的赋值和取值</li>
<li><input disabled="" type="checkbox"> this的指向</li>
<li><input disabled="" type="checkbox"> npm/yarn是什么, package.json干什么的, 下载包的命令是什么, 什么是模块化开发</li>
<li><input disabled="" type="checkbox"> 函数的形参实参, 得马上反应过来, 哪个是变量哪个是值, 谁传给谁了</li>
</ul>
<p>如果通不过, 请记住口诀:</p>
<ol>
<li><p>变量是一个容器, 表达式原地都有返回结果</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a就是变量, 运行后使用变量里的值再原地打印</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> + <span class="number">50</span>); <span class="comment">// 10 + 50 就是表达式</span></span><br><span class="line"><span class="built_in">console</span>.log(a &gt; <span class="number">9</span>); <span class="comment">// 这叫判断表达式, 原地结果是true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>new 类名() - 原地得到一个实例对象 - 对象身上有key(或叫属性, 叫键都行), 对应的值是我们要使用的</p>
</li>
<li><p>实例化对象就是new 类名() 创造出来的对象, 身上包含属性(key, 键) 对应的 值</p>
</li>
<li><p>什么是属性和方法(固定格式)</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = { <span class="comment">// 属性指的是a, b, c, d, e这些名字</span></span><br><span class="line">    <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">b</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="attr">c</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{},</span><br><span class="line">    d () {},</span><br><span class="line">    <span class="attr">e</span>: <span class="function">() =&gt;</span> {} <span class="comment">// 值是冒号:右边的值</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 这个格式是固定的, 必须张口就来, 张手就写, 准确率100%</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>对象的复制和取值(固定格式)</p>
<p>有=(赋值运算符) 就是赋值, 没有就是取值</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = {</span><br><span class="line">    <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">20</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 从obj对象的a上取值, 原地打印10</span></span><br><span class="line">obj.b = <span class="number">100</span>; <span class="comment">// 有=, 固定把右侧的值赋予给左侧的键, 再打印obj这个对象, b的值是100了</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>this指向口诀</p>
<p>在function函数中, this默认指向当前函数的调用者  调用者.函数名()</p>
<p>在箭头函数中, this指向外层”函数”作用域this的值</p>
</li>
</ol>
<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ol>
<li>能够理解vue的概念和作用</li>
<li>能够理解vuecli脚手架工程化开发</li>
<li>能够使用vue指令</li>
</ol>
<h2 id="1-Vue基本概念"><a href="#1-Vue基本概念" class="headerlink" title="1. Vue基本概念"></a>1. Vue基本概念</h2><h3 id="1-0-为何学Vue"><a href="#1-0-为何学Vue" class="headerlink" title="1.0_为何学Vue"></a>1.0_为何学Vue</h3><blockquote>
<p>目标: 更少的时间,干更多的活. 开发网站速度, 快</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210317180201113.png" alt="image-20210317180201113"></p>
<p>例如: 把数组数据-循环铺设到li中, 看看分别如何做的?</p>
<p>原生js做法</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;ul id="myUl"&gt;&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let arr = ["春天", "夏天", "秋天", "冬天"];</span><br><span class="line">    let myUl = document.getElementById("myUl");</span><br><span class="line">    for (let i = 0; i &lt; arr.length; i++) {</span><br><span class="line">        let theLi = document.createElement("li");</span><br><span class="line">        theLi.innerHTML = arr[i];</span><br><span class="line">        myUl.appendChild(theLi);</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>Vue.js做法</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;li v-for="item in arr"&gt;{{item}}&lt;/li&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue({</span><br><span class="line">        // ...</span><br><span class="line">        data: {</span><br><span class="line">            arr: ["春天", "夏天", "秋天", "冬天"] </span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>注意: 虽然vue写起来很爽, 但是一定不要忘记, vue的底层还是原生js</p>
<p>开发更加的效率和简洁, 易于维护, 快!快!快!就是块 (甚至测试, Java, Python工程师都要学点vue, 方便与前端沟通)</p>
<p>现在很多项目都是用vue开发的</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210317180240323.png" alt="image-20210317180240323"></p>
<p>市场上90%工作都要求会vue, 会vue拿高薪, 甚至java或测试都要学点vue</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210317180255055.png" alt="image-20210317180255055"></p>
<h3 id="1-1-Vue是什么"><a href="#1-1-Vue是什么" class="headerlink" title="1.1_Vue是什么"></a>1.1_Vue是什么</h3><p>logo镇楼</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/VUE-logo.png" alt="Vue"></p>
<p>==渐进式==javacript==框架==, 一套拥有自己规则的语法</p>
<p>官网地址: <a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a> (作者: 尤雨溪)</p>
<blockquote>
<h3 id="什么是渐进式"><a href="#什么是渐进式" class="headerlink" title="什么是渐进式"></a>什么是渐进式</h3></blockquote>
<p>渐进式: 逐渐进步, 想用什么就用什么, 不必全都使用<br><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210314200521109.png" alt="image-20210314200521109"></p>
<p>Vue渐进式: Vue从基础开始, 会循序渐进向前学习, 如下知识点可能你现在不明白, 但是学完整个vue回过头来看, 会很有帮助</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/%E6%B8%90%E8%BF%9B%E5%BC%8F-1613206784433.png"></p>
<blockquote>
<h3 id="什么是库和框架"><a href="#什么是库和框架" class="headerlink" title="什么是库和框架"></a>什么是库和框架</h3></blockquote>
<p>补充概念:</p>
<p>库:  封装的属性或方法 (例jquery.js)</p>
<p>框架: 拥有自己的规则和元素, 比库强大的多 (例vue.js)</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210111215624065.png" alt="image-20210111215624065"></p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210212141558460.png" alt="image-20210212141558460"></p>
<h3 id="1-2-Vue学习的方式"><a href="#1-2-Vue学习的方式" class="headerlink" title="1.2_Vue学习的方式"></a>1.2_Vue学习的方式</h3><ul>
<li><p>传统开发模式：基于html/css/js文件开发vue</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210228083641377.png" alt="image-20210228083641377"></p>
</li>
<li><p>工程化开发方式：在webpack环境中开发vue，这是最推荐, 企业常用的方式</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210228083746746.png" alt="image-20210228083746746"></p>
</li>
</ul>
<blockquote>
<h3 id="Vue如何学"><a href="#Vue如何学" class="headerlink" title="Vue如何学"></a>Vue如何学</h3></blockquote>
<ol>
<li>每天的知识点自测最好做到了如指掌 - 做不到只能花30分钟去记住结论和公式</li>
<li>记住vue指令作用, 基础语法 - 弄一个字典(一一映射关系)</li>
<li>在课上例子, 练习, 案例, 作业, 项目中, 反复磨炼使用</li>
<li>学会查找问题的方式和解决方式(弄个报错总结.md, 避免反复进坑)</li>
</ol>
<blockquote>
<p>总结: vue是渐进式框架, 有自己的规则, 我们要记住语法, 特点和作用, 反复磨炼使用, 多总结</p>
</blockquote>
<h2 id="2-vue-cli脚手架"><a href="#2-vue-cli脚手架" class="headerlink" title="2. @vue/cli脚手架"></a>2. @vue/cli脚手架</h2><h3 id="2-0-vue-cli-脚手架介绍"><a href="#2-0-vue-cli-脚手架介绍" class="headerlink" title="2.0_@vue/cli 脚手架介绍"></a>2.0_@vue/cli 脚手架介绍</h3><blockquote>
<p>目标: webpack自己配置环境很麻烦, 下载@vue/cli包,用vue命令创建脚手架项目</p>
</blockquote>
<ul>
<li><p>@vue/cli是Vue官方提供的一个全局模块包(得到vue命令), 此包用于创建脚手架项目</p>
<p>脚手架是为了保证各施工过程顺利进行而搭设的工作平台</p>
</li>
</ul>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/1586936282638.png" alt="1586936282638"></p>
<blockquote>
<h3 id="vue-cli的好处"><a href="#vue-cli的好处" class="headerlink" title="@vue/cli的好处"></a>@vue/cli的好处</h3></blockquote>
<ul>
<li><p>开箱即用</p>
<p>0配置webpack</p>
<p>babel支持</p>
<p>css, less支持</p>
<p>开发服务器支持</p>
</li>
</ul>
<h3 id="2-1-vue-cli安装"><a href="#2-1-vue-cli安装" class="headerlink" title="2.1_@vue/cli安装"></a>2.1_@vue/cli安装</h3><blockquote>
<p>目标: 把@vue/cli模块包按到全局, 电脑拥有vue命令, 才能创建脚手架工程</p>
</blockquote>
<ul>
<li>全局安装命令</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn global add @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></tbody></table></figure>

<p>注意: 如果半天没动静(95%都是网速问题), 可以ctrl c </p>
<ol>
<li><p>停止重新来</p>
</li>
<li><p>换一个网继续重来</p>
</li>
</ol>
<ul>
<li>查看<code>vue</code>脚手架版本</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 如果出现版本号就安装成功, 否则失败</p>
</blockquote>
<h3 id="2-2-vue-cli-创建项目启动服务"><a href="#2-2-vue-cli-创建项目启动服务" class="headerlink" title="2.2_@vue/cli 创建项目启动服务"></a>2.2_@vue/cli 创建项目启动服务</h3><blockquote>
<p>目标: 使用vue命令, 创建脚手架项目</p>
</blockquote>
<p>==注意: 项目名不能带大写字母, 中文和特殊符号==</p>
<ol>
<li>创建项目</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># vue和create是命令, vuecli-demo是文件夹名</span></span><br><span class="line">vue create vuecli-demo</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li><p>选择模板</p>
<p>==可以上下箭头选择, 弄错了ctrl+c重来==</p>
</li>
</ol>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210116230221236.png" alt="image-20210116230221236"></p>
<p>​         选择用什么方式下载脚手架项目需要的依赖包<img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/Snipaste_2021-03-26_15-24-14.png" alt="Snipaste_2021-03-26_15-24-14"></p>
<ol start="3">
<li>回车等待生成项目文件夹+文件+下载必须的第三方包们</li>
</ol>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210212174314768.png" alt="image-20210212174314768"></p>
<ol start="4">
<li>进入脚手架项目下, 启动内置的热更新本地服务器</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> vuecil-demo</span><br><span class="line"></span><br><span class="line">npm run serve</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">yarn serve</span><br></pre></td></tr></tbody></table></figure>

<p>只要看到绿色的 - 啊. 你成功了(底层node+webpack热更新服务)</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210116231815543.png" alt="image-20210116231815543"></p>
<p>打开浏览器输入上述地址</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210116233035582.png" alt="image-20210116233035582"></p>
<blockquote>
<p>总结: vue命令创建工程目录, 项目内置webpack本地热更新服务器, 帮我们打包项目预览项目</p>
</blockquote>
<h3 id="2-3-vue-cli-目录和代码分析"><a href="#2-3-vue-cli-目录和代码分析" class="headerlink" title="2.3 @vue/cli 目录和代码分析"></a>2.3 @vue/cli 目录和代码分析</h3><blockquote>
<p>目标: 重点文件夹, 文件的作用, 以及文件里代码的意思</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vuecil-demo        <span class="comment"># 项目目录</span></span><br><span class="line">   ├── node_modules <span class="comment"># 项目依赖的第三方包</span></span><br><span class="line">   ├── public       <span class="comment"># 静态文件目录</span></span><br><span class="line">     ├── favicon.ico<span class="comment"># 浏览器小图标</span></span><br><span class="line">     └── index.html <span class="comment"># 单页面的html文件(网页浏览的是它)</span></span><br><span class="line">   ├── src          <span class="comment"># 业务文件夹</span></span><br><span class="line">     ├── assets     <span class="comment"># 静态资源</span></span><br><span class="line">       └── logo.png <span class="comment"># vue的logo图片</span></span><br><span class="line">     ├── components <span class="comment"># 组件目录</span></span><br><span class="line">       └── HelloWorld.vue <span class="comment"># 欢迎页面vue代码文件 </span></span><br><span class="line">     ├── App.vue    <span class="comment"># 整个应用的根组件</span></span><br><span class="line">     └── main.js    <span class="comment"># 入口js文件</span></span><br><span class="line">   ├── .gitignore   <span class="comment"># git提交忽略配置</span></span><br><span class="line">   ├── babel.config.js  <span class="comment"># babel配置</span></span><br><span class="line">   ├── package.json  <span class="comment"># 依赖包列表</span></span><br><span class="line">   ├── README.md    <span class="comment"># 项目说明</span></span><br><span class="line">└── yarn.lock    <span class="comment"># 项目包版本锁定和缓存地址</span></span><br></pre></td></tr></tbody></table></figure>

<p>主要文件及含义</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">node_modules下都是下载的第三方包</span><br><span class="line">public/index.html – 浏览器运行的网页</span><br><span class="line">src/main.js – webpack打包的入口文件</span><br><span class="line">src/App.vue – vue项目入口页面</span><br><span class="line">package.json – 依赖包列表文件</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-4-vue-cli-项目架构了解"><a href="#2-4-vue-cli-项目架构了解" class="headerlink" title="2.4_@vue/cli 项目架构了解"></a>2.4_@vue/cli 项目架构了解</h3><blockquote>
<p>目标: 知道项目入口, 以及代码执行顺序和引入关系</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210317201811310.png" alt="image-20210317201811310"></p>
<h3 id="2-5-vue-cli-自定义配置"><a href="#2-5-vue-cli-自定义配置" class="headerlink" title="2.5_@vue/cli 自定义配置"></a>2.5_@vue/cli 自定义配置</h3><blockquote>
<p>目标：项目中没有webpack.config.js文件，因为@vue/cli用的vue.config.js</p>
</blockquote>
<p>src并列处新建vue.config.js</p>
<figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 覆盖webpack的配置 */</span></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">devServer</span>: { <span class="comment">// 自定义服务配置</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-6-eslint了解"><a href="#2-6-eslint了解" class="headerlink" title="2.6_eslint了解"></a>2.6_eslint了解</h3><blockquote>
<p>目标: 知道eslint的作用, 和如何暂时关闭, 它是一个==代码检查工具==</p>
</blockquote>
<p>例子: 先在main.js 随便声明个变量, 但是不要使用</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210326165406694.png" alt="image-20210326165406694"></p>
<p>观察发现, 终端和页面都报错了</p>
<p>==记住以后见到这样子的错误, 证明你的代码不严谨==</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210326165544865.png" alt="image-20210326165544865"></p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210326165606191.png" alt="image-20210326165606191"></p>
<p>方式1: 手动解决掉错误, 以后项目中会讲如何自动解决</p>
<p>方式2: 暂时关闭eslint检查(因为现在主要精力在学习Vue语法上), 在vue.config.js中配置后重启服务</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/image-20210511112152702.png" alt="image-20210511112152702"></p>
<h3 id="2-7-vue-cli-单vue文件讲解"><a href="#2-7-vue-cli-单vue文件讲解" class="headerlink" title="2.7_@vue/cli 单vue文件讲解"></a>2.7_@vue/cli 单vue文件讲解</h3><blockquote>
<p>目标: 单vue文件好处, 独立作用域互不影响</p>
</blockquote>
<p>Vue推荐采用.vue文件来开发项目</p>
<p>template里只能有一个根标签</p>
<p>vue文件-独立模块-作用域互不影响</p>
<p>style配合scoped属性, 保证样式只针对当前template内标签生效</p>
<p>vue文件配合webpack, 把他们打包起来插入到index.html</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- template必须, 只能有一个根标签, 影响渲染到页面的标签结构 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;欢迎使用vue&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- js相关 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'App'</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 当前组件的样式, 设置scoped, 可以保证样式只对当前页面有效 --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>最终: Vue文件配合webpack, 把他们打包起来插入到index.html, 然后在浏览器运行</p>
<h3 id="2-8-vue-cli-欢迎界面清理"><a href="#2-8-vue-cli-欢迎界面清理" class="headerlink" title="2.8_@vue/cli 欢迎界面清理"></a>2.8_@vue/cli 欢迎界面清理</h3><blockquote>
<p>目标: 我们开始写我们自己的代码, 无需欢迎页面</p>
</blockquote>
<ul>
<li>src/App.vue默认有很多内容, 可以全部删除留下框</li>
<li>assets 和 components 文件夹下的一切都删除掉 (不要默认的欢迎页面)</li>
</ul>
<h2 id="3-Vue指令"><a href="#3-Vue指令" class="headerlink" title="==3. Vue指令=="></a>==3. Vue指令==</h2><h3 id="3-0-vue基础-插值表达式"><a href="#3-0-vue基础-插值表达式" class="headerlink" title="3.0_vue基础-插值表达式"></a>3.0_vue基础-插值表达式</h3><blockquote>
<p>目的: 在dom标签中, 直接插入内容</p>
</blockquote>
<p>又叫: 声明式渲染/文本插值</p>
<p>语法: </p>
<figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ msg }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{ obj.name }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>{{ obj.age &gt; 18 ? '成年' : '未成年' }}<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> { <span class="comment">// 格式固定, 定义vue数据之处</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> {  <span class="comment">// key相当于变量名</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">msg</span>: <span class="string">"hello, vue"</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">obj</span>: {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">name</span>: <span class="string">"小vue"</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">age</span>: <span class="number">5</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">}</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: dom中插值表达式赋值, vue的变量必须在data里声明</p>
</blockquote>
<h3 id="3-1-vue基础-MVVM设计模式"><a href="#3-1-vue基础-MVVM设计模式" class="headerlink" title="3.1_vue基础-MVVM设计模式"></a>3.1_vue基础-MVVM设计模式</h3><blockquote>
<p>目的: 转变思维, 用数据驱动视图改变, 操作dom的事, vue源码内干了</p>
</blockquote>
<p>设计模式: 是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。</p>
<p>演示: 在上个代码基础上, 在devtool工具改变M层的变量, 观察V层(视图的自动同步)</p>
<p>等下面学了v-model再观察V改变M的效果</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/1.gif" alt="1"></p>
<ul>
<li>MVVM，一种软件架构模式，决定了写代码的思想和层次<ul>
<li>M：   model数据模型          (data里定义)    </li>
<li>V：    view视图                   （html页面）</li>
<li>VM： ViewModel视图模型  (vue.js源码)</li>
</ul>
</li>
</ul>
<ul>
<li>MVVM通过<code>数据双向绑定</code>让数据自动地双向同步  <strong>不再需要操作DOM</strong><ul>
<li>V（修改视图） -&gt; M（数据自动同步）</li>
<li>M（修改数据） -&gt; V（视图自动同步）</li>
</ul>
</li>
</ul>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/MVVM.png"></p>
<p><strong>1. 在vue中，不推荐直接手动操作DOM！！！</strong>  </p>
<p><strong>2. 在vue中，通过数据驱动视图，不要在想着怎么操作DOM，而是想着如何操作数据！！</strong>(思想转变)</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.png"></p>
<blockquote>
<p>总结: vue源码内采用MVVM设计模式思想, 大大减少了DOM操作, 挺高开发效率</p>
</blockquote>
<h3 id="3-2-vue指令-v-bind"><a href="#3-2-vue指令-v-bind" class="headerlink" title="3.2_vue指令-v-bind"></a>3.2_vue指令-v-bind</h3><blockquote>
<p>目标: 给标签属性设置vue变量的值</p>
</blockquote>
<p><strong>vue指令, 实质上就是特殊的 html 标签属性, 特点:  v- 开头</strong></p>
<p>每个指令, 都有独立的作用</p>
<ul>
<li>语法：<code>v-bind:属性名="vue变量"</code></li>
<li>简写：<code>:属性名="vue变量"</code></li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue指令-v-bind属性动态赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>我是a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgSrc"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 把vue变量的值, 赋予给dom属性上, 影响标签显示效果</p>
</blockquote>
<h3 id="3-3-vue指令-v-on"><a href="#3-3-vue指令-v-on" class="headerlink" title="3.3_vue指令-v-on"></a>3.3_vue指令-v-on</h3><blockquote>
<p>目标: 给标签绑定事件</p>
</blockquote>
<ul>
<li>语法<ul>
<li>v-on:事件名=”要执行的==少量代码==”</li>
<li>v-on:事件名=”methods中的函数”</li>
<li>v-on:事件名=”methods中的函数(实参)” </li>
</ul>
</li>
<li>简写: @事件名=”methods中的函数”</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue指令:   v-on事件绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你要买商品的数量: {{count}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count = count + 1"</span>&gt;</span>增加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"addFn"</span>&gt;</span>增加1个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"addCountFn(5)"</span>&gt;</span>一次加5件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"subFn"</span>&gt;</span>减少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">        <span class="comment">// ...其他省略</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">addFn</span>(<span class="params"></span>)</span>{ <span class="comment">// this代表export default后面的组件对象(下属有data里return出来的属性)</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.count++</span></span><br><span class="line"><span class="javascript">            },</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">addCountFn</span>(<span class="params">num</span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.count += num</span></span><br><span class="line"><span class="javascript">            },</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">subFn</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.count--</span></span><br><span class="line"><span class="javascript">            }</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 常用@事件名, 给dom标签绑定事件, 以及=右侧事件处理函数</p>
</blockquote>
<h3 id="3-4-vue指令-v-on事件对象"><a href="#3-4-vue指令-v-on事件对象" class="headerlink" title="3.4_vue指令-v-on事件对象"></a>3.4_vue指令-v-on事件对象</h3><blockquote>
<p>目标: vue事件处理函数中, 拿到事件对象</p>
</blockquote>
<ul>
<li>语法:<ul>
<li>无传参, 通过形参直接接收</li>
<li>传参, 通过$event指代事件对象传给事件处理函数</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;a @click="one" href="http://www.baidu.com"&gt;阻止百度&lt;/a&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;a @click="two(10, $event)" href="http://www.baidu.com"&gt;阻止去百度&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  methods: {</span><br><span class="line">    one(e){</span><br><span class="line">      e.preventDefault()</span><br><span class="line">    },</span><br><span class="line">    two(num, e){</span><br><span class="line">      e.preventDefault()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-5-vue指令-v-on修饰符"><a href="#3-5-vue指令-v-on修饰符" class="headerlink" title="3.5_vue指令-v-on修饰符"></a>3.5_vue指令-v-on修饰符</h3><blockquote>
<p>目的: 在事件后面.修饰符名 - 给事件带来更强大的功能</p>
</blockquote>
<ul>
<li>语法:<ul>
<li>@事件名.修饰符=”methods里函数”<ul>
<li>.stop - 阻止事件冒泡</li>
<li>.prevent - 阻止默认行为</li>
<li>.once - 程序运行期间, 只触发一次事件处理函数</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"fatherFn"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue对事件进行了修饰符设置, 在事件后面.修饰符名即可使用更多的功能 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"btn"</span>&gt;</span>.stop阻止事件冒泡<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent</span>=<span class="string">"btn"</span>&gt;</span>.prevent阻止默认行为<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">"btn"</span>&gt;</span>.once程序运行期间, 只触发一次事件处理函数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">fatherFn</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"father被触发"</span>);</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">btn</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 修饰符给事件扩展额外功能</p>
</blockquote>
<h3 id="3-6-vue指令-v-on按键修饰符"><a href="#3-6-vue指令-v-on按键修饰符" class="headerlink" title="3.6_vue指令-v-on按键修饰符"></a>3.6_vue指令-v-on按键修饰符</h3><blockquote>
<p>目标: 给键盘事件, 添加修饰符, 增强能力</p>
</blockquote>
<ul>
<li>语法:<ul>
<li>@keyup.enter  -  监测回车按键</li>
<li>@keyup.esc     -   监测返回按键</li>
</ul>
</li>
</ul>
<p><a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">更多修饰符</a> </p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keydown.enter</span>=<span class="string">"enterFn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keydown.esc</span>=<span class="string">"escFn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript"> <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="title">enterFn</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(<span class="string">"enter回车按键了"</span>);</span></span><br><span class="line"><span class="javascript">   },</span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="title">escFn</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(<span class="string">"esc按键了"</span>);</span></span><br><span class="line"><span class="javascript">   }</span></span><br><span class="line"><span class="javascript"> }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 多使用事件修饰符, 可以提高开发效率, 少去自己判断过程</p>
</blockquote>
<h3 id="3-7-课上练习-翻转世界"><a href="#3-7-课上练习-翻转世界" class="headerlink" title="3.7_课上练习-翻转世界"></a>3.7_课上练习-翻转世界</h3><blockquote>
<p>目标: 点击按钮 - 把文字取反显示 - 再点击取反显示(回来了)</p>
</blockquote>
<blockquote>
<p>提示: 把字符串取反赋予回去</p>
</blockquote>
<p>效果演示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/2.8.0_%E7%BB%83%E4%B9%A0_%E7%BF%BB%E8%BD%AC%E4%B8%96%E7%95%8C.gif" alt="练习1_翻转世界"></p>
<p>正确代码:</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ message }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btn"</span>&gt;</span>逆转世界<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">"HELLO, WORLD"</span>,</span></span><br><span class="line"><span class="javascript">    };</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">btn</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.message = <span class="built_in">this</span>.message.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">};</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 记住方法特点, 多做需求, vue是数据变化视图自动更新, 减少操作DOM时间, 提高开发效率</p>
</blockquote>
<h3 id="3-8-vue指令-v-model"><a href="#3-8-vue指令-v-model" class="headerlink" title="3.8_vue指令 v-model"></a>3.8_vue指令 v-model</h3><blockquote>
<p>目标: 把value属性和vue数据变量, 双向绑定到一起</p>
</blockquote>
<ul>
<li>语法: v-model=”vue数据变量”</li>
<li>双向数据绑定<ul>
<li>数据变化 -&gt; 视图自动同步</li>
<li>视图变化 -&gt; 数据自动同步</li>
</ul>
</li>
<li>演示: 用户名绑定 - vue内部是MVVM设计模式</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">    	v-model:是实现vuejs变量和表单标签value属性, 双向绑定的指令</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;用户名:&lt;/span&gt;</span><br><span class="line">      &lt;input type="text" v-model="username" /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;密码:&lt;/span&gt;</span><br><span class="line">      &lt;input type="password" v-model="pass" /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;来自于: &lt;/span&gt;</span><br><span class="line">      &lt;!-- 下拉菜单要绑定在select上 --&gt;</span><br><span class="line">      &lt;select v-model="from"&gt;</span><br><span class="line">        &lt;option value="北京市"&gt;北京&lt;/option&gt;</span><br><span class="line">        &lt;option value="南京市"&gt;南京&lt;/option&gt;</span><br><span class="line">        &lt;option value="天津市"&gt;天津&lt;/option&gt;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;!-- (重要)</span><br><span class="line">      遇到复选框, v-model的变量值</span><br><span class="line">      非数组 - 关联的是复选框的checked属性</span><br><span class="line">      数组   - 关联的是复选框的value属性</span><br><span class="line">       --&gt;</span><br><span class="line">      &lt;span&gt;爱好: &lt;/span&gt;</span><br><span class="line">      &lt;input type="checkbox" v-model="hobby" value="抽烟"&gt;抽烟</span><br><span class="line">      &lt;input type="checkbox" v-model="hobby" value="喝酒"&gt;喝酒</span><br><span class="line">      &lt;input type="checkbox" v-model="hobby" value="写代码"&gt;写代码</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;性别: &lt;/span&gt;</span><br><span class="line">      &lt;input type="radio" value="男" name="sex" v-model="gender"&gt;男</span><br><span class="line">      &lt;input type="radio" value="女" name="sex" v-model="gender"&gt;女</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;自我介绍&lt;/span&gt;</span><br><span class="line">      &lt;textarea v-model="intro"&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      username: "",</span><br><span class="line">      pass: "",</span><br><span class="line">      from: "",</span><br><span class="line">      hobby: [], </span><br><span class="line">      sex: "",</span><br><span class="line">      intro: "",</span><br><span class="line">    };</span><br><span class="line">    // 总结:</span><br><span class="line">    // 特别注意: v-model, 在input[checkbox]的多选框状态</span><br><span class="line">    // 变量为非数组, 则绑定的是checked的属性(true/false) - 常用于: 单个绑定使用</span><br><span class="line">    // 变量为数组, 则绑定的是他们的value属性里的值 - 常用于: 收集勾选了哪些值</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 本阶段v-model只能用在表单元素上, 以后学组件后讲v-model高级用法</p>
</blockquote>
<h3 id="3-9-vue指令-v-model修饰符"><a href="#3-9-vue指令-v-model修饰符" class="headerlink" title="3.9_vue指令 v-model修饰符"></a>3.9_vue指令 v-model修饰符</h3><blockquote>
<p>目标: 让v-model拥有更强大的功能</p>
</blockquote>
<ul>
<li>语法:<ul>
<li>v-model.修饰符=”vue数据变量”<ul>
<li>.number   以parseFloat转成数字类型</li>
<li>.trim          去除首尾空白字符</li>
<li>.lazy           在change时触发而非inupt时</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;年龄:&lt;/span&gt;</span><br><span class="line">      &lt;input type="text" v-model.number="age"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;人生格言:&lt;/span&gt;</span><br><span class="line">      &lt;input type="text" v-model.trim="motto"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;自我介绍:&lt;/span&gt;</span><br><span class="line">      &lt;textarea v-model.lazy="intro"&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      age: "",</span><br><span class="line">      motto: "",</span><br><span class="line">      intro: ""</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: v-model修饰符, 可以对值进行预处理, 非常高效好用</p>
</blockquote>
<h3 id="3-10-vue指令-v-text和v-html"><a href="#3-10-vue指令-v-text和v-html" class="headerlink" title="3.10_vue指令 v-text和v-html"></a>3.10_vue指令 v-text和v-html</h3><blockquote>
<p>目的: 更新DOM对象的innerText/innerHTML</p>
</blockquote>
<ul>
<li>语法:<ul>
<li>v-text=”vue数据变量”    </li>
<li>v-html=”vue数据变量”</li>
</ul>
</li>
<li>注意: 会覆盖插值表达式</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p v-text="str"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p v-html="str"&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      str: "&lt;span&gt;我是一个span标签&lt;/span&gt;"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: v-text把值当成普通字符串显示, v-html把值当做html解析</p>
</blockquote>
<h3 id="3-11-vue指令-v-show和v-if"><a href="#3-11-vue指令-v-show和v-if" class="headerlink" title="3.11_vue指令 v-show和v-if"></a>3.11_vue指令 v-show和v-if</h3><blockquote>
<p>目标: 控制标签的隐藏或出现</p>
</blockquote>
<ul>
<li>语法:<ul>
<li>v-show=”vue变量”            </li>
<li>v-if=”vue变量” </li>
</ul>
</li>
<li>原理<ul>
<li>v-show 用的display:none隐藏   (频繁切换使用)</li>
<li>v-if  直接从DOM树上移除</li>
</ul>
</li>
<li>高级<ul>
<li>v-else使用</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"isOk"</span>&gt;</span>v-show的盒子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"isOk"</span>&gt;</span>v-if的盒子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"age &gt; 18"</span>&gt;</span>我成年了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>还得多吃饭<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">isOk</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">age</span>: <span class="number">15</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 使用v-show和v-if以及v-else指令, 方便通过变量控制一套标签出现/隐藏</p>
</blockquote>
<h3 id="3-12-案例-折叠面板"><a href="#3-12-案例-折叠面板" class="headerlink" title="3.12_案例-折叠面板"></a>3.12_案例-折叠面板</h3><blockquote>
<p>目标: 点击展开或收起时，把内容区域显示或者隐藏</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/%E6%A1%88%E4%BE%8B_%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF.gif" alt="案例_折叠面板"></p>
<p>此案例使用了less语法, 项目中下载模块</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn add less@3.0.4 less-loader@5.0.0 -D</span><br></pre></td></tr></tbody></table></figure>

<p>只有标签和样式</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div class="title"&gt;</span><br><span class="line">        &lt;h4&gt;芙蓉楼送辛渐&lt;/h4&gt;</span><br><span class="line">        &lt;span class="btn" &gt;</span><br><span class="line">          收起</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="container"&gt;</span><br><span class="line">        &lt;p&gt;寒雨连江夜入吴,&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;平明送客楚山孤。&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;洛阳亲友如相问，&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;一片冰心在玉壶。&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      </span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less"&gt;</span><br><span class="line">body {</span><br><span class="line">  background-color: #ccc;</span><br><span class="line">  #app {</span><br><span class="line">    width: 400px;</span><br><span class="line">    margin: 20px auto;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border: 4px solid blueviolet;</span><br><span class="line">    border-radius: 1em;</span><br><span class="line">    box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.5);</span><br><span class="line">    padding: 1em 2em 2em;</span><br><span class="line">    h3 {</span><br><span class="line">      text-align: center;</span><br><span class="line">    }</span><br><span class="line">    .title {</span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: space-between;</span><br><span class="line">      align-items: center;</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      padding: 0 1em;</span><br><span class="line">    }</span><br><span class="line">    .title h4 {</span><br><span class="line">      line-height: 2;</span><br><span class="line">      margin: 0;</span><br><span class="line">    }</span><br><span class="line">    .container {</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      padding: 0 1em;</span><br><span class="line">    }</span><br><span class="line">    .btn {</span><br><span class="line">      /* 鼠标改成手的形状 */</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>正确答案:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div class="title"&gt;</span><br><span class="line">        &lt;h4&gt;芙蓉楼送辛渐&lt;/h4&gt;</span><br><span class="line">        &lt;span class="btn" @click="isShow = !isShow"&gt;</span><br><span class="line">          {{ isShow ? '收起' : '展开' }}</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="container" v-show="isShow"&gt;</span><br><span class="line">        &lt;p&gt;寒雨连江夜入吴, &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;平明送客楚山孤。&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;洛阳亲友如相问，&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;一片冰心在玉壶。&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      isShow: false</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-13-vue指令-v-for"><a href="#3-13-vue指令-v-for" class="headerlink" title="3.13_vue指令-v-for"></a>3.13_vue指令-v-for</h3><blockquote>
<p>目标: 列表渲染, 所在标签结构, 按照数据数量, 循环生成</p>
</blockquote>
<ul>
<li><p>语法</p>
<ul>
<li>v-for=”(值, 索引) in 目标结构”</li>
<li>v-for=”值 in 目标结构”</li>
</ul>
</li>
<li><p>目标结构:</p>
<ul>
<li>可以遍历数组 / 对象 / 数字 / 字符串 (可遍历结构)</li>
</ul>
</li>
<li><p>注意:</p>
<p>v-for的临时变量名不能用到v-for范围外</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">      &lt;!-- v-for 把一组数据, 渲染成一组DOM --&gt;</span><br><span class="line">      &lt;!-- 口诀: 让谁循环生成, v-for就写谁身上 --&gt;</span><br><span class="line">      &lt;p&gt;学生姓名&lt;/p&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for="(item, index) in arr" :key="item"&gt;</span><br><span class="line">          {{ index }} - {{ item }}</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;学生详细信息&lt;/p&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for="obj in stuArr" :key="obj.id"&gt;</span><br><span class="line">          &lt;span&gt;{{ obj.name }}&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;{{ obj.sex }}&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;{{ obj.hobby }}&lt;/span&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- v-for遍历对象(了解) --&gt;</span><br><span class="line">      &lt;p&gt;老师信息&lt;/p&gt;</span><br><span class="line">      &lt;div v-for="(value, key) in tObj" :key="value"&gt;</span><br><span class="line">        {{ key }} -- {{ value }}</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- v-for遍历整数(了解) - 从1开始 --&gt;</span><br><span class="line">      &lt;p&gt;序号&lt;/p&gt;</span><br><span class="line">      &lt;div v-for="i in count" :key="i"&gt;{{ i }}&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      arr: ["小明", "小欢欢", "大黄"],</span><br><span class="line">      stuArr: [</span><br><span class="line">        {</span><br><span class="line">          id: 1001,</span><br><span class="line">          name: "孙悟空",</span><br><span class="line">          sex: "男",</span><br><span class="line">          hobby: "吃桃子",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          id: 1002,</span><br><span class="line">          name: "猪八戒",</span><br><span class="line">          sex: "男",</span><br><span class="line">          hobby: "背媳妇",</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">      tObj: {</span><br><span class="line">        name: "小黑",</span><br><span class="line">        age: 18,</span><br><span class="line">        class: "1期",</span><br><span class="line">      },</span><br><span class="line">      count: 10,</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: vue最常用指令, 铺设页面利器, 快速把数据赋予到相同的dom结构上循环生成</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><input disabled="" type="checkbox"> Vue是什么</li>
<li><input disabled="" type="checkbox"> Vue-cli作用以及简单使用</li>
<li><input disabled="" type="checkbox"> 插值表达式</li>
<li><input disabled="" type="checkbox"> MVVM设计模式</li>
<li><input disabled="" type="checkbox"> v-bind作用</li>
<li><input disabled="" type="checkbox"> v-on作用和事件对象以及修饰符使用</li>
<li><input disabled="" type="checkbox"> v-model的作用以及双向数据绑定解释</li>
<li><input disabled="" type="checkbox"> v-if和v-show的区别和本质</li>
<li><input disabled="" type="checkbox"> v-for的作用和使用</li>
<li><input disabled="" type="checkbox"> vue的特点<ul>
<li>渐进式</li>
<li>声明式渲染</li>
<li>数据驱动视图 (响应式)</li>
<li>极少的去写DOM操作相关代码</li>
<li>双向绑定</li>
<li>组件系统</li>
<li>不兼容IE8及以下浏览器</li>
</ul>
</li>
</ul>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1-Vue的最大优势是什么"><a href="#1-Vue的最大优势是什么" class="headerlink" title="1. Vue的最大优势是什么?"></a>1. Vue的最大优势是什么?</h3><p>​    简单易学, 轻量级整个源码js文件不大, 双向数据绑定, 数据驱动视图, 组件化, 数据和视图分离, </p>
<p>​    vue负责关联视图和数据, 作者中国人(尤雨溪), 文档都是中文的, 入门教程非常多, 上手简单. </p>
<p>​    相比传统网页, vue是单页面可以只刷新某一部分</p>
<h3 id="2-Vue和jQuery区别是什么"><a href="#2-Vue和jQuery区别是什么" class="headerlink" title="2. Vue和jQuery区别是什么?"></a>2. Vue和jQuery区别是什么?</h3><p>​    jQuery应该算是一个插件, 里面封装了各种易用的方法, 方便你使用更少的代码来操作dom标签</p>
<p>​    Vue是一套框架, 有自己的规则和体系与语法, 特别是设计思想MVVM, 让数据和视频关联绑定, 省略了很多DOM操作. 然后指令还给标签注入了更多的功能</p>
<h3 id="3-mvvm和mvc区别是什么"><a href="#3-mvvm和mvc区别是什么" class="headerlink" title="3. mvvm和mvc区别是什么?"></a>3. mvvm和mvc区别是什么?</h3><p>​    MVC: 也是一种设计模式, 组织代码的结构, 是model数据模型, view视图, Controller控制器, 在控制器这层里编写js代码, 来控制数据和视图关联</p>
<p>​    MVVM: 即Model-View-ViewModel的简写。即模型-视图-视图模型, VM是这个设计模式的核心, 连接v和m的桥梁, 内部会监听DOM事件, 监听数据对象变化来影响对方. 我们称之为数据绑定</p>
<h3 id="4-Vue常用修饰符有哪些"><a href="#4-Vue常用修饰符有哪些" class="headerlink" title="4. Vue常用修饰符有哪些?"></a>4. Vue常用修饰符有哪些?</h3><p>​    .prevent: 提交事件不再重载页面；</p>
<p>​    .stop: 阻止单击事件冒泡；</p>
<p>​    .once: 只执行一次这个事件</p>
<h3 id="5-Vue2-x兼容IE哪个版本以上"><a href="#5-Vue2-x兼容IE哪个版本以上" class="headerlink" title="5. Vue2.x兼容IE哪个版本以上"></a>5. Vue2.x兼容IE哪个版本以上</h3><p>​    不支持ie8及以下，部分兼容ie9 ，完全兼容10以上， 因为vue的响应式原理是基于es5的Object.defineProperty(),而这个方法不支持ie8及以下。</p>
<h3 id="6-对Vue渐进式的理解"><a href="#6-对Vue渐进式的理解" class="headerlink" title="6. 对Vue渐进式的理解"></a>6. 对Vue渐进式的理解</h3><p>​    渐进式代表的含义是：主张最少, 自底向上, 增量开发, 组件集合, 便于复用</p>
<h3 id="7-v-show和v-if的区别"><a href="#7-v-show和v-if的区别" class="headerlink" title="7. v-show和v-if的区别"></a>7. v-show和v-if的区别</h3><p>​    v-show和v-if的区别? 分别说明其使用场景?</p>
<p>​    v-show 和v-if都是true的时候显示，false的时候隐藏</p>
<p>​    但是：false的情况下，</p>
<p>​    v-show是采用的display:none   </p>
<p>​    v-if采用惰性加载</p>
<p>​    如果需要频繁切换显示隐藏需要使用v-show</p>
<h3 id="8-说出至少4个Vue指令及作用"><a href="#8-说出至少4个Vue指令及作用" class="headerlink" title="8. 说出至少4个Vue指令及作用"></a>8. 说出至少4个Vue指令及作用</h3><p>​    v-for 根据数组的个数, 循环数组元素的同时还生成所在的标签</p>
<p>​    v-show 显示内容</p>
<p>​    v-if    显示与隐藏  </p>
<p>​    v-else  必须和v-if连用  不能单独使用  否则报错  </p>
<p>​    v-bind  动态绑定  作用： 及时对页面的数据进行更改, 可以简写成:分号</p>
<p>​    v-on  给标签绑定函数，可以缩写为@，例如绑定一个点击函数  函数必须写在methods里面</p>
<p>​    v-text  解析文本</p>
<p>​    v-html   解析html标签</p>
<h3 id="9-为什么避免v-for和v-if在一起使用"><a href="#9-为什么避免v-for和v-if在一起使用" class="headerlink" title="9. 为什么避免v-for和v-if在一起使用"></a>9. 为什么避免v-for和v-if在一起使用</h3><p>​    Vue 处理指令时，v-for 比 v-if 具有更高的优先级, 虽然用起来也没报错好使, 但是性能不高, 如果你有5个元素被v-for循环, v-if也会分别执行5次.</p>
<h2 id="附加练习-1-帅哥美女走一走"><a href="#附加练习-1-帅哥美女走一走" class="headerlink" title="附加练习-1.帅哥美女走一走"></a>附加练习-1.帅哥美女走一走</h2><blockquote>
<p>目标: 点击按钮, 改变3个li的顺序, 在头上的就到末尾.</p>
</blockquote>
<blockquote>
<p>提示: 操作数组里的顺序, v-for就会重新渲染li</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/2.8.1_%E7%BB%83%E4%B9%A0_%E5%B8%85%E5%93%A5%E7%BE%8E%E5%A5%B3%E8%B5%B0%E4%B8%80%E8%B5%B0.gif" alt="练习2_改变数组顺序_影响vfor指令的标签"></p>
<p>正确代码(==先不要看==)</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in myArr"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>{{ item }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btn"</span>&gt;</span>走一走<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">myArr</span>: [<span class="string">"帅哥"</span>, <span class="string">"美女"</span>, <span class="string">"程序猿"</span>],</span></span><br><span class="line"><span class="javascript">    };</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">btn</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 头部数据加入到末尾</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.myArr.push(<span class="built_in">this</span>.myArr[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 再把头部的数据删除掉</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.myArr.shift();</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">};</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="附加练习-2-加加减减"><a href="#附加练习-2-加加减减" class="headerlink" title="附加练习-2.加加减减"></a>附加练习-2.加加减减</h2><blockquote>
<p>目标: 点击生成按钮, 新增一个li(随机数字)和删除按钮, 点击删除按钮, 删除对应的li和值</p>
</blockquote>
<blockquote>
<p>提示: 数组渲染列表, 生成和删除都围绕数组操作</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/2.8.2_%E7%BB%83%E4%B9%A0_%E4%BA%BA%E7%94%9F%E5%8A%A0%E5%8A%A0%E5%87%8F%E5%87%8F.gif" alt="练习3_点击生成_点击删除"></p>
<p>正确代码:(==先不要看==)</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, ind) in arr"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ item }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"del(ind)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>生成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>],</span></span><br><span class="line"><span class="javascript">    };</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.arr.push(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">20</span>));</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">del</span>(<span class="params">index</span>)</span> {</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.arr.splice(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">};</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="附加练习-3-购物车"><a href="#附加练习-3-购物车" class="headerlink" title="附加练习-3.购物车"></a>附加练习-3.购物车</h2><blockquote>
<p>目标: 完成商品浏览和删除功能, 当无数据给用户提示</p>
</blockquote>
<ul>
<li>需求1: 根据给的初始数据, 把购物车页面铺设出来</li>
<li>需求2: 点击对应删除按钮, 删除对应数据</li>
<li>需求3: 当数据没有了, 显示一条提示消息</li>
</ul>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/3.0_%E6%A1%88%E4%BE%8B_%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%88%A0%E9%99%A4_%E5%B9%B2%E5%87%80%E4%BA%86%E8%BF%98%E6%9C%89%E6%8F%90%E7%A4%BA.gif" alt="3.0_案例_购物车删除_干净了还有提示"></p>
<p>html+css和数据代码结构(==可复制接着写==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;table class="tb"&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;品牌名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;创立时间&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;!-- 循环渲染的元素tr --&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;车名&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;2020-08-09&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;button&gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td colspan="4"&gt;没有数据咯~&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      list: [</span><br><span class="line">        { id: 1, name: "奔驰", time: "2020-08-01" },</span><br><span class="line">        { id: 2, name: "宝马", time: "2020-08-02" },</span><br><span class="line">        { id: 3, name: "奥迪", time: "2020-08-03" },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app {</span><br><span class="line">  width: 600px;</span><br><span class="line">  margin: 10px auto;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.tb {</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">  width: 100%;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.tb th {</span><br><span class="line">  background-color: #0094ff;</span><br><span class="line">  color: white;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.tb td,</span><br><span class="line">.tb th {</span><br><span class="line">  padding: 5px;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.add {</span><br><span class="line">  padding: 5px;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>正确代码(==先不要看==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;table class="tb"&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;品牌名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;创立时间&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;!-- 循环渲染的元素tr --&gt;</span><br><span class="line">      &lt;tr v-for="(item,index) in list" :key="item.id"&gt;</span><br><span class="line">            &lt;td&gt;{{item.id}}&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;{{item.name}}&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;{{item.time}}&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;button @click="del(index)"&gt;删除&lt;/button&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;tr v-if="list.length === 0"&gt;</span><br><span class="line">        &lt;td colspan="4"&gt;没有数据咯~&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      list: [</span><br><span class="line">        { id: 1, name: "奔驰", time: "2020-08-01" },</span><br><span class="line">        { id: 2, name: "宝马", time: "2020-08-02" },</span><br><span class="line">        { id: 3, name: "奥迪", time: "2020-08-03" },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    del(index) {</span><br><span class="line">      // 删除按钮 - 得到索引, 删除数组里元素</span><br><span class="line">      this.list.splice(index, 1);</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h2><h3 id="demo1-逛水果店"><a href="#demo1-逛水果店" class="headerlink" title="demo1-逛水果店"></a>demo1-逛水果店</h3><p>从0开始新建一个vuecli脚手架项目</p>
<p>本店收银系统采用vue开发, 冲这点, 你不来买点试试?</p>
<p>先看效果 - 无css(你想美化下, 你就写点哈哈)</p>
<blockquote>
<p>提示: v-model=”变量” 输入框的值会绑定给vue的这个变量(别忘了在data里先声明哦)</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/Day01_%E4%BD%9C%E4%B8%9A_%E4%B9%B0%E6%B0%B4%E6%9E%9C.gif" alt="Day01_作业_买水果"></p>
<p>只要你实现了功能 你就是对的 (只不过每个程序员的想法都不太一样)</p>
<h3 id="demo2-选择喜欢的"><a href="#demo2-选择喜欢的" class="headerlink" title="demo2-选择喜欢的"></a>demo2-选择喜欢的</h3><p>目标: 用户选择栏目, 把用户选中的栏目信息在下面列表显示出来</p>
<blockquote>
<p>提示: vue变量是数组类型, 绑定在checkbox标签上</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 数据在这里</span></span><br><span class="line">[<span class="string">"科幻"</span>, <span class="string">"喜剧"</span>, <span class="string">"动漫"</span>, <span class="string">"冒险"</span>, <span class="string">"科技"</span>, <span class="string">"军事"</span>, <span class="string">"娱乐"</span>, <span class="string">"奇闻"</span>]</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%801-vue%E8%84%9A%E6%89%8B%E6%9E%B6&amp;%E5%9F%BA%E7%A1%80API/4.9.1_%E7%BB%83%E4%B9%A0_%E9%80%89%E6%8B%A9%E5%96%9C%E6%AC%A2%E7%9A%84%E6%A0%8F%E7%9B%AE.gif" alt="4.9.1_练习_选择喜欢的栏目"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础2-基础API_计算属性_过滤器_侦听器</title>
    <url>/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="知识点自测"><a href="#知识点自测" class="headerlink" title="知识点自测"></a>知识点自测</h2><ul>
<li><input disabled="" type="checkbox"> 会自己定义数据结构</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"红色"</span>,<span class="string">"red"</span>, <span class="string">"蓝色"</span>,<span class="string">"blue"</span>, </span><br><span class="line"><span class="comment">// 上面的数据结构, 要用1个变量来装这4个值, 用什么数据结构呢?(数组还是对象) - 对象(可映射key-&gt;value)</span></span><br><span class="line">    </span><br><span class="line"><span class="string">"小明"</span>, <span class="string">"小蓝"</span>, <span class="string">"小赵"</span></span><br><span class="line"><span class="comment">// 上面的结构用数组比较合适</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><input disabled="" type="checkbox"> 马上能反应过来循环遍历是什么, 索引(下角标)是什么</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">32</span>, <span class="number">99</span>];</span><br><span class="line"><span class="comment">// 索引就是数字, 标记每个值对应的序号, 从0开始</span></span><br><span class="line"><span class="comment">// 索引是0, 1, 2</span></span><br><span class="line"><span class="comment">// 数组需要用索引来换取值, 固定格式 arr[索引]</span></span><br><span class="line"><span class="comment">// 遍历就是挨个取出来</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><input disabled="" type="checkbox"> 数组的filter方法使用</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">19</span>, <span class="number">29</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">35</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.filter(<span class="function">(<span class="params">val</span>) =&gt;</span> {<span class="keyword">return</span> val &gt;= <span class="number">30</span>})</span><br><span class="line"><span class="comment">// 数组调用.filter()方法 - 传入一个函数体 (固定格式)</span></span><br><span class="line"><span class="comment">// 运行过程: filter会遍历数组里的每一项, 对每一项执行一次函数体(会把每个值传给形参)</span></span><br><span class="line"><span class="comment">// 作用: 每次遍历如果val值符合return的条件, 就会被filter收集起来</span></span><br><span class="line"><span class="comment">// 返回值: 当filter遍历结束以后, 返回收集到的符合条件的那些值形成的新数组</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><input disabled="" type="checkbox"> 重绘与回流(重排)的概念</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">回流(重排): 当浏览器必须重新处理和绘制部分或全部页面时，回流就会发生</span><br><span class="line"></span><br><span class="line">重绘: 不影响布局, 只是标签页面发生变化, 重新绘制</span><br><span class="line"></span><br><span class="line">注意: 回流(重排)必引发重绘, 重绘不一定引发回流(重排)</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><input disabled="" type="checkbox"> localStorage浏览器本地存储语法使用</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">"key名"</span>, 值) - 把值存在浏览器本地叫key的对应位置上</span><br><span class="line"></span><br><span class="line">localStorage.getItem(<span class="string">"key名"</span>) - 把叫key的对应值, 从浏览器本地取出来</span><br><span class="line"></span><br><span class="line">==值只能是字符串类型, 如果不是请用JSON.stringify转, 取出后用JSON.parse转==</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><input disabled="" type="checkbox"> JSON的方法使用</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">JSON.stringify(JS数据) - 把JS数据序列化成JSON格式字符串</span><br><span class="line"></span><br><span class="line">JSON.parse(JSON字符串)  - 把JSON格式化字符串, 再转回成JS数据</span><br></pre></td></tr></tbody></table></figure>

<h2 id="今日学习目标"><a href="#今日学习目标" class="headerlink" title="今日学习目标"></a>今日学习目标</h2><ol>
<li>能够了解key作用, 虚拟DOM, diff算法</li>
<li>能够掌握设置动态样式</li>
<li>能够掌握过滤器, 计算属性, 侦听器</li>
<li>能够完成品牌管理案例</li>
</ol>
<h2 id="1-vue基础"><a href="#1-vue基础" class="headerlink" title="1. vue基础"></a>1. vue基础</h2><h3 id="1-0-vue基础-v-for更新监测"><a href="#1-0-vue基础-v-for更新监测" class="headerlink" title="1.0_vue基础 v-for更新监测"></a>1.0_vue基础 v-for更新监测</h3><blockquote>
<p>目标: 当v-for遍历的目标结构改变, Vue触发v-for的更新</p>
</blockquote>
<p>情况1: 数组翻转</p>
<p>情况2: 数组截取</p>
<p>情况3: 更新值</p>
<p>口诀:</p>
<p>数组变更方法, 就会导致v-for更新, 页面更新</p>
<p>数组非变更方法, 返回新数组, 就不会导致v-for更新, 可采用覆盖数组或this.$set()</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for="(val, index) in arr" :key="index"&gt;</span><br><span class="line">        {{ val }}</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button @click="revBtn"&gt;数组翻转&lt;/button&gt;</span><br><span class="line">    &lt;button @click="sliceBtn"&gt;截取前3个&lt;/button&gt;</span><br><span class="line">    &lt;button @click="updateBtn"&gt;更新第一个元素值&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      arr: [5, 3, 9, 2, 1]</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    revBtn(){</span><br><span class="line">      // 1. 数组翻转可以让v-for更新</span><br><span class="line">      this.arr.reverse()</span><br><span class="line">    },</span><br><span class="line">    sliceBtn(){</span><br><span class="line">      // 2. 数组slice方法不会造成v-for更新</span><br><span class="line">      // slice不会改变原始数组</span><br><span class="line">      // this.arr.slice(0, 3)</span><br><span class="line"></span><br><span class="line">      // 解决v-for更新 - 覆盖原始数组</span><br><span class="line">      let newArr = this.arr.slice(0, 3)</span><br><span class="line">      this.arr = newArr</span><br><span class="line">    },</span><br><span class="line">    updateBtn(){</span><br><span class="line">      // 3. 更新某个值的时候, v-for是监测不到的</span><br><span class="line">      // this.arr[0] = 1000;</span><br><span class="line"></span><br><span class="line">      // 解决-this.$set()</span><br><span class="line">      // 参数1: 更新目标结构</span><br><span class="line">      // 参数2: 更新位置</span><br><span class="line">      // 参数3: 更新值</span><br><span class="line">      this.$set(this.arr, 0, 1000)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>这些方法会触发数组改变, v-for会监测到并更新页面</p>
<ul>
<li><code>push()</code></li>
<li><code>pop()</code></li>
<li><code>shift()</code></li>
<li><code>unshift()</code></li>
<li><code>splice()</code></li>
<li><code>sort()</code></li>
<li><code>reverse()</code></li>
</ul>
<p>这些方法不会触发v-for更新</p>
<ul>
<li><code>slice()</code></li>
<li><code>filter()</code></li>
<li><code>concat()</code> </li>
</ul>
<blockquote>
<p>注意: vue不能监测到数组里赋值的动作而更新, 如果需要请使用Vue.set() 或者this.$set(), 或者覆盖整个数组</p>
</blockquote>
<blockquote>
<p>总结:  改变原数组的方法才能让v-for更新</p>
</blockquote>
<h3 id="1-1-vue基础-v-for就地更新"><a href="#1-1-vue基础-v-for就地更新" class="headerlink" title="1.1_vue基础_v-for就地更新"></a>1.1_vue基础_v-for就地更新</h3><p><code>v-for</code> 的默认行为会尝试原地修改元素而不是移动它们。</p>
<blockquote>
<p>详解v-for就地更新流程(可以看ppt动画)</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/image-20210414215302318.png" alt="image-20210414215302318"></p>
<p>这种 虚拟DOM对比方式, 可以提高性能 - 但是还不够高</p>
<h3 id="1-2-vue基础-虚拟dom"><a href="#1-2-vue基础-虚拟dom" class="headerlink" title="1.2_vue基础_虚拟dom"></a>1.2_vue基础_虚拟dom</h3><blockquote>
<p>目标: 了解虚拟DOM的概念</p>
</blockquote>
<p>.vue文件中的template里写的标签, 都是模板, 都要被vue处理成虚拟DOM对象, 才会渲染显示到真实DOM页面上</p>
<ol>
<li><p>内存中生成一样的虚拟DOM结构(==本质是个JS对象==)</p>
<p>因为真实的DOM属性好几百个, 没办法快速的知道哪个属性改变了</p>
<p>比如template里标签结构</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id="box"&gt;</span><br><span class="line">        &lt;p class="my_p"&gt;123&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>对应的虚拟DOM结构</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dom = {</span><br><span class="line">    <span class="attr">type</span>: <span class="string">'div'</span>,</span><br><span class="line">    <span class="attr">attributes</span>: [{<span class="attr">id</span>: <span class="string">'box'</span>}],</span><br><span class="line">    <span class="attr">children</span>: {</span><br><span class="line">        <span class="attr">type</span>: <span class="string">'p'</span>,</span><br><span class="line">        <span class="attr">attributes</span>: [{<span class="attr">class</span>: <span class="string">'my_p'</span>}],</span><br><span class="line">        <span class="attr">text</span>: <span class="string">'123'</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>以后vue数据更新</p>
<ul>
<li>生成新的虚拟DOM结构</li>
<li>和旧的虚拟DOM结构对比</li>
<li>利用diff算法, 找不不同, 只更新变化的部分(重绘/回流)到页面 - 也叫打补丁</li>
</ul>
</li>
</ol>
<p>==好处1: 提高了更新DOM的性能(不用把页面全删除重新渲染)==</p>
<p>==好处2: 虚拟DOM只包含必要的属性(没有真实DOM上百个属性)==</p>
<blockquote>
<p>总结: 虚拟DOM保存在内存中, 只记录dom关键信息, 配合diff算法提高DOM更新的性能</p>
</blockquote>
<p>在内存中比较差异, 然后给真实DOM打补丁更新上</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/image-20210414215426783.png" alt="image-20210414215426783"></p>
<h3 id="1-3-vue基础-diff算法"><a href="#1-3-vue基础-diff算法" class="headerlink" title="1.3_vue基础_diff算法"></a>1.3_vue基础_diff算法</h3><p>vue用diff算法, 新虚拟dom, 和旧的虚拟dom比较</p>
<h4 id="情况1-根元素变了-删除重建"><a href="#情况1-根元素变了-删除重建" class="headerlink" title="情况1: 根元素变了, 删除重建"></a>情况1: 根元素变了, 删除重建</h4><p>旧虚拟DOM</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div id="box"&gt;</span><br><span class="line">    &lt;p class="my_p"&gt;123&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>新虚拟DOM</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;ul id="box"&gt;</span><br><span class="line">    &lt;li class="my_p"&gt;123&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="情况2-根元素没变-属性改变-元素复用-更新属性"><a href="#情况2-根元素没变-属性改变-元素复用-更新属性" class="headerlink" title="情况2: 根元素没变, 属性改变, ==元素复用==, 更新属性"></a>情况2: 根元素没变, 属性改变, ==元素复用==, 更新属性</h4><p>旧虚拟DOM</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div id="box"&gt;</span><br><span class="line">    &lt;p class="my_p"&gt;123&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>新虚拟DOM</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div id="myBox" title="标题"&gt;</span><br><span class="line">    &lt;p class="my_p"&gt;123&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="1-4-vue基础-diff算法-key"><a href="#1-4-vue基础-diff算法-key" class="headerlink" title="1.4_vue基础_diff算法-key"></a>1.4_vue基础_diff算法-key</h3><h4 id="情况3-根元素没变-子元素没变-元素内容改变"><a href="#情况3-根元素没变-子元素没变-元素内容改变" class="headerlink" title="情况3: 根元素没变, 子元素没变, 元素内容改变"></a>情况3: 根元素没变, 子元素没变, 元素内容改变</h4><h5 id="无key-就地更新"><a href="#无key-就地更新" class="headerlink" title="无key - 就地更新"></a>无key - 就地更新</h5><p>v-for不会移动DOM, 而是尝试复用, 就地更新，如果需要v-for移动DOM, 你需要用特殊 attribute <code>key</code> 来提供一个排序提示</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;ul id="myUL"&gt;</span><br><span class="line">    &lt;li v-for="str in arr"&gt;</span><br><span class="line">        {{ str }} </span><br><span class="line">        &lt;input type="text"&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;button @click="addFn"&gt;下标为1的位置新增一个&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">arr</span>: [<span class="string">"老大"</span>, <span class="string">"新来的"</span>, <span class="string">"老二"</span>, <span class="string">"老三"</span>]</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">methods</span>: {</span><br><span class="line">        <span class="function"><span class="title">addFn</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">this</span>.arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'新来的'</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E6%96%B0_vfor%E6%9B%B4%E7%BB%86_%E6%97%A0key_%E5%B0%B1%E5%9C%B0%E6%9B%B4%E6%96%B0.gif" alt="新_vfor更细_无key_就地更新"></p>
<p>旧 - 虚拟DOM结构  和  新 - 虚拟DOM结构 对比过程</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/image-20210414215502653.png" alt="image-20210414215502653"></p>
<p>==性能不高, 从第二个li往后都更新了==</p>
<h5 id="有key-值为索引"><a href="#有key-值为索引" class="headerlink" title="有key - 值为索引"></a>有key - 值为索引</h5><ul>
<li>还是就地更新</li>
</ul>
<p>因为新旧虚拟DOM对比, key存在就复用此标签更新内容, 如果不存在就直接建立一个新的</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;ul id="myUL"&gt;</span><br><span class="line">    &lt;li v-for="(str, index) in arr" :key="index"&gt;</span><br><span class="line">        {{ str }} </span><br><span class="line">        &lt;input type="text"&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;button @click="addFn"&gt;下标为1的位置新增一个&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">arr</span>: [<span class="string">"老大"</span>, <span class="string">"新来的"</span>, <span class="string">"老二"</span>, <span class="string">"老三"</span>]</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">methods</span>: {</span><br><span class="line">        <span class="function"><span class="title">addFn</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">this</span>.arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'新来的'</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>



<p>key为索引-图解过程 (又就地往后更新了)</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E6%96%B0_vfor%E6%9B%B4%E7%BB%86_%E6%97%A0key_%E5%B0%B1%E5%9C%B0%E6%9B%B4%E6%96%B0.gif" alt="新_vfor更细_无key_就地更新"></p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/image-20210414215525492.png" alt="image-20210414215525492"></p>
<ol>
<li><p>v-for先循环产生新的DOM结构, key是连续的, 和数据对应</p>
</li>
<li><p>然后比较新旧DOM结构, 找到区别, 打补丁到页面上</p>
<p>最后补一个li, 然后从第二个往后, 都要更新内容</p>
</li>
</ol>
<blockquote>
<p>口诀: key的值有id用id, 没id用索引</p>
</blockquote>
<h5 id="有key-值为id"><a href="#有key-值为id" class="headerlink" title="有key - 值为id"></a>有key - 值为id</h5><p>key的值只能是唯一不重复的, 字符串或数值</p>
<p>v-for不会移动DOM, 而是尝试复用, 就地更新，如果需要v-for移动DOM, 你需要用特殊 attribute <code>key</code> 来提供一个排序提示</p>
<p>新DOM里数据的key存在, 去旧的虚拟DOM结构里找到key标记的标签, 复用标签</p>
<p>新DOM里数据的key存在, 去旧的虚拟DOM结构里没有找到key标签的标签, 创建</p>
<p>旧DOM结构的key, 在新的DOM结构里没有了, 则==移除key所在的标签==</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for="obj in arr" :key="obj.id"&gt;</span><br><span class="line">        {{ obj.name }}</span><br><span class="line">        &lt;input type="text"&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button @click="btn"&gt;下标1位置插入新来的&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      arr: [</span><br><span class="line">        {</span><br><span class="line">          name: '老大',</span><br><span class="line">          id: 50</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: '老二',</span><br><span class="line">          id: 31</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: '老三',</span><br><span class="line">          id: 10</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    btn(){</span><br><span class="line">      this.arr.splice(1, 0, {</span><br><span class="line">        id: 19, </span><br><span class="line">        name: '新来的'</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>图解效果:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E6%96%B0_vfor%E6%9B%B4%E7%BB%86_%E6%9C%89key%E5%80%BC%E4%B8%BAid_%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E6%9B%B4%E6%96%B0.gif" alt="新_vfor更细_有key值为id_提高性能更新"></p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/image-20210414215546869.png" alt="image-20210414215546869"></p>
<blockquote>
<p>总结: 不用key也不影响功能(就地更新), 添加key可以提高更新的性能</p>
</blockquote>
<h3 id="1-5-阶段小结"><a href="#1-5-阶段小结" class="headerlink" title="1.5_阶段小结"></a>1.5_阶段小结</h3><p>v-for什么时候会更新页面呢?</p>
<ul>
<li>数组采用更新方法, 才导致v-for更新页面</li>
</ul>
<p>vue是如何提高更新性能的?</p>
<ul>
<li>采用虚拟DOM+diff算法提高更新性能</li>
</ul>
<p>虚拟DOM是什么?</p>
<ul>
<li>本质是保存dom关键信息的JS对象</li>
</ul>
<p>diff算法如何比较新旧虚拟DOM?</p>
<ul>
<li>根元素改变 – 删除当前DOM树重新建</li>
<li>根元素未变, 属性改变 – 更新属性</li>
<li>根元素未变, 子元素/内容改变</li>
<li>无key – 就地更新 / 有key – 按key比较</li>
</ul>
<h3 id="1-6-vue基础-动态class"><a href="#1-6-vue基础-动态class" class="headerlink" title="1.6_vue基础 动态class"></a>1.6_vue基础 动态class</h3><blockquote>
<p>目标: 用v-bind给标签class设置动态的值</p>
</blockquote>
<ul>
<li>语法:<ul>
<li>:class=”{类名: 布尔值}”</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 语法:</span><br><span class="line">      :class="{类名: 布尔值}"</span><br><span class="line">      使用场景: vue变量控制标签是否应该有类名</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;p :class="{red_str: bool}"&gt;动态class&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      bool: true</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .red_str{</span><br><span class="line">    color: red;</span><br><span class="line">  }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 就是把类名保存在vue变量中赋予给标签</p>
</blockquote>
<h3 id="1-7-vue基础-动态style"><a href="#1-7-vue基础-动态style" class="headerlink" title="1.7_vue基础-动态style"></a>1.7_vue基础-动态style</h3><blockquote>
<p>目标: 给标签动态设置style的值</p>
</blockquote>
<ul>
<li>语法<ul>
<li>:style=”{css属性: 值}”</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 动态style语法</span><br><span class="line">      :style="{css属性名: 值}"</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;p :style="{backgroundColor: colorStr}"&gt;动态style&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      colorStr: 'red'</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 动态style的key都是css属性名</p>
</blockquote>
<h3 id="1-8-案例-品牌管理-铺"><a href="#1-8-案例-品牌管理-铺" class="headerlink" title="1.8_案例-品牌管理(铺)"></a>1.8_案例-品牌管理(铺)</h3><blockquote>
<p>目标: 数据铺设</p>
</blockquote>
<ul>
<li>需求1: 把默认数据显示到表格上</li>
<li>需求2: 注意资产超过100的, 都用红色字体标记出来</li>
</ul>
<p>细节:</p>
<p>​    ① 先铺设静态页面 — 去.md文档里, 复制数据和标签模板</p>
<p>​    ② 此案例使用bootstrap, 需要下载, 并导入到工程main.js中</p>
<p>​    ③ 用v-for配合默认数据, 把数据默认铺设到表格上显示</p>
<p>​    ④ 直接在标签上, 大于100价格, 动态设置red类名</p>
<p>图示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/image-20210511120432874.png" alt="image-20210511120432874"></p>
<ol>
<li>因为案例使用了bootstrap, 工程化开发, 模块化用npm/yarn下载引入使用</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn add bootstrap</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>在main.js - 引入bootstrap</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"bootstrap/dist/css/bootstrap.css"</span> <span class="comment">// 默认找文件夹下的index文件(但是这个不是所以需要写路径)</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>模板代码(在这个基础上写)</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;div class="container"&gt;</span><br><span class="line">      &lt;!-- 顶部框模块 --&gt;</span><br><span class="line">      &lt;div class="form-group"&gt;</span><br><span class="line">        &lt;div class="input-group"&gt;</span><br><span class="line">          &lt;h4&gt;品牌管理&lt;/h4&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 数据表格 --&gt;</span><br><span class="line">      &lt;table class="table table-bordered table-hover mt-2"&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;资产名称&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;创建时间&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">          &lt;tr &gt;</span><br><span class="line">            &lt;td&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 如果价格超过100，就有red这个类 --&gt;</span><br><span class="line">            &lt;td class="red"&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href="#" &gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">          &lt;!-- </span><br><span class="line">        &lt;tfoot &gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;td colspan="5" style="text-align: center"&gt;暂无数据&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/tfoot&gt;</span><br><span class="line">            --&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 添加资产 --&gt;</span><br><span class="line">      &lt;form class="form-inline"&gt;</span><br><span class="line">        &lt;div class="form-group"&gt;</span><br><span class="line">          &lt;div class="input-group"&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type="text"</span><br><span class="line">              class="form-control"</span><br><span class="line">              placeholder="资产名称"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">        &lt;div class="form-group"&gt;</span><br><span class="line">          &lt;div class="input-group"&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type="text"</span><br><span class="line">              class="form-control"</span><br><span class="line">              placeholder="价格"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">        &lt;!-- 阻止表单提交 --&gt;</span><br><span class="line">        &lt;button class="btn btn-primary"&gt;添加资产&lt;/button&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      name: "", // 名称</span><br><span class="line">      price: 0, // 价格</span><br><span class="line">      list: [</span><br><span class="line">        { id: 100, name: "外套", price: 199, time: new Date('2010-08-12')},</span><br><span class="line">        { id: 101, name: "裤子", price: 34, time: new Date('2013-09-01') },</span><br><span class="line">        { id: 102, name: "鞋", price: 25.4, time: new Date('2018-11-22') },</span><br><span class="line">        { id: 103, name: "头发", price: 19900, time: new Date('2020-12-12') }</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style &gt;</span><br><span class="line">.red{</span><br><span class="line">  color: red;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>==正确代码, 不可复制==</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;tbody&gt;</span><br><span class="line">    &lt;tr v-for="obj in list" :key="obj.id"&gt;</span><br><span class="line">        &lt;td&gt;{{ obj.id }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ obj.name }}&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 如果价格超过100，就有red这个类 --&gt;</span><br><span class="line">        &lt;td :class="{red: obj.price &gt; 100}"&gt;{{ obj.price }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ obj.time }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;a href="#" &gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 1. 明确需求</span><br><span class="line">// 2. 标签+样式+默认数据</span><br><span class="line">// 3. 下载bootstrap, main.js引入bootstrap.css</span><br><span class="line">// 4. 把list数组 - 铺设表格</span><br><span class="line">// 5. 修改价格颜色</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="1-9-案例-品牌管理-增"><a href="#1-9-案例-品牌管理-增" class="headerlink" title="1.9_案例-品牌管理(增)"></a>1.9_案例-品牌管理(增)</h3><blockquote>
<p>目标: 数据新增</p>
</blockquote>
<ul>
<li><p>需求1: 实现表单数据新增进表格功能</p>
</li>
<li><p>需求2: 判断用户输入是否为空给提示</p>
</li>
<li><p>分析</p>
<p>① 添加资产按钮 – 绑定点击事件</p>
<p>② 给表单v-model绑定vue变量收集用户输入内容</p>
<p>③ 添加数组到数组中</p>
<p>④ 判断用户内容是否符合规定</p>
</li>
</ul>
<p>图示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/4.10_%E6%A1%88%E4%BE%8B_%E8%B5%84%E4%BA%A7%E5%88%97%E8%A1%A8_%E6%96%B0%E5%A2%9E.gif" alt="品牌管理_铺增删"></p>
<p>在上个案例代码基础上接着写</p>
<p>==正确代码,不可复制==</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 添加资产 --&gt;</span><br><span class="line">      &lt;form class="form-inline"&gt;</span><br><span class="line">        &lt;div class="form-group"&gt;</span><br><span class="line">          &lt;div class="input-group"&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type="text"</span><br><span class="line">              class="form-control"</span><br><span class="line">              placeholder="资产名称"</span><br><span class="line">              v-model="name"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">        &lt;div class="form-group"&gt;</span><br><span class="line">          &lt;div class="input-group"&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type="text"</span><br><span class="line">              class="form-control"</span><br><span class="line">              placeholder="价格"</span><br><span class="line">              v-model.number="price"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">        &lt;!-- 4. 阻止表单提交(刷新网页数据又回去了) --&gt;</span><br><span class="line">        &lt;button class="btn btn-primary" @click.prevent="addFn"&gt;添加资产&lt;/button&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 新增</span><br><span class="line">// 1. 按钮 - 事件</span><br><span class="line">// 2. 给表单v-model绑定vue变量</span><br><span class="line">export default {</span><br><span class="line">  // ...省略其他</span><br><span class="line">  methods: {</span><br><span class="line">    addFn(){</span><br><span class="line">      // 5. 判断是否为空</span><br><span class="line">      if (this.name.trim().length === 0 || this.price === 0) {</span><br><span class="line">        alert("不能为空")</span><br><span class="line">        return</span><br><span class="line">      }</span><br><span class="line">      // 3. 把值以对象形式-插入list</span><br><span class="line">      this.list.push({</span><br><span class="line">        // 当前数组最后一个对象的id+1作为新对象id值</span><br><span class="line">        id: this.list[this.list.length - 1].id + 1,</span><br><span class="line">        name: this.name,</span><br><span class="line">        price: this.price,</span><br><span class="line">        time: new Date()</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="1-10-案例-品牌管理-删"><a href="#1-10-案例-品牌管理-删" class="headerlink" title="1.10_案例-品牌管理(删)"></a>1.10_案例-品牌管理(删)</h3><blockquote>
<p>目标: 数据删除</p>
</blockquote>
<ul>
<li><p>需求1: 点击删除的a标签, 删除数据</p>
</li>
<li><p>需求2: 删除没数据了要提示暂无数据的tfoot</p>
</li>
<li><p>分析</p>
<p>① a标签绑定点击事件</p>
<p>② 给事件方法传id</p>
<p>③ 通过id, 找到对应数据删除</p>
<p>④ 删除光了要让tfoot显示</p>
<p>⑤ 删除光了再新增, 有bug(id值问题)需要修复</p>
</li>
</ul>
<p>图示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/4.10_%E6%A1%88%E4%BE%8B_%E8%B5%84%E4%BA%A7%E5%88%97%E8%A1%A8_%E5%88%A0%E9%99%A4.gif" alt="品牌管理_铺增删"></p>
<p>在上个案例代码基础上接着写</p>
<p>正确的代码(==不可复制==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;td&gt;&lt;a href="#" @click="delFn(obj.id)"&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">          </span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 删除功能</span><br><span class="line">// 1. 删除a标签-点击事件</span><br><span class="line">// 2. 对应方法名</span><br><span class="line">// 3. 数据id到事件方法中</span><br><span class="line">// 4. 通过id, 找到这条数据在数组中的下标</span><br><span class="line">// 5. splice方法删除原数组里的对应元素</span><br><span class="line">// 6. 设置tfoot, 无数据给出提示</span><br><span class="line">// 7. 无数据再新增, id要判断一下</span><br><span class="line">export default {</span><br><span class="line">  // ...其他代码</span><br><span class="line">  methods: {</span><br><span class="line">    // ...其他代码</span><br><span class="line">    delFn(id){</span><br><span class="line">      // 通过id找到这条数据在数组中下标</span><br><span class="line">      let index = this.list.findIndex(obj =&gt; obj.id === id)</span><br><span class="line">      this.list.splice(index, 1)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-vue过滤器"><a href="#2-vue过滤器" class="headerlink" title="2. vue过滤器"></a>2. vue过滤器</h2><h3 id="2-0-vue过滤器-定义使用"><a href="#2-0-vue过滤器-定义使用" class="headerlink" title="2.0_vue过滤器-定义使用"></a>2.0_vue过滤器-定义使用</h3><blockquote>
<p>目的: 转换格式, 过滤器就是一个<strong>函数</strong>, 传入值返回处理后的值</p>
</blockquote>
<p>过滤器只能用在, ==插值表达式和v-bind表达式==</p>
<p>Vue中的过滤器场景</p>
<ul>
<li>字母转大写, 输入”hello”, 输出”HELLO”</li>
<li>字符串翻转, “输入hello, world”, 输出”dlrow ,olleh”</li>
</ul>
<p>语法: </p>
<ul>
<li><p>Vue.filter(“过滤器名”, (值) =&gt; {return “返回处理后的值”})</p>
</li>
<li><p>filters: {过滤器名字: (值) =&gt; {return “返回处理后的值”}</p>
</li>
</ul>
<p>例子:</p>
<ul>
<li>全局定义字母都大写的过滤器</li>
<li>局部定义字符串翻转的过滤器</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;原来的样子: {{ msg }}&lt;/p&gt;</span><br><span class="line">    &lt;!-- 2. 过滤器使用</span><br><span class="line">      语法: {{ 值 | 过滤器名字 }}</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;p&gt;使用翻转过滤器: {{ msg | reverse }}&lt;/p&gt;</span><br><span class="line">    &lt;p :title="msg | toUp"&gt;鼠标长停&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      msg: 'Hello, Vue'</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  // 方式2: 局部 - 过滤器</span><br><span class="line">  // 只能在当前vue文件内使用</span><br><span class="line">  /*</span><br><span class="line">     语法: </span><br><span class="line">     filters: {</span><br><span class="line">       过滤器名字 (val) {</span><br><span class="line">         return 处理后的值</span><br><span class="line">       }</span><br><span class="line">     }</span><br><span class="line">  */</span><br><span class="line">  filters: {</span><br><span class="line">    toUp (val) {</span><br><span class="line">      return val.toUpperCase()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 把值转成另一种形式, 使用过滤器, Vue3用函数替代了过滤器.</p>
<p>全局注册最好在main.js中注册, 一处注册到处使用</p>
</blockquote>
<h3 id="2-1-vue过滤器-传参和多过滤器"><a href="#2-1-vue过滤器-传参和多过滤器" class="headerlink" title="2.1_vue过滤器-传参和多过滤器"></a>2.1_vue过滤器-传参和多过滤器</h3><blockquote>
<p>目标: 可同时使用多个过滤器, 或者给过滤器传参</p>
</blockquote>
<ul>
<li>语法:<ul>
<li>过滤器传参:   vue变量 | 过滤器(实参) </li>
<li>多个过滤器:   vue变量 | 过滤器1 | 过滤器2</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;原来的样子: {{ msg }}&lt;/p&gt;</span><br><span class="line">    &lt;!-- 1.</span><br><span class="line">      给过滤器传值</span><br><span class="line">      语法: vue变量 | 过滤器名(值)</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;p&gt;使用翻转过滤器: {{ msg | reverse('|') }}&lt;/p&gt;</span><br><span class="line">    &lt;!-- 2.</span><br><span class="line">      多个过滤利使用</span><br><span class="line">      语法: vue变量 | 过滤器1 | 过滤器2</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;p :title="msg | toUp | reverse('|')"&gt;鼠标长停&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      msg: 'Hello, Vue'</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  filters: {</span><br><span class="line">    toUp (val) {</span><br><span class="line">      return val.toUpperCase()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 过滤器可以传参, 还可以对某个过滤器结果, 后面在使用一个过滤器</p>
</blockquote>
<h3 id="2-2-案例-品牌管理-时间格式化"><a href="#2-2-案例-品牌管理-时间格式化" class="headerlink" title="2.2_案例-品牌管理(时间格式化)"></a>2.2_案例-品牌管理(时间格式化)</h3><blockquote>
<p>目标: 复制上个案例, 在此基础上, 把表格里的时间用过滤器+moment模块, 格式化成YYYY-MM-DD 格式</p>
</blockquote>
<p>图示: </p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/image-20210215155844500.png" alt="image-20210215155844500"></p>
<ol>
<li><p>下载moment处理日期的第三方工具模块</p>
<p>moment官网文档: <a href="http://momentjs.cn/docs/#/displaying/">http://momentjs.cn/docs/#/displaying/</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn add moment</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>定义过滤器, 把时间用moment模块格式化, 返回我们想要的格式</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 目标: 处理时间</span></span><br><span class="line"><span class="comment">// 1. 下载moment模块</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义过滤器, 编写内部代码</span></span><br><span class="line"><span class="attr">filters</span>: { </span><br><span class="line">    formatDate (val){</span><br><span class="line">        <span class="keyword">return</span> moment(val).format(<span class="string">'YYYY-MM-DD'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">3.</span> 使用过滤器 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>{{ obj.time | formatDate }}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="3-vue计算属性"><a href="#3-vue计算属性" class="headerlink" title="3. vue计算属性"></a>3. vue计算属性</h2><h3 id="3-0-vue计算属性-computed"><a href="#3-0-vue计算属性-computed" class="headerlink" title="3.0_vue计算属性-computed"></a>3.0_vue计算属性-computed</h3><blockquote>
<p>目标: 一个数据, 依赖另外一些数据计算而来的结果</p>
</blockquote>
<p>语法:</p>
<ul>
<li>```js<br>computed: {<pre><code>"计算属性名" () {
    return "值"
}
</code></pre>
}<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">需求: </span><br><span class="line"></span><br><span class="line">* 需求: 求2个数的和显示到页面上</span><br><span class="line"></span><br><span class="line">```vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;{{ num }}&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      a: 10,</span><br><span class="line">      b: 20</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  // 计算属性:</span><br><span class="line">  // 场景: 一个变量的值, 需要用另外变量计算而得来</span><br><span class="line">  /*</span><br><span class="line">    语法:</span><br><span class="line">    computed: {</span><br><span class="line">      计算属性名 () {</span><br><span class="line">        return 值</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  */</span><br><span class="line"> // 注意: 计算属性和data属性都是变量-不能重名</span><br><span class="line"> // 注意2: 函数内变量变化, 会自动重新计算结果返回</span><br><span class="line">  computed: {</span><br><span class="line">    num(){</span><br><span class="line">      return this.a + this.b</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<blockquote>
<p>注意: 计算属性也是vue数据变量, 所以不要和data里重名, 用法和data相同</p>
</blockquote>
<blockquote>
<p>总结: 一个数据, 依赖另外一些数据计算而来的结果</p>
</blockquote>
<h3 id="3-1-vue计算属性-缓存"><a href="#3-1-vue计算属性-缓存" class="headerlink" title="3.1_vue计算属性-缓存"></a>3.1_vue计算属性-缓存</h3><blockquote>
<p>目标: 计算属性是基于它们的依赖项的值结果进行缓存的，只要依赖的变量不变, 都直接从缓存取结果</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/image-20210113232439893.png" alt="image-20210113232439893"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;{{ reverseMessage }}&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;{{ reverseMessage }}&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;{{ reverseMessage }}&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;{{ getMessage() }}&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;{{ getMessage() }}&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;{{ getMessage() }}&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      msg: "Hello, Vue"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  // 计算属性优势:</span><br><span class="line">  // 带缓存</span><br><span class="line">  // 计算属性对应函数执行后, 会把return值缓存起来</span><br><span class="line">  // 依赖项不变, 多次调用都是从缓存取值</span><br><span class="line">  // 依赖项值-变化, 函数会"自动"重新执行-并缓存新的值</span><br><span class="line">  computed: {</span><br><span class="line">    reverseMessage(){</span><br><span class="line">      console.log("计算属性执行了");</span><br><span class="line">      return this.msg.split("").reverse().join("")</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    getMessage(){</span><br><span class="line">      console.log("函数执行了");</span><br><span class="line">      return this.msg.split("").reverse().join("")</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 计算属性根据依赖变量结果缓存, 依赖变化重新计算结果存入缓存, 比普通方法性能更高</p>
</blockquote>
<h3 id="3-2-案例-品牌管理-总价和均价"><a href="#3-2-案例-品牌管理-总价和均价" class="headerlink" title="3.2_案例-品牌管理(总价和均价)"></a>3.2_案例-品牌管理(总价和均价)</h3><blockquote>
<p>目标: 基于之前的案例, 完成总价和均价的计算效果</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/image-20210215160140718.png" alt="image-20210215160140718"></p>
<p>此处只修改了变化的代码</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;tr style="background-color: #EEE"&gt;</span><br><span class="line">     &lt;td&gt;统计:&lt;/td&gt;</span><br><span class="line">     &lt;td colspan="2"&gt;总价钱为: {{ allPrice }}&lt;/td&gt;</span><br><span class="line">     &lt;td colspan="2"&gt;平均价: {{ svgPrice }}&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 总价和均价显示</span><br><span class="line">// 1. 末尾补tr - 显示总价和均价</span><br><span class="line">export default {</span><br><span class="line">  // ...源代码省略</span><br><span class="line">  // 2. 计算属性</span><br><span class="line">  computed: {</span><br><span class="line">      allPrice(){</span><br><span class="line">          // 3. 求总价</span><br><span class="line">          return this.list.reduce((sum, obj) =&gt; sum += obj.price, 0)</span><br><span class="line">      },</span><br><span class="line">      avgPrice(){</span><br><span class="line">          // 4. 求均价 - 保留2位小数</span><br><span class="line">          return (this.allPrice / this.list.length).toFixed(2)</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 总价来源于所有数据计算而来的结果, 故采用计算属性</p>
</blockquote>
<h3 id="3-3-vue计算属性-完整写法"><a href="#3-3-vue计算属性-完整写法" class="headerlink" title="3.3_vue计算属性-完整写法"></a>3.3_vue计算属性-完整写法</h3><blockquote>
<p>目标: 计算属性也是变量, 如果想要直接赋值, 需要使用完整写法</p>
</blockquote>
<p>语法:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">computed: {</span><br><span class="line">    <span class="string">"属性名"</span>: {</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">值</span>)</span>{</span><br><span class="line">            </span><br><span class="line">        },</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"值"</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>需求: </p>
<ul>
<li>计算属性给v-model使用</li>
</ul>
<p>页面准备输入框</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &lt;span&gt;姓名:&lt;/span&gt;</span><br><span class="line">          &lt;input type="text" v-model="full"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 问题: 给计算属性赋值 - 需要setter</span><br><span class="line">// 解决:</span><br><span class="line">/*</span><br><span class="line">    完整语法:</span><br><span class="line">    computed: {</span><br><span class="line">        "计算属性名" (){},</span><br><span class="line">        "计算属性名": {</span><br><span class="line">            set(值){</span><br><span class="line"></span><br><span class="line">            },</span><br><span class="line">            get(){</span><br><span class="line">                return 值</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">*/</span><br><span class="line">export default {</span><br><span class="line">    computed: {</span><br><span class="line">        full: {</span><br><span class="line">            // 给full赋值触发set方法</span><br><span class="line">            set(val){</span><br><span class="line">                console.log(val)</span><br><span class="line">            },</span><br><span class="line">            // 使用full的值触发get方法</span><br><span class="line">            get(){</span><br><span class="line">                return "无名氏"</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 想要给计算属性赋值, 需要使用set方法</p>
</blockquote>
<h3 id="3-4-案例-小选影响全选"><a href="#3-4-案例-小选影响全选" class="headerlink" title="3.4_案例-小选影响全选"></a>3.4_案例-小选影响全选</h3><blockquote>
<p>目标: 小选框都选中(手选), 全选自动选中</p>
</blockquote>
<ul>
<li>需求: 小选框都选中(手选), 全选自动选中</li>
</ul>
<p>分析:</p>
<p>① 先静态后动态, 从.md拿到静态标签和数据</p>
<p>② 循环生成复选框和文字, 对象的c属性和小选框的选中状态, 用v-model双向绑定</p>
<p>③ 定义isAll计算属性, 值通过小选框们统计c属性状态得来</p>
<p>图示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%B0%8F%E9%80%89_%E5%BD%B1%E5%93%8D%E5%A4%9A%E9%80%89.gif" alt="image-20210511120432874"></p>
<p>模板标签和数据(==直接复制在这基础上写vue代码==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;全选:&lt;/span&gt;</span><br><span class="line">    &lt;input type="checkbox"/&gt;</span><br><span class="line">    &lt;button&gt;反选&lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;input type="checkbox"/&gt;</span><br><span class="line">        &lt;span&gt;任务名&lt;/span&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      arr: [</span><br><span class="line">        {</span><br><span class="line">          name: "猪八戒",</span><br><span class="line">          c: false,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "孙悟空",</span><br><span class="line">          c: false,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "唐僧",</span><br><span class="line">          c: false,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "白龙马",</span><br><span class="line">          c: false,</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>==正确代码,不可复制==</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;全选:&lt;/span&gt;</span><br><span class="line">    &lt;!-- 4. v-model 关联全选 - 选中状态 --&gt;</span><br><span class="line">    &lt;input type="checkbox" v-model="isAll"/&gt;</span><br><span class="line">    &lt;button&gt;反选&lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for="(obj, index) in arr" :key="index"&gt;</span><br><span class="line">        &lt;!-- 3. 对象.c - 关联 选中状态 --&gt;</span><br><span class="line">        &lt;input type="checkbox" v-model="obj.c"/&gt;</span><br><span class="line">        &lt;span&gt;{{ obj.name }}&lt;/span&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 小选框 -&gt; 全选</span><br><span class="line">// 1. 标签+样式+js准备好</span><br><span class="line">// 2. 把数据循环展示到页面上</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      arr: [</span><br><span class="line">        {</span><br><span class="line">          name: "猪八戒",</span><br><span class="line">          c: false,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "孙悟空",</span><br><span class="line">          c: false,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "唐僧",</span><br><span class="line">          c: false,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "白龙马",</span><br><span class="line">          c: false,</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  // 5. 计算属性-isAll</span><br><span class="line">  computed: {</span><br><span class="line">    isAll () {</span><br><span class="line">         // 6. 统计小选框状态 -&gt;  全选状态</span><br><span class="line">        // every口诀: 查找数组里"不符合"条件, 直接原地返回false</span><br><span class="line">        return this.arr.every(obj =&gt; obj.c === true)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-5-案例-全选影响小选"><a href="#3-5-案例-全选影响小选" class="headerlink" title="3.5_案例-全选影响小选"></a>3.5_案例-全选影响小选</h3><blockquote>
<p>目标: 全选影响小选</p>
</blockquote>
<ul>
<li>需求1: 获取到全选状态 – 改装isAll计算属性</li>
<li>需求2: 全选状态同步给所有小选框</li>
</ul>
<p>分析:</p>
<p>①: isAll改成完整写法, set里获取到全选框, 勾选的状态值</p>
<p>②: 遍历数据数组, 赋给所有小选框v-model关联的属性</p>
<p>图示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%85%A8%E9%80%89_%E5%BD%B1%E5%93%8D%E5%B0%8F%E9%80%89.gif" alt="image-20210511120432874"></p>
<p>==正确代码,不可以复制==</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  // ...其他代码</span><br><span class="line">  // 5. 计算属性-isAll</span><br><span class="line">  computed: {</span><br><span class="line">    isAll: {</span><br><span class="line">      set(val){</span><br><span class="line">        // 7. 全选框 - 选中状态(true/false)</span><br><span class="line">        this.arr.forEach(obj =&gt; obj.c = val)</span><br><span class="line">      },</span><br><span class="line">      get(){</span><br><span class="line">        // 6. 统计小选框状态 -&gt;  全选状态</span><br><span class="line">        // every口诀: 查找数组里"不符合"条件, 直接原地返回false</span><br><span class="line">        return this.arr.every(obj =&gt; obj.c === true)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-6-案例-反选"><a href="#3-6-案例-反选" class="headerlink" title="3.6_案例-反选"></a>3.6_案例-反选</h3><blockquote>
<p>目标: 反选功能</p>
</blockquote>
<ul>
<li>需求: 点击反选, 让所有小选框, 各自取相反勾选状态</li>
</ul>
<p>分析:</p>
<p>①: 小选框的勾选状态, 在对象的c属性</p>
<p>②: 遍历所有对象, 把对象的c属性取相反值赋予回去即可</p>
<p>图示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%8F%8D%E9%80%89_%E6%95%88%E6%9E%9C.gif" alt="image-20210511120432874"></p>
<p>==正确代码,不可以复制==</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;button @click="btn"&gt;反选&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  // ...其他代码省略</span><br><span class="line">  methods: {</span><br><span class="line">    btn(){</span><br><span class="line">      // 8. 让数组里对象的c属性取反再赋予回去</span><br><span class="line">      this.arr.forEach(obj =&gt; obj.c = !obj.c)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-vue侦听器"><a href="#4-vue侦听器" class="headerlink" title="4. vue侦听器"></a>4. vue侦听器</h2><h3 id="4-0-vue侦听器-watch"><a href="#4-0-vue侦听器-watch" class="headerlink" title="4.0_vue侦听器-watch"></a>4.0_vue侦听器-watch</h3><blockquote>
<p>目标: 可以侦听data/computed属性值改变</p>
</blockquote>
<p>语法:</p>
<ul>
<li>```js<br>watch: {<pre><code>"被侦听的属性名" (newVal, oldVal){
    
}
</code></pre>
}<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">完整例子代码:</span><br><span class="line"></span><br><span class="line">```vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type="text" v-model="name"&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      name: ""</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  // 目标: 侦听到name值的改变</span><br><span class="line">  /*</span><br><span class="line">  语法:</span><br><span class="line">    watch: {</span><br><span class="line">      变量名 (newVal, oldVal){</span><br><span class="line">        // 变量名对应值改变这里自动触发</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  */</span><br><span class="line">  watch: {</span><br><span class="line">    // newVal: 当前最新值</span><br><span class="line">    // oldVal: 上一刻值</span><br><span class="line">    name(newVal, oldVal){</span><br><span class="line">      console.log(newVal, oldVal);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<blockquote>
<p>总结: 想要侦听一个属性变化, 可使用侦听属性watch</p>
</blockquote>
<h3 id="4-1-vue侦听器-深度侦听和立即执行"><a href="#4-1-vue侦听器-深度侦听和立即执行" class="headerlink" title="4.1_vue侦听器-深度侦听和立即执行"></a>4.1_vue侦听器-深度侦听和立即执行</h3><blockquote>
<p>目标: 侦听复杂类型, 或者立即执行侦听函数</p>
</blockquote>
<ul>
<li><p>语法:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">watch: {</span><br><span class="line">    <span class="string">"要侦听的属性名"</span>: {</span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">// 立即执行</span></span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 深度侦听复杂类型内变化</span></span><br><span class="line">        handler (newVal, oldVal) {</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<p>完整例子代码:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type="text" v-model="user.name"&gt;</span><br><span class="line">    &lt;input type="text" v-model="user.age"&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      user: {</span><br><span class="line">        name: "",</span><br><span class="line">        age: 0</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  // 目标: 侦听对象</span><br><span class="line">  /*</span><br><span class="line">  语法:</span><br><span class="line">    watch: {</span><br><span class="line">      变量名 (newVal, oldVal){</span><br><span class="line">        // 变量名对应值改变这里自动触发</span><br><span class="line">      },</span><br><span class="line">      变量名: {</span><br><span class="line">        handler(newVal, oldVal){</span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line">        deep: true, // 深度侦听(对象里面层的值改变)</span><br><span class="line">        immediate: true // 立即侦听(网页打开handler执行一次)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  */</span><br><span class="line">  watch: {</span><br><span class="line">    user: {</span><br><span class="line">      handler(newVal, oldVal){</span><br><span class="line">        // user里的对象</span><br><span class="line">        console.log(newVal, oldVal);</span><br><span class="line">      },</span><br><span class="line">      deep: true,</span><br><span class="line">      immediate: true</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: immediate立即侦听, deep深度侦听, handler固定方法触发</p>
</blockquote>
<h3 id="4-2-案例-品牌管理-数据缓存"><a href="#4-2-案例-品牌管理-数据缓存" class="headerlink" title="4.2_案例-品牌管理(数据缓存)"></a>4.2_案例-品牌管理(数据缓存)</h3><blockquote>
<p>目标: 侦听list变化, 同步到浏览器本地</p>
</blockquote>
<ul>
<li>需求: 把品牌管理的数据实时同步到本地缓存</li>
</ul>
<p>分析:</p>
<p>​    ① 在watch侦听list变化的时候, 把最新的数组list转成JSON字符串存入到localStorage本地</p>
<p>​    ② data里默认把list变量从本地取值, 如果取不到给个默认的空数组</p>
<p>效果:</p>
<p>​    新增/删除 – 刷新页面 – 数据还在</p>
<p>在之前的案例代码基础上接着写</p>
<p>==正确代码,不可复制==</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import moment from "moment";</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      name: "", // 名称</span><br><span class="line">      price: 0, // 价格</span><br><span class="line">      // 3. 本地取出缓存list</span><br><span class="line">      list: JSON.parse(localStorage.getItem('pList')) || [],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  // ...其他代码省略</span><br><span class="line">  watch: {</span><br><span class="line">    list: {</span><br><span class="line">      handler(){</span><br><span class="line">        // 2. 存入本地</span><br><span class="line">        localStorage.setItem('pList', JSON.stringify(this.list))</span><br><span class="line">      },</span><br><span class="line">      deep: true</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ul>
<li><input disabled="" type="checkbox"> v-for能监测到哪些数组方法变化, 更新页面</li>
<li><input disabled="" type="checkbox"> key的作用是什么</li>
<li><input disabled="" type="checkbox"> 虚拟dom好处, diff算法效果</li>
<li><input disabled="" type="checkbox"> 动态设置class或style</li>
<li><input disabled="" type="checkbox"> vue过滤器作用和分类</li>
<li><input disabled="" type="checkbox"> vue计算属性作用</li>
<li><input disabled="" type="checkbox"> vue侦听器的作用</li>
</ul>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1-Vue-中怎么自定义过滤器"><a href="#1-Vue-中怎么自定义过滤器" class="headerlink" title="1. Vue 中怎么自定义过滤器"></a>1. Vue 中怎么自定义过滤器</h3><p>​    Vue.js允许自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和v-bind表达式</p>
<p>​    全局的用Vue.filter()</p>
<p>​    局部的用filters属性</p>
<h3 id="2-Vue中-key作用-为什么不能用索引"><a href="#2-Vue中-key作用-为什么不能用索引" class="headerlink" title="2. Vue中:key作用, 为什么不能用索引"></a>2. Vue中:key作用, 为什么不能用索引</h3><p>​    :key是给v-for循环生成标签颁发唯一标识的, 用于性能的优化</p>
<p>​    因为v-for数据项的顺序改变，Vue 也不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素</p>
<p>​    :key如果是索引, 因为索引是连续的, 如果删除其中某一个, 会导致最后一个被删除</p>
<p>​    当我们再删除的时候, :key再根据数据来把新旧的dom对比时, 删除:key不存在的对应的标签(添加也是一样的插入到指定位置, 别的都不会动)</p>
<h3 id="3-数组更新有的时候v-for不渲染"><a href="#3-数组更新有的时候v-for不渲染" class="headerlink" title="3. 数组更新有的时候v-for不渲染"></a>3. 数组更新有的时候v-for不渲染</h3><p>​    因为vue内部只能监测到数组顺序/位置的改变/数量的改变, 但是值被重新赋予监测不到变更, 可以用 Vue.set() / vm.$set()</p>
<h2 id="附加练习-1-买点书练习"><a href="#附加练习-1-买点书练习" class="headerlink" title="附加练习_1.买点书练习"></a>附加练习_1.买点书练习</h2><blockquote>
<p>目标: 把数据铺设到页面上, 当用户点击买书按钮, 书籍数量增加1, 并且要计算累计的和</p>
</blockquote>
<p>演示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/7.3_%E6%A1%88%E4%BE%8B_%E4%B9%B0%E7%82%B9%E4%B9%A6%E5%AD%A6%E4%B9%A0%E5%90%A7.gif" alt="7.3_案例_买点书学习吧"></p>
<p>标签结构和数据(==复制接着写==): </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;请选择你要购买的书籍&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;table border="1" width="500" cellspacing="0"&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;书名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;单价&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;数量&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;合计&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;p&gt;总价格为: &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      arr: [</span><br><span class="line">        {</span><br><span class="line">          name: "水浒传",</span><br><span class="line">          price: 107,</span><br><span class="line">          count: 0,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "西游记",</span><br><span class="line">          price: 192,</span><br><span class="line">          count: 0,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "三国演义",</span><br><span class="line">          price: 219,</span><br><span class="line">          count: 0,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "红楼梦",</span><br><span class="line">          price: 178,</span><br><span class="line">          count: 0,</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>正确答案(==不可复制==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;请选择你要购买的书籍&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for="(item, ind) in arr" :key="ind"&gt;</span><br><span class="line">        &lt;span&gt;{{ item["name"] }}&lt;/span&gt;</span><br><span class="line">        &lt;button @click="buy(ind)"&gt;买书&lt;/button&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;table border="1" width="500" cellspacing="0"&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;书名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;单价&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;数量&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;合计&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr v-for="(item, index) in arr" :key="index"&gt;</span><br><span class="line">        &lt;td&gt;{{ index + 1 }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ item["name"] }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ item["price"] }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ item["count"] }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ item["price"] * item["count"] }}&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;p&gt;总价格为: {{ allPrice }}&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      arr: [</span><br><span class="line">        {</span><br><span class="line">          name: "水浒传",</span><br><span class="line">          price: 107,</span><br><span class="line">          count: 0,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "西游记",</span><br><span class="line">          price: 192,</span><br><span class="line">          count: 0,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "三国演义",</span><br><span class="line">          price: 219,</span><br><span class="line">          count: 0,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "红楼梦",</span><br><span class="line">          price: 178,</span><br><span class="line">          count: 0,</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    buy(index) {</span><br><span class="line">      this.arr[index]["count"]++;</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    allPrice() {</span><br><span class="line">      // 数组里放的是对象, 而对象是复杂类型, 引用关系, 值改变会触发计算属性重新执行</span><br><span class="line">      return this.arr.reduce((sum, obj) =&gt; {</span><br><span class="line">        return (sum += obj["price"] * obj["count"]);</span><br><span class="line">      }, 0);</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="附加练习-2-选你爱我求和"><a href="#附加练习-2-选你爱我求和" class="headerlink" title="附加练习_2.选你爱我求和"></a>附加练习_2.选你爱我求和</h2><blockquote>
<p>目标: 把用户选中的数字, 累计求和显示</p>
</blockquote>
<p>提示: </p>
<ul>
<li>v-model绑定的变量是数组, 可以收集checkbox的value属性呦</li>
</ul>
<p>演示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/7.2_%E6%A1%88%E4%BE%8B_%E9%80%89%E4%BD%A0%E7%88%B1%E7%9A%84%E6%95%B0%E5%AD%97_%E7%BB%99%E4%BD%A0%E6%B1%82%E5%92%8C.gif" alt="7.2_案例_选你爱的数字_给你求和"></p>
<p>数据(复制):</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="number">9</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">48</span>, <span class="number">57</span>, <span class="number">62</span>, <span class="number">79</span>, <span class="number">87</span>]</span><br></pre></td></tr></tbody></table></figure>

<p>正确答案:(==先不要看==)</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 无id时, 可以使用index(反正也是就地更新) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"(item, index) in arr"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">"display: inline-block"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checkNumArr"</span> <span class="attr">:value</span>=<span class="string">"item"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ item }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你选中的元素, 累加的值和为: {{ theSum }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">arr</span>: [<span class="number">9</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">48</span>, <span class="number">57</span>, <span class="number">62</span>, <span class="number">79</span>, <span class="number">87</span>],</span></span><br><span class="line"><span class="javascript">      <span class="attr">checkNumArr</span>: [], <span class="comment">//  保存用户选中的数字</span></span></span><br><span class="line"><span class="javascript">    };</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">theSum</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.checkNumArr.reduce(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> {</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> (sum += val);</span></span><br><span class="line"><span class="javascript">      }, <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">};</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结, 当计算属性函数里引用的vue变量发生改变, 函数就执行并重新返回结果并缓存起来</p>
</blockquote>
<h2 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h2><p>先把课上案例搂一遍</p>
<h3 id="移动端-导航切换效果"><a href="#移动端-导航切换效果" class="headerlink" title="移动端-导航切换效果"></a>移动端-导航切换效果</h3><p>目标: 切换到移动端画面, 点击导航, 高亮</p>
<blockquote>
<p>提示: 索引 / 高亮的class样式</p>
</blockquote>
<p>图例:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/Day02_%E4%BD%9C%E4%B8%9A1_%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AF%BC%E8%88%AA.gif" alt="Day02_作业1_移动端导航"></p>
<p>不带vue的标签结构(==可复制接着写==)</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav_left"</span> <span class="attr">id</span>=<span class="string">"navLeft"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav_content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>导航名字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-xiajiantoubeifen gray"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">arr</span>: [</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"0"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"热门"</span></span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"621"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u5496\u5561"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"627"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u996e\u98df"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"279"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u7537\u88c5"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"294"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u5973\u88c5"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"122"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u773c\u955c"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"339"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u5185\u8863\u914d\u9970"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"391"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u6bcd\u5a74"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"35"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u978b\u9774"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"39"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u8fd0\u52a8"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"153"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u7bb1\u5305"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"119"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u7f8e\u5986\u4e2a\u62a4"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"355"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u5bb6\u7eba"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"51"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u9910\u53a8"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"334"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u7535\u5668"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"369"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u5bb6\u88c5"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"10"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u5bb6\u5177"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"223"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u6570\u7801"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"429"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u6c7d\u914d"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"546"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u5065\u5eb7\u4fdd\u5065"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        {</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_id</span>: <span class="string">"433"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">first_name</span>: <span class="string">"\u5b9a\u5236"</span>,</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">      ],</span></span><br><span class="line"><span class="javascript">    };</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">};</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.wrap</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin</span>: <span class="number">0.2rem</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/*左侧的导航样式*/</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.nav_left</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">21.1875rem</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">overflow</span>: scroll;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.nav_left</span>::-webkit-scrollbar {</span></span><br><span class="line"><span class="css">  display: none;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.nav_content</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.7rem</span>;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.nav_content</span> <span class="selector-tag">span</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">0.4rem</span> <span class="number">0.6rem</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>: <span class="number">0.875rem</span>;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.nav_content</span> <span class="selector-class">.active</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#7f4395</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: <span class="number">#7f4395</span>;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.nav_left</span>,</span></span><br><span class="line"><span class="css"><span class="selector-class">.down</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/*右侧导航部分*/</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.down</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.gray</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: gray;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">  <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="学生信息管理"><a href="#学生信息管理" class="headerlink" title="学生信息管理"></a>学生信息管理</h3><p>==如果1个按钮不会写, 用2个按钮写==</p>
<p>目标: </p>
<ul>
<li>需求1: 铺设页面, 准备初始的数据(自己手写数据结构) - 前面是数组索引+1 *作为序号</li>
<li>需求2: 当输入框没有值, 要给用户一个提示, 必须都有值才能增加新数据 (数据驱动页面哦)</li>
<li>需求3: 添加功能 - 想好数据结构统一对象的key</li>
<li>需求4: 点击编辑功能, 把值赋予到输入框上(不要操作dom, 数据驱动页面)</li>
<li>需求5: 用户修改后, 点击相同按钮 - 想想怎么判断怎么是添加还是修改的功能 (提示: 准备一个全局变量, 点过编辑按钮可以让它为true) - 实现编辑后更新页面效果</li>
<li>需求6: 点击删除, 删除这行数据</li>
</ul>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80API_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7_%E8%BF%87%E6%BB%A4%E5%99%A8_%E4%BE%A6%E5%90%AC%E5%99%A8_%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/Day02_%E4%BD%9C%E4%B8%9A_%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86.gif" alt="Day02_作业_学生信息管理"></p>
<p>不带vue代码的标签结构(==可复制接着写==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;姓名:&lt;/span&gt;</span><br><span class="line">      &lt;input type="text" /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;年龄:&lt;/span&gt;</span><br><span class="line">      &lt;input type="number" /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;性别:&lt;/span&gt;</span><br><span class="line">      &lt;select &gt;</span><br><span class="line">        &lt;option value="男"&gt;男&lt;/option&gt;</span><br><span class="line">        &lt;option value="女"&gt;女&lt;/option&gt;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button &gt;添加/修改&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;table</span><br><span class="line">        border="1"</span><br><span class="line">        cellpadding="10"</span><br><span class="line">        cellspacing="0"</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr &gt;</span><br><span class="line">          &lt;td&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;</span><br><span class="line">            &lt;button &gt;删除&lt;/button&gt;</span><br><span class="line">            &lt;button &gt;编辑&lt;/button&gt;</span><br><span class="line">          &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  </span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础4-生命周期_组件进阶</title>
    <url>/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="自测"><a href="#自测" class="headerlink" title="自测"></a>自测</h2><ul>
<li><input disabled="" type="checkbox"> 知道window.onload的作用</li>
<li><input disabled="" type="checkbox"> ajax是什么, XMLHttpRequest的使用步骤</li>
<li><input disabled="" type="checkbox"> jQ的 $.ajax底层是什么?</li>
<li><input disabled="" type="checkbox"> Promise的作用</li>
<li><input disabled="" type="checkbox"> async和await的作用-如何和Promise配合</li>
<li><input disabled="" type="checkbox"> 同步异步的概念, 代码执行顺序</li>
<li><input disabled="" type="checkbox"> 请求和响应, 以及JSON解析能力</li>
<li><input disabled="" type="checkbox"> Vue基础, 组件使用, props传值, 组件通信, 计算属性使用, 对象引用类型使用</li>
</ul>
<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ol>
<li>能够说出vue组件生命周期</li>
<li>能够掌握axios的使用</li>
<li>能够了解$refs, $nextTick使用和name使用</li>
<li>能够完成购物车案例开发</li>
</ol>
<h2 id="1-vue生命周期"><a href="#1-vue生命周期" class="headerlink" title="1. vue生命周期"></a>1. vue生命周期</h2><h3 id="1-0-人的-生命周期"><a href="#1-0-人的-生命周期" class="headerlink" title="1.0_人的-生命周期"></a>1.0_人的-生命周期</h3><blockquote>
<p>一组件从 创建 到 销毁 的整个过程就是生命周期</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/image-20210111193143574.png" alt="image-20210111193143574"></p>
<p>Vue_生命周期</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/image-20210511152835915.png" alt="image-20210511152835915"></p>
<h3 id="1-1-钩子函数"><a href="#1-1-钩子函数" class="headerlink" title="1.1_钩子函数"></a>1.1_钩子函数</h3><blockquote>
<p>目标: <strong>Vue</strong> 框架内置函数，随着组件的生命周期阶段，自动执行</p>
</blockquote>
<p>作用: 特定的时间点，执行特定的操作</p>
<p>场景: 组件创建完毕后，可以在created 生命周期函数中发起Ajax 请求，从而初始化 data 数据</p>
<p>分类: 4大阶段8个方法</p>
<ul>
<li>初始化</li>
<li>挂载</li>
<li>更新</li>
<li>销毁</li>
</ul>
<table>
<thead>
<tr>
<th><strong>阶段</strong></th>
<th><strong>方法名</strong></th>
<th><strong>方法名</strong></th>
</tr>
</thead>
<tbody><tr>
<td>初始化</td>
<td>beforeCreate</td>
<td>created</td>
</tr>
<tr>
<td>挂载</td>
<td>beforeMount</td>
<td>mounted</td>
</tr>
<tr>
<td>更新</td>
<td>beforeUpdate</td>
<td>updated</td>
</tr>
<tr>
<td>销毁</td>
<td>beforeDestroy</td>
<td>destroyed</td>
</tr>
</tbody></table>
<p><a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">官网文档</a></p>
<p>下图展示了实例的生命周期。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高。</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/Day03.png" alt="Day03"></p>
<h3 id="1-2-初始化阶段"><a href="#1-2-初始化阶段" class="headerlink" title="1.2_初始化阶段"></a>1.2_初始化阶段</h3><blockquote>
<p>目标: 掌握初始化阶段2个钩子函数作用和执行时机</p>
</blockquote>
<p>含义讲解:</p>
<p>1.new Vue() – Vue实例化(组件也是一个小的Vue实例)</p>
<p>2.Init Events &amp; Lifecycle – 初始化事件和生命周期函数</p>
<p>3.beforeCreate – 生命周期钩子函数被执行</p>
<p>4.Init injections&amp;reactivity – Vue内部添加data和methods等</p>
<p>5.created – 生命周期钩子函数被执行, 实例创建</p>
<p>6.接下来是编译模板阶段 –开始分析</p>
<p>7.Has el option? – 是否有el选项 – 检查要挂到哪里</p>
<p>​    没有. 调用$mount()方法</p>
<p>​    有, 继续检查template选项</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/image-20210511153050932.png" alt="image-20210511153050932"></p>
<p>components/Life.vue - 创建一个文件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">"hello, Vue"</span></span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 一. 初始化</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// new Vue()以后, vue内部给实例对象添加了一些属性和方法, data和methods初始化"之前"</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"beforeCreate -- 执行"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.msg); <span class="comment">// undefined</span></span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">    <span class="comment">// data和methods初始化以后</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 场景: 网络请求, 注册全局事件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"created -- 执行"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.msg); <span class="comment">// hello, Vue</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> {</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"哈哈哈"</span>);</span></span><br><span class="line"><span class="javascript">        }, <span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>App.vue - 引入使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;1. 生命周期&lt;/h1&gt;</span><br><span class="line"> 	&lt;Life&gt;&lt;/Life&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Life from './components/Life'</span><br><span class="line">export default {</span><br><span class="line">  components: {</span><br><span class="line">    Life</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="1-3-挂载阶段"><a href="#1-3-挂载阶段" class="headerlink" title="1.3_挂载阶段"></a>1.3_挂载阶段</h3><blockquote>
<p>目标: 掌握挂载阶段2个钩子函数作用和执行时机</p>
</blockquote>
<p>含义讲解:</p>
<p>1.template选项检查</p>
<p>​    有 - 编译template返回render渲染函数</p>
<p>​    无 – 编译el选项对应标签作为template(要渲染的模板)</p>
<p>2.虚拟DOM挂载成真实DOM之前</p>
<p>3.beforeMount – 生命周期钩子函数被执行</p>
<p>4.Create … – 把虚拟DOM和渲染的数据一并挂到真实DOM上</p>
<p>5.真实DOM挂载完毕</p>
<p>6.mounted – 生命周期钩子函数被执行</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/image-20210511153649298.png" alt="image-20210511153649298"></p>
<p>components/Life.vue - 创建一个文件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>学习生命周期 - 看控制台打印<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"myP"</span>&gt;</span>{{ msg }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ...省略其他代码</span></span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 二. 挂载</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 真实DOM挂载之前</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 场景: 预处理data, 不会触发updated钩子函数</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"beforeMount -- 执行"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"myP"</span>)); <span class="comment">// null</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.msg = <span class="string">"重新值"</span></span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 真实DOM挂载以后</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 场景: 挂载后真实DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"mounted -- 执行"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"myP"</span>)); <span class="comment">// p</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="1-4-更新阶段"><a href="#1-4-更新阶段" class="headerlink" title="1.4_更新阶段"></a>1.4_更新阶段</h3><blockquote>
<p>目标: 掌握更新阶段2个钩子函数作用和执行时机</p>
</blockquote>
<p>含义讲解:</p>
<p>1.当data里数据改变, 更新DOM之前</p>
<p>2.beforeUpdate – 生命周期钩子函数被执行</p>
<p>3.Virtual DOM…… – 虚拟DOM重新渲染, 打补丁到真实DOM</p>
<p>4.updated – 生命周期钩子函数被执行</p>
<p>5.当有data数据改变 – 重复这个循环</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/image-20210511154016777.png" alt="image-20210511154016777"></p>
<p>components/Life.vue - 创建一个文件</p>
<p>准备ul+li循环, 按钮添加元素, 触发data改变-&gt;导致更新周期开始</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>学习生命周期 - 看控制台打印<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"myP"</span>&gt;</span>{{ msg }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"myUL"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(val, index) in arr"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">              {{ val }}</span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"arr.push(1000)"</span>&gt;</span>点击末尾加值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">"hello, Vue"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">arr</span>: [<span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>]</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ...省略其他代码</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 三. 更新</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 前提: data数据改变才执行</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 更新之前</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"beforeUpdate -- 执行"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">"#myUL&gt;li"</span>)[<span class="number">4</span>]); <span class="comment">// undefined</span></span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 更新之后</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 场景: 获取更新后的真实DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"updated -- 执行"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">"#myUL&gt;li"</span>)[<span class="number">4</span>]); <span class="comment">// li</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="1-5-销毁阶段"><a href="#1-5-销毁阶段" class="headerlink" title="1.5_销毁阶段"></a>1.5_销毁阶段</h3><blockquote>
<p>目标: 掌握销毁阶段2个钩子函数作用和执行时机</p>
</blockquote>
<p>含义讲解:</p>
<p>1.当$destroy()被调用 – 比如组件DOM被移除(例v-if)</p>
<p>2.beforeDestroy – 生命周期钩子函数被执行</p>
<p>3.拆卸数据监视器、子组件和事件侦听器</p>
<p>4.实例销毁后, 最后触发一个钩子函数</p>
<p>5.destroyed – 生命周期钩子函数被执行</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/image-20210511154330252.png" alt="image-20210511154330252"></p>
<p>components/Life.vue - 准备生命周期方法(Life组件即将要被删除)</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ...省略其他代码</span></span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 四. 销毁</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 前提: v-if="false" 销毁Vue实例</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 场景: 移除全局事件, 移除当前组件, 计时器, 定时器, eventBus移除事件$off方法</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log('beforeDestroy -- 执行');</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log("destroyed -- 执行");</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>主要: App.vue - 点击按钮让Life组件从DOM上移除 -&gt; 导致Life组件进入销毁阶段</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;Life v-if="show"&gt;&lt;/Life&gt;</span><br><span class="line">&lt;button @click="show = false"&gt;销毁组件&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data(){</span><br><span class="line">        return {</span><br><span class="line">            show: true</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-axios"><a href="#2-axios" class="headerlink" title="2. axios"></a>2. axios</h2><h3 id="2-0-axios基本使用"><a href="#2-0-axios基本使用" class="headerlink" title="2.0_axios基本使用"></a>2.0_axios基本使用</h3><p><a href="http://www.axios-js.com/">axios文档</a></p>
<p>特点</p>
<ul>
<li>支持客户端发送Ajax请求</li>
<li>支持服务端Node.js发送请求</li>
<li>支持Promise相关用法</li>
<li>支持请求和响应的拦截器功能</li>
<li>自动转换JSON数据</li>
<li>axios 底层还是原生js实现, 内部通过Promise封装的</li>
</ul>
<p>axios的基本使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">axios({</span><br><span class="line">  <span class="attr">method</span>: <span class="string">'请求方式'</span>, <span class="comment">// get post</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">'请求地址'</span>,</span><br><span class="line">  <span class="attr">data</span>: {    <span class="comment">// 拼接到请求体的参数,  post请求的参数</span></span><br><span class="line">    <span class="attr">xxx</span>: xxx,</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">params</span>: {  <span class="comment">// 拼接到请求行的参数, get请求的参数</span></span><br><span class="line">   	<span class="attr">xxx</span>: xxx </span><br><span class="line">  }</span><br><span class="line">}).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(res.data) <span class="comment">// 后台返回的结果</span></span><br><span class="line">}).catch(<span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(err) <span class="comment">// 后台报错返回</span></span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-1-axios基本使用-获取数据"><a href="#2-1-axios基本使用-获取数据" class="headerlink" title="2.1_axios基本使用-获取数据"></a>2.1_axios基本使用-获取数据</h3><blockquote>
<p>目标: 调用文档最后_获取所有图书信息接口</p>
</blockquote>
<p>功能: 点击调用后台接口, 拿到所有数据 – 打印到控制台</p>
<p>接口: 参考预习资料.md – 接口文档</p>
<p>引入: 下载axios, 引入后才能使用</p>
<p>效果:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/image-20210511154911824.png" alt="image-20210511154911824"></p>
<p>例子如下:</p>
<p>components/UseAxios.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;1. 获取所有图书信息&lt;/p&gt;</span><br><span class="line">    &lt;button @click="getAllFn"&gt;点击-查看控制台&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标1: 获取所有图书信息</span><br><span class="line">// 1. 下载axios</span><br><span class="line">// 2. 引入axios</span><br><span class="line">// 3. 发起axios请求</span><br><span class="line">import axios from "axios";</span><br><span class="line">export default {</span><br><span class="line">  methods: {</span><br><span class="line">    getAllFn() {</span><br><span class="line">      axios({</span><br><span class="line">        url: "http://123.57.109.30:3006/api/getbooks",</span><br><span class="line">        method: "GET", // 默认就是GET方式请求, 可以省略不写</span><br><span class="line">      }).then((res) =&gt; {</span><br><span class="line">        console.log(res);</span><br><span class="line">      });</span><br><span class="line">      // axios()-原地得到Promise对象</span><br><span class="line">    },</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-2-axios基本使用-传参"><a href="#2-2-axios基本使用-传参" class="headerlink" title="2.2_axios基本使用-传参"></a>2.2_axios基本使用-传参</h3><blockquote>
<p>目标: 调用接口-获取某本书籍信息</p>
</blockquote>
<p>功能: 点击调用后台接口, 查询用户想要的书籍信息 – 打印到控制台</p>
<p>接口: 参考预习资料.md – 接口文档</p>
<p>效果:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/image-20210511160538891.png" alt="image-20210511160538891"></p>
<p>例子如下:</p>
<p>components/UseAxios.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;2. 查询某本书籍信息&lt;/p&gt;</span><br><span class="line">    &lt;input type="text" placeholder="请输入要查询 的书名" v-model="bName" /&gt;</span><br><span class="line">    &lt;button @click="findFn"&gt;查询&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from "axios";</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      bName: ""</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    // ...省略了查询所有的代码</span><br><span class="line">    findFn() {</span><br><span class="line">      axios({</span><br><span class="line">        url: "/api/getbooks",</span><br><span class="line">        method: "GET",</span><br><span class="line">        params: { // 都会axios最终拼接到url?后面</span><br><span class="line">            bookname: this.bName</span><br><span class="line">        }</span><br><span class="line">      }).then(res =&gt; {</span><br><span class="line">          console.log(res);</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-3-axios基本使用-发布书籍"><a href="#2-3-axios基本使用-发布书籍" class="headerlink" title="2.3_axios基本使用-发布书籍"></a>2.3_axios基本使用-发布书籍</h3><blockquote>
<p>目标: 完成发布书籍功能</p>
</blockquote>
<p>功能: 点击新增按钮, 把用户输入的书籍信息, 传递给后台 – 把结果打印在控制台</p>
<p>接口: 参考预习资料.md – 接口文档</p>
<p>效果:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/image-20210511161239034.png" alt="image-20210511161239034"></p>
<p>例子如下:</p>
<p>components/UseAxios.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;3. 新增图书信息&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type="text" placeholder="书名" v-model="bookObj.bookname"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type="text" placeholder="作者" v-model="bookObj.author"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type="text" placeholder="出版社" v-model="bookObj.publisher"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button @click="sendFn"&gt;发布&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from "axios";</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      bName: "",</span><br><span class="line">      bookObj: { // 参数名提前和后台的参数名对上-发送请求就不用再次对接了</span><br><span class="line">          bookname: "",</span><br><span class="line">          author: "",</span><br><span class="line">          publisher: ""</span><br><span class="line">      }</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    // ...省略了其他代码</span><br><span class="line">    sendFn(){</span><br><span class="line">       axios({</span><br><span class="line">           url: "/api/addbook",</span><br><span class="line">           method: "POST",</span><br><span class="line">           data: {</span><br><span class="line">               appkey: "7250d3eb-18e1-41bc-8bb2-11483665535a",</span><br><span class="line">               ...this.bookObj</span><br><span class="line">            // 等同于下面</span><br><span class="line">            // bookname: this.bookObj.bookname,</span><br><span class="line">            // author: this.bookObj.author,</span><br><span class="line">            // publisher: this.bookObj.publisher</span><br><span class="line">           }</span><br><span class="line">       }) </span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-4-axios基本使用-全局配置"><a href="#2-4-axios基本使用-全局配置" class="headerlink" title="2.4_axios基本使用-全局配置"></a>2.4_axios基本使用-全局配置</h3><blockquote>
<p>目标: 避免前缀基地址, 暴露在逻辑页面里, 统一设置</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">"http://123.57.109.30:3006"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有请求的url前置可以去掉, 请求时, axios会自动拼接baseURL的地址在前面</span></span><br><span class="line"><span class="function"><span class="title">getAllFn</span>(<span class="params"></span>)</span> {</span><br><span class="line">    axios({</span><br><span class="line">        <span class="attr">url</span>: <span class="string">"/api/getbooks"</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">"GET"</span>, <span class="comment">// 默认就是GET方式请求, 可以省略不写</span></span><br><span class="line">    }).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    });</span><br><span class="line">    <span class="comment">// axios()-原地得到Promise对象</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-nextTick和-refs知识"><a href="#3-nextTick和-refs知识" class="headerlink" title="3. $nextTick和$refs知识"></a>3. $nextTick和$refs知识</h2><h3 id="3-0-refs-获取DOM"><a href="#3-0-refs-获取DOM" class="headerlink" title="3.0 $refs-获取DOM"></a>3.0 $refs-获取DOM</h3><blockquote>
<p>目标: 利用 ref 和 $refs 可以用于获取 dom 元素</p>
</blockquote>
<p>components/More.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;1. 获取原生DOM元素&lt;/p&gt;</span><br><span class="line">      &lt;h1 id="h" ref="myH"&gt;我是一个孤独可怜又能吃的h1&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 获取组件对象</span><br><span class="line">// 1. 创建组件/引入组件/注册组件/使用组件</span><br><span class="line">// 2. 组件起别名ref</span><br><span class="line">// 3. 恰当时机, 获取组件对象</span><br><span class="line">export default {</span><br><span class="line">    mounted(){</span><br><span class="line">        console.log(document.getElementById("h")); // h1</span><br><span class="line">        console.log(this.$refs.myH); // h1</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 通过id / ref, 都可以获取原生DOM标签</p>
</blockquote>
<h3 id="3-1-refs-获取组件对象"><a href="#3-1-refs-获取组件对象" class="headerlink" title="3.1 $refs-获取组件对象"></a>3.1 $refs-获取组件对象</h3><blockquote>
<p>目标: 获取组件对象, 调用组件里方法</p>
</blockquote>
<p>components/Child/Demo.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;我是Demo组件&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">    methods: {</span><br><span class="line">        fn(){</span><br><span class="line">            console.log("demo组件内的方法被调用了");</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>More.vue - 获取组件对象 - 调用组件方法</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;1. 获取原生DOM元素&lt;/p&gt;</span><br><span class="line">      &lt;h1 id="h" ref="myH"&gt;我是一个孤独可怜又能吃的h1&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;2. 获取组件对象 - 可调用组件内一切&lt;/p&gt;</span><br><span class="line">      &lt;Demo ref="de"&gt;&lt;/Demo&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 获取组件对象</span><br><span class="line">// 1. 创建组件/引入组件/注册组件/使用组件</span><br><span class="line">// 2. 组件起别名ref</span><br><span class="line">// 3. 恰当时机, 获取组件对象</span><br><span class="line">import Demo from './Child/Demo'</span><br><span class="line">export default {</span><br><span class="line">    mounted(){</span><br><span class="line">        console.log(document.getElementById("h")); // h1</span><br><span class="line">        console.log(this.$refs.myH); // h1</span><br><span class="line"></span><br><span class="line">        let demoObj = this.$refs.de;</span><br><span class="line">        demoObj.fn()</span><br><span class="line">    },</span><br><span class="line">    components: {</span><br><span class="line">        Demo</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: ref定义值, 通过$refs.值 来获取组件对象, 就能继续调用组件内的变量</p>
</blockquote>
<h3 id="3-2-nextTick使用"><a href="#3-2-nextTick使用" class="headerlink" title="3.2 $nextTick使用"></a>3.2 $nextTick使用</h3><blockquote>
<h4 id="Vue更新DOM-异步的"><a href="#Vue更新DOM-异步的" class="headerlink" title="Vue更新DOM-异步的"></a>Vue更新DOM-异步的</h4></blockquote>
<blockquote>
<p>目标: 点击count++, 马上通过”原生DOM”拿标签内容, 无法拿到新值</p>
</blockquote>
<p>components/Move.vue - 继续新增第三套代码</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;1. 获取原生DOM元素&lt;/p&gt;</span><br><span class="line">      &lt;h1 id="h" ref="myH"&gt;我是一个孤独可怜又能吃的h1&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;2. 获取组件对象 - 可调用组件内一切&lt;/p&gt;</span><br><span class="line">      &lt;Demo ref="de"&gt;&lt;/Demo&gt;</span><br><span class="line">      &lt;p&gt;3. vue更新DOM是异步的&lt;/p&gt;</span><br><span class="line">      &lt;p ref="myP"&gt;{{ count }}&lt;/p&gt;</span><br><span class="line">      &lt;button @click="btn"&gt;点击count+1, 马上提取p标签内容&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 获取组件对象</span><br><span class="line">// 1. 创建组件/引入组件/注册组件/使用组件</span><br><span class="line">// 2. 组件起别名ref</span><br><span class="line">// 3. 恰当时机, 获取组件对象</span><br><span class="line">import Demo from './Child/Demo'</span><br><span class="line">export default {</span><br><span class="line">    mounted(){</span><br><span class="line">        console.log(document.getElementById("h")); // h1</span><br><span class="line">        console.log(this.$refs.myH); // h1</span><br><span class="line"></span><br><span class="line">        let demoObj = this.$refs.de;</span><br><span class="line">        demoObj.fn()</span><br><span class="line">    },</span><br><span class="line">    components: {</span><br><span class="line">        Demo</span><br><span class="line">    },</span><br><span class="line">    data(){</span><br><span class="line">        return {</span><br><span class="line">            count: 0</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        btn(){</span><br><span class="line">            this.count++; // vue监测数据更新, 开启一个DOM更新队列(异步任务)</span><br><span class="line">            console.log(this.$refs.myP.innerHTML); // 0</span><br><span class="line"></span><br><span class="line">            // 原因: Vue更新DOM异步</span><br><span class="line">            // 解决: this.$nextTick()</span><br><span class="line">            // 过程: DOM更新完会挨个触发$nextTick里的函数体</span><br><span class="line">             this.$nextTick(() =&gt; {</span><br><span class="line">                console.log(this.$refs.myP.innerHTML); // 1</span><br><span class="line">            })</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 因为DOM更新是异步的</p>
</blockquote>
<h3 id="3-3-nextTick使用场景"><a href="#3-3-nextTick使用场景" class="headerlink" title="3.3 $nextTick使用场景"></a>3.3 $nextTick使用场景</h3><blockquote>
<p>目标: 点击搜索按钮, 弹出聚焦的输入框, 按钮消失</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/$nextTick%E4%BD%BF%E7%94%A8.gif" alt="$nextTick使用"></p>
<p>components/Tick.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;input ref="myInp" type="text" placeholder="这是一个输入框" v-if="isShow"&gt;</span><br><span class="line">      &lt;button v-else @click="btn"&gt;点击我进行搜索&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 点按钮(消失) - 输入框出现并聚焦</span><br><span class="line">// 1. 获取到输入框</span><br><span class="line">// 2. 输入框调用事件方法focus()达到聚焦行为</span><br><span class="line">export default {</span><br><span class="line">    data(){</span><br><span class="line">        return {</span><br><span class="line">            isShow: false</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        async btn(){</span><br><span class="line">            this.isShow = true;</span><br><span class="line">            // this.$refs.myInp.focus()</span><br><span class="line">            // 原因: data变化更新DOM是异步的</span><br><span class="line">            // 输入框还没有挂载到真实DOM上</span><br><span class="line">            // 解决:</span><br><span class="line">            // this.$nextTick(() =&gt; {</span><br><span class="line">            //     this.$refs.myInp.focus()</span><br><span class="line">            // })</span><br><span class="line">            // 扩展: await取代回调函数</span><br><span class="line">            // $nextTick()原地返回Promise对象</span><br><span class="line">            await this.$nextTick()</span><br><span class="line">            this.$refs.myInp.focus()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-4-组件name属性使用"><a href="#3-4-组件name属性使用" class="headerlink" title="3.4 组件name属性使用"></a>3.4 组件name属性使用</h3><blockquote>
<p>目标: 可以用组件的name属性值, 来注册组件名字</p>
</blockquote>
<p>问题: 组件名不是可以随便写的?</p>
<p>答案: 我们封装的组件-可以自己定义name属性组件名-让使用者有个统一的前缀风格</p>
<p>components/Com.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;我是一个Com组件&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">    name: "ComNameHaHa" // 注册时可以定义自己的名字</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue - 注册和使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;1. 生命周期&lt;/h1&gt;</span><br><span class="line">    &lt;Life v-if="show"&gt;&lt;/Life&gt;</span><br><span class="line">    &lt;button @click="show = false"&gt;销毁组件&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;2. axios使用&lt;/h1&gt;</span><br><span class="line">    &lt;UseAxios&gt;&lt;/UseAxios&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;3. $refs的使用&lt;/h1&gt;</span><br><span class="line">    &lt;More&gt;&lt;/More&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;4. $nextTick使用场景&lt;/h1&gt;</span><br><span class="line">    &lt;Tick&gt;&lt;/Tick&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;5. 组件对象里name属性&lt;/h1&gt;</span><br><span class="line">    &lt;ComNameHaHa&gt;&lt;/ComNameHaHa&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Life from './components/Life'</span><br><span class="line">import UseAxios from './components/UseAxios'</span><br><span class="line">import More from './components/More'</span><br><span class="line">import Tick from './components/Tick'</span><br><span class="line">import Com from './components/Com'</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      show: true</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    Life,</span><br><span class="line">    UseAxios,</span><br><span class="line">    More,</span><br><span class="line">    Tick,</span><br><span class="line">    [Com.name]: Com // 对象里的key是变量的话[]属性名表达式</span><br><span class="line">    // "ComNameHaHa": Com</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-案例-购物车"><a href="#4-案例-购物车" class="headerlink" title="4. 案例 - 购物车"></a>4. 案例 - 购物车</h2><p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%85%A8%E6%95%88%E6%9E%9C.gif" alt="购物车全效果"></p>
<h3 id="4-0-案例-购物车-项目初始化"><a href="#4-0-案例-购物车-项目初始化" class="headerlink" title="4.0 案例-购物车-项目初始化"></a>4.0 案例-购物车-项目初始化</h3><blockquote>
<p>目标: 初始化新项目, 清空不要的东西, 下载bootstrap库, 下载less模块</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vue create shopcar</span><br><span class="line">yarn add bootstrap</span><br><span class="line">yarn add less less-loader@5.0.0 -D</span><br></pre></td></tr></tbody></table></figure>

<p>图示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/image-20210307092110985.png" alt="image-20210307092110985"></p>
<ol>
<li>按照需求, 把项目页面拆分成几个组件, 在components下创建</li>
</ol>
<ul>
<li><p>MyHeader组件</p>
</li>
<li><p>MyFooter组件</p>
</li>
<li><p>MyGoods组件 - 商品</p>
</li>
<li><p>MyCount组件</p>
</li>
</ul>
<ol start="2">
<li><p>然后引入到App.vue上注册</p>
</li>
<li><p>在main.js中引入bootStrap库</p>
</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"bootstrap/dist/css/bootstrap.css"</span> <span class="comment">// 引入第三方包里的某个css文件</span></span><br></pre></td></tr></tbody></table></figure>

<p>MyHeader.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-header"&gt;购物车案例&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scoped&gt;</span><br><span class="line">  .my-header {</span><br><span class="line">    height: 45px;</span><br><span class="line">    line-height: 45px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    background-color: #1d7bff;</span><br><span class="line">    color: #fff;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    z-index: 2;</span><br><span class="line">  }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>MyGoods.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-goods-item"&gt;</span><br><span class="line">    &lt;div class="left"&gt;</span><br><span class="line">      &lt;div class="custom-control custom-checkbox"&gt;</span><br><span class="line">        &lt;input type="checkbox" class="custom-control-input" id="input"</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;label class="custom-control-label" for="input"&gt;</span><br><span class="line">          &lt;img src="http://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg" alt=""&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="right"&gt;</span><br><span class="line">      &lt;div class="top"&gt;商品名字&lt;/div&gt;</span><br><span class="line">      &lt;div class="bottom"&gt;</span><br><span class="line">        &lt;span class="price"&gt;¥ 100&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            数量组件</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scoped&gt;</span><br><span class="line">.my-goods-item {</span><br><span class="line">  display: flex;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  border-bottom: 1px solid #ccc;</span><br><span class="line">  .left {</span><br><span class="line">    img {</span><br><span class="line">      width: 120px;</span><br><span class="line">      height: 120px;</span><br><span class="line">      margin-right: 8px;</span><br><span class="line">      border-radius: 10px;</span><br><span class="line">    }</span><br><span class="line">    .custom-control-label::before,</span><br><span class="line">    .custom-control-label::after {</span><br><span class="line">      top: 50px;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  .right {</span><br><span class="line">    flex: 1;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    .top{</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        font-weight: 700;</span><br><span class="line">    }</span><br><span class="line">    .bottom {</span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: space-between;</span><br><span class="line">      padding: 5px 0;</span><br><span class="line">      align-items: center;</span><br><span class="line">      .price {</span><br><span class="line">        color: red;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>目标: 完成商品组件右下角商品组件的开发</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/image-20210223135638409.png" alt="image-20210223135638409"></p>
<p>components/MyCount.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-counter"&gt;</span><br><span class="line">    &lt;button type="button" class="btn btn-light" &gt;-&lt;/button&gt;</span><br><span class="line">    &lt;input type="number" class="form-control inp" &gt;</span><br><span class="line">    &lt;button type="button" class="btn btn-light"&gt;+&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scoped&gt;</span><br><span class="line">.my-counter {</span><br><span class="line">  display: flex;</span><br><span class="line">  .inp {</span><br><span class="line">    width: 45px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin: 0 10px;</span><br><span class="line">  }</span><br><span class="line">  .btn, .inp{</span><br><span class="line">    transform: scale(0.9);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>components/MyFooter.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 底部 --&gt;</span><br><span class="line">  &lt;div class="my-footer"&gt;</span><br><span class="line">    &lt;!-- 全选 --&gt;</span><br><span class="line">    &lt;div class="custom-control custom-checkbox"&gt;</span><br><span class="line">      &lt;input type="checkbox" class="custom-control-input" id="footerCheck"&gt;</span><br><span class="line">      &lt;label class="custom-control-label" for="footerCheck"&gt;全选&lt;/label&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 合计 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;合计:&lt;/span&gt;</span><br><span class="line">      &lt;span class="price"&gt;¥ 0&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 按钮 --&gt;</span><br><span class="line">    &lt;button type="button" class="footer-btn btn btn-primary"&gt;结算 ( 0 )&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  </span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scoped&gt;</span><br><span class="line">.my-footer {</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 2;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border-top: 1px solid #ccc;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  padding: 0 10px;</span><br><span class="line">  background: #fff;</span><br><span class="line"></span><br><span class="line">  .price {</span><br><span class="line">    color: red;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  }</span><br><span class="line">  .footer-btn {</span><br><span class="line">    min-width: 80px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    border-radius: 25px;</span><br><span class="line">    padding: 0;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-1-案例-购物车-头部自定义"><a href="#4-1-案例-购物车-头部自定义" class="headerlink" title="4.1 案例-购物车-头部自定义"></a>4.1 案例-购物车-头部自定义</h3><blockquote>
<p>目的: 头部的标题, 颜色, 背景色可以随便修改, props类型的校验</p>
</blockquote>
<p>思路</p>
<ol>
<li>在MyHeader.vue中准备props里变量, 然后使用</li>
<li>在使用MyHeader.vue组件时, 传入相应的值 (color和backgroundColor)</li>
</ol>
<p>MyHeader.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-header" :style="{backgroundColor: background, color}"&gt;{{ title }}&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 让Header组件支持不同的项目 - 自定义</span><br><span class="line">// 1. 分析哪些可以自定义 (背景色, 文字颜色, 文字内容)</span><br><span class="line">// 2. (新) 可以对props的变量的值 进行校验</span><br><span class="line">// 3. 内部使用props变量的值</span><br><span class="line">// 4. 外部使用时, 遵守变量名作为属性名, 值的类型遵守</span><br><span class="line">export default {</span><br><span class="line">    props: {</span><br><span class="line">        background: String, // 外部插入此变量的值, 必须是字符串类型, 否则报错</span><br><span class="line">        color: {</span><br><span class="line">            type: String, // 约束color值的类型</span><br><span class="line">            default: "#fff" // color变量默认值(外部不给 我color传值, 使用默认值)</span><br><span class="line">        },</span><br><span class="line">        title: {</span><br><span class="line">            type: String,</span><br><span class="line">            required: true // 必须传入此变量的值</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scoped&gt;</span><br><span class="line">  .my-header {</span><br><span class="line">    height: 45px;</span><br><span class="line">    line-height: 45px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    background-color: #1d7bff;</span><br><span class="line">    color: #fff;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    z-index: 2;</span><br><span class="line">  }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue传入相应自定义的值</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;MyHeader title="购物车案例"&gt;&lt;/MyHeader&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结:  </p>
<p>props: [] - 只能声明变量和接收, 不能类型校验</p>
<p>props: {} - 声明变量和校验类型规则 - 外部传入值不对则报错</p>
</blockquote>
<h3 id="4-2-案例-购物车-请求数据"><a href="#4-2-案例-购物车-请求数据" class="headerlink" title="4.2 案例-购物车-请求数据"></a>4.2 案例-购物车-请求数据</h3><blockquote>
<p>目标: 使用axios把数据请求回来</p>
</blockquote>
<p>数据地址: <a href="https://www.escook.cn/api/cart">https://www.escook.cn/api/cart</a>  (get方式)</p>
<ol>
<li>下载axios</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yarn add axios</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>main.js - 原型上挂载</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 目标: 请求数据 - 打印</span></span><br><span class="line"><span class="comment">// 1. 下载axios库, main.js - 全局绑定属性 (确保任意.vue文件可以都访问到这个axios方法)</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">// 2. 基础地址</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">"https://www.escook.cn"</span></span><br><span class="line"><span class="comment">// 3. axios方法添加到Vue的原型上</span></span><br><span class="line">Vue.prototype.$axios = axios</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">}).$mount(<span class="string">'#app'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>App.vue请求使用</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      list: [] // 商品所有数据</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  created(){</span><br><span class="line">    // 不必在自己引入axios变量, 而是直接使用全局属性$axios</span><br><span class="line">    this.$axios({</span><br><span class="line">      url: "/api/cart"</span><br><span class="line">    }).then(res =&gt; {</span><br><span class="line">      console.log(res);</span><br><span class="line">      this.list = res.data.list</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 利用axios, 调用接口, 把数据请求回来</p>
</blockquote>
<h3 id="4-3-案例-购物车-数据渲染"><a href="#4-3-案例-购物车-数据渲染" class="headerlink" title="4.3 案例-购物车-数据渲染"></a>4.3 案例-购物车-数据渲染</h3><blockquote>
<p>目标: 把上面请求的数据, 铺设到页面上</p>
</blockquote>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;MyGoods v-for="obj in list" </span><br><span class="line">         :key="obj.id"</span><br><span class="line">         :gObj="obj"</span><br><span class="line">&gt;&lt;/MyGoods&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>MyGoods.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-goods-item"&gt;</span><br><span class="line">    &lt;div class="left"&gt;</span><br><span class="line">      &lt;div class="custom-control custom-checkbox"&gt;</span><br><span class="line">        &lt;!-- *重要:</span><br><span class="line">          每个对象和组件都是独立的</span><br><span class="line">          对象里的goods_state关联自己对应商品的复选框</span><br><span class="line">         --&gt;</span><br><span class="line">         &lt;!-- bug:</span><br><span class="line">          循环的所有label的for都是input, id也都是input - 默认只有第一个生效</span><br><span class="line">          解决: 每次对象里的id值(1, 2), 分别给id和for使用即可区分</span><br><span class="line">          --&gt;</span><br><span class="line">        &lt;input type="checkbox" class="custom-control-input" :id="gObj.id"</span><br><span class="line">        v-model="gObj.goods_state"</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;label class="custom-control-label" :for="gObj.id"&gt;</span><br><span class="line">          &lt;img :src="gObj.goods_img" alt=""&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="right"&gt;</span><br><span class="line">      &lt;div class="top"&gt;{{ gObj.goods_name }}&lt;/div&gt;</span><br><span class="line">      &lt;div class="bottom"&gt;</span><br><span class="line">        &lt;span class="price"&gt;¥ {{ gObj.goods_price }}&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            &lt;MyCount :obj="gObj"&gt;&lt;/MyCount&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyCount from './MyCount'</span><br><span class="line">export default {</span><br><span class="line">    props: {</span><br><span class="line">      gObj: Object</span><br><span class="line">    },</span><br><span class="line">    components: {</span><br><span class="line">        MyCount</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>MyCount.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-counter"&gt;</span><br><span class="line">    &lt;button type="button" class="btn btn-light" &gt;-&lt;/button&gt;</span><br><span class="line">    &lt;input type="number" class="form-control inp" v-model.number="obj.goods_count"&gt;</span><br><span class="line">    &lt;button type="button" class="btn btn-light" &gt;+&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  props: {</span><br><span class="line">    obj: Object // 商品对象</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 把各个组件关联起来, 把数据都铺设到页面上</p>
</blockquote>
<h3 id="4-4-案例-购物车-商品选中"><a href="#4-4-案例-购物车-商品选中" class="headerlink" title="4.4 案例-购物车-商品选中"></a>4.4 案例-购物车-商品选中</h3><blockquote>
<p>问题: 点击发现总是第一个被选中</p>
</blockquote>
<p>原来id和for都是”input”</p>
<p>但是id是唯一的啊, 所以用数据的id来作为标签的id, 分别独立, 为了兼容label点击图片也能选中的效果</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;input type="checkbox" class="custom-control-input" :id="gObj.id"</span><br><span class="line">       v-model="gObj.goods_state"</span><br><span class="line">       &gt;</span><br><span class="line">&lt;label class="custom-control-label" :for="gObj.id"&gt;</span><br><span class="line">    &lt;img :src="gObj.goods_img" alt=""&gt;</span><br><span class="line">&lt;/label&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: lable的for值对应input的id, 点击label就能让对应input处于激活</p>
</blockquote>
<h3 id="4-5-案例-购物车-数量控制"><a href="#4-5-案例-购物车-数量控制" class="headerlink" title="4.5 案例-购物车-数量控制"></a>4.5 案例-购物车-数量控制</h3><blockquote>
<p>目标: 点击+和-或者直接修改输入框的值影响商品购买的数量</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-counter"&gt;</span><br><span class="line">    &lt;button type="button" class="btn btn-light" :disabled="obj.goods_count === 1" @click="obj.goods_count &gt; 1 &amp;&amp; obj.goods_count--"&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;input type="number" class="form-control inp" v-model.number="obj.goods_count"&gt;</span><br><span class="line">    &lt;button type="button" class="btn btn-light" @click="obj.goods_count++"&gt;+&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 商品数量 - 控制</span><br><span class="line">// 1. 外部传入数据对象</span><br><span class="line">// 2. v-model关联对象的goods_count属性和输入框 (双向绑定)</span><br><span class="line">// 3. 商品按钮 +和-, 商品数量最少1件</span><br><span class="line">// 4. 侦听数量改变, 小于1, 直接强制覆盖1</span><br><span class="line">export default {</span><br><span class="line">  props: {</span><br><span class="line">    obj: Object // 商品对象</span><br><span class="line">  },</span><br><span class="line">  // 因为数量控制要通过对象"互相引用的关系"来影响外面对象里的数量值, 所以最好传 对象进来</span><br><span class="line">  watch: {</span><br><span class="line">    obj: {</span><br><span class="line">      deep: true,</span><br><span class="line">      handler(){ // 拿到商品数量, 判断小于1, 强制修改成1</span><br><span class="line">        if (this.obj.goods_count &lt; 1) {</span><br><span class="line">          this.obj.goods_count = 1</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>



<h3 id="4-6-案例-购物车-全选功能"><a href="#4-6-案例-购物车-全选功能" class="headerlink" title="4.6 案例-购物车-全选功能"></a>4.6 案例-购物车-全选功能</h3><blockquote>
<p>目标: 在底部组件上, 完成全选功能</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%804-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/image-20210223141427684.png" alt="image-20210223141427684"></p>
<p>思路: </p>
<ol>
<li>点击获取它的选中状态</li>
<li>同步给上面每个小选框 - 而小选框的选中状态又在数组里</li>
<li>把数组传给MyFooter, 然后更新即可 - 因为对象都是引用关系的</li>
</ol>
<p>MyFooter.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 底部 --&gt;</span><br><span class="line">  &lt;div class="my-footer"&gt;</span><br><span class="line">    &lt;!-- 全选 --&gt;</span><br><span class="line">    &lt;div class="custom-control custom-checkbox"&gt;</span><br><span class="line">      &lt;input type="checkbox" class="custom-control-input" id="footerCheck" v-model="isAll"&gt;</span><br><span class="line">      &lt;label class="custom-control-label" for="footerCheck"&gt;全选&lt;/label&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 合计 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;合计:&lt;/span&gt;</span><br><span class="line">      &lt;span class="price"&gt;¥ {{ allPrice }}&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 按钮 --&gt;</span><br><span class="line">    &lt;button type="button" class="footer-btn btn btn-primary"&gt;结算 ( {{ allCount }} )&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 全选</span><br><span class="line">// 1. v-model关联全选-复选框(v-model后变量计算属性)</span><br><span class="line">// 2. 页面(视频层)v(true) -&gt; 数据层(变量-) 计算属性(完整写法)</span><br><span class="line">// 3. 把全选 true/false同步给所有小选框选中状态上</span><br><span class="line"></span><br><span class="line">// 小选  -&gt; 全选</span><br><span class="line">// App.vue里list数组 -&gt; MyFooter.vue</span><br><span class="line">// isAll的get方法里, 统计状态影响全选框</span><br><span class="line"></span><br><span class="line">// 目标: 总数量统计</span><br><span class="line">// 1. allCount计算属性用 数组reduce+判断统计数量并返回</span><br><span class="line"></span><br><span class="line">// 目标: 总价</span><br><span class="line">// allPrice计算属性, 数组reduce+单价*数量, 判断选中, 才累加后返回</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  props: {</span><br><span class="line">    arr: Array</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    isAll: {</span><br><span class="line">      set(val){ // val就是关联表单的值(true/false)</span><br><span class="line">        this.$emit('changeAll', val)</span><br><span class="line">      },</span><br><span class="line">      get(){</span><br><span class="line">        // 查找小选框关联的属性有没有不符合勾选的条件</span><br><span class="line">        // 直接原地false</span><br><span class="line">        return this.arr.every(obj =&gt; obj.goods_state === true)</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;MyFooter @changeAll="allFn" :arr="list"&gt;&lt;/MyFooter&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: {</span><br><span class="line">    allFn(bool){</span><br><span class="line">      this.list.forEach(obj =&gt; obj.goods_state = bool)</span><br><span class="line">      // 把MyFooter内的全选状态true/false同步给所有小选框的关联属性上</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 全选的v-model的值, 使用计算属性完整写法</p>
</blockquote>
<h3 id="4-7-案例-购物车-总数量"><a href="#4-7-案例-购物车-总数量" class="headerlink" title="4.7 案例-购物车-总数量"></a>4.7 案例-购物车-总数量</h3><blockquote>
<p>目标: 完成底部组件, 显示选中的商品的总数量</p>
</blockquote>
<p>MyFooter.vue</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">allCount</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.arr.reduce(<span class="function">(<span class="params">sum, obj</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span> (obj.goods_state === <span class="literal">true</span>) { <span class="comment">// 选中商品才累加数量</span></span><br><span class="line">            sum += obj.goods_count;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }, <span class="number">0</span>)</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 对象之间是引用关系, 对象值改变, 所有用到的地方都跟着改变</p>
</blockquote>
<h3 id="4-8-案例-购物车-总价"><a href="#4-8-案例-购物车-总价" class="headerlink" title="4.8 案例-购物车-总价"></a>4.8 案例-购物车-总价</h3><blockquote>
<p>目标: 完成选中商品计算价格</p>
</blockquote>
<p>components/MyFooter.vue</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">allPrice</span>(<span class="params"></span>)</span>{</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.arr.reduce(<span class="function">(<span class="params">sum, obj</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span> (obj.goods_state){</span><br><span class="line">          sum += obj.goods_count * obj.goods_price</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">      }, <span class="number">0</span>)</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 把数组传给了MyFooter组件, 统计总价</p>
</blockquote>
<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><p>vue的生命周期哪4个阶段, 哪8个方法</p>
<p>axios是什么, 底层是什么, 具体如何使用</p>
<p>axios返回的是什么, 如何接收结果</p>
<p>知道ref和$refs使用和作用以及场景</p>
<p>知道$nextTick的作用</p>
<p>跟着老师的视频完成购物车案例</p>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1、Vue-的-nextTick-的原理是什么-（高薪常问）"><a href="#1、Vue-的-nextTick-的原理是什么-（高薪常问）" class="headerlink" title="1、Vue 的 nextTick 的原理是什么? （高薪常问）"></a>1、Vue 的 nextTick 的原理是什么? （高薪常问）</h3><p>​    \1. 为什么需要 nextTick ，Vue 是异步修改 DOM 的并且不鼓励开发者直接接触 DOM，但有时候业务需要必须对数据更改–刷新后的 DOM 做相应的处理，这时候就可以使用 Vue.nextTick(callback)这个 api 了。</p>
<p>​    \2. 理解原理前的准备 首先需要知道事件循环中宏任务和微任务这两个概念,常见的宏任务有 script, setTimeout, setInterval, setImmediate, I/O, UI rendering 常见的微任务有 process.nextTick(Nodejs),Promise.then(), MutationObserver;</p>
<p>​    \3. 理解 nextTick 的原理正是 vue 通过异步队列控制 DOM 更新和 nextTick 回调函数先后执行的方式。如果大家看过这部分的源码，会发现其中做了很多 isNative()的判断，因为这里还存在兼容性优雅降级的问题。可见 Vue 开发团队的深思熟虑，对性能的良苦用心。</p>
<h3 id="2、vue生命周期总共分为几个阶段？（必会）"><a href="#2、vue生命周期总共分为几个阶段？（必会）" class="headerlink" title="2、vue生命周期总共分为几个阶段？（必会）"></a>2、vue生命周期总共分为几个阶段？（必会）</h3><p>   Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p>
<p><strong>1****）beforeCreate</strong></p>
<p>​    在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p>
<p><strong>2****）created</strong></p>
<p>​    在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)， 属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>
<p><strong>3****）beforeMount</strong></p>
<p>​    在挂载开始之前被调用：相关的 render 函数首次被调用。</p>
<p><strong>4****）mounted</strong></p>
<p>​    el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p>
<p><strong>5****）beforeUpdate</strong></p>
<p>​    数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</p>
<p><strong>6****）updated</strong></p>
<p>​    由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>
<p><strong>7****）activated</strong></p>
<p>​    keep-alive 组件激活时调用。该钩子在服务器端渲染期间不被调用。</p>
<p><strong>8****）deactivated</strong></p>
<p>​    keep-alive 组件停用时调用。该钩子在服务器端渲染期间不被调用。</p>
<p><strong>9****）beforeDestroy</strong></p>
<p>​    实例销毁之前调用。在这一步，实例仍然完全可用。该钩子在服务器端渲染期间不被调用。</p>
<p><strong>10****）destroyed</strong></p>
<p>​    Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p>
<p><strong>11****）errorCaptured（2.5.0+ 新增）</strong></p>
<p>​    当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p>
<h3 id="3、第一次加载页面会触发哪几个钩子函数？（必会）"><a href="#3、第一次加载页面会触发哪几个钩子函数？（必会）" class="headerlink" title="3、第一次加载页面会触发哪几个钩子函数？（必会）"></a>3、第一次加载页面会触发哪几个钩子函数？（必会）</h3><p>   当页面第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子函数</p>
<h2 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h2><p>把课上购物车再来一遍</p>
<h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><blockquote>
<p>axios请求接口使用</p>
</blockquote>
<p>根域名: <a href="http://123.57.109.30:3006/">http://123.57.109.30:3006</a></p>
<h3 id="案例-图书相关"><a href="#案例-图书相关" class="headerlink" title="案例 - 图书相关"></a>案例 - 图书相关</h3><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><ul>
<li>请求方式:  GET</li>
<li>请求地址: 根域名/api/getbooks</li>
<li>请求参数: </li>
</ul>
<p>不传参获取所有默认书籍, 也可以选择传递下面任意1-多个参数, 获取指定的相关书籍信息</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数类型</th>
<th>是否必选</th>
<th>参数说明</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>Number</td>
<td>否</td>
<td>图书Id</td>
</tr>
<tr>
<td>bookname</td>
<td>String</td>
<td>否</td>
<td>图书名称</td>
</tr>
<tr>
<td>author</td>
<td>String</td>
<td>否</td>
<td>作者</td>
</tr>
<tr>
<td>publisher</td>
<td>String</td>
<td>否</td>
<td>出版社</td>
</tr>
<tr>
<td>appkey</td>
<td>String</td>
<td>否</td>
<td>个人ID</td>
</tr>
</tbody></table>
<ul>
<li>返回示例:</li>
</ul>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">200</span>, <span class="comment">// 状态码200都代表完全成功 - 无任何意义随便写, 只是方便前端写判断条件</span></span><br><span class="line">  <span class="attr">"msg"</span>: <span class="string">"获取图书列表成功"</span>, <span class="comment">// 后台返回的提示消息, 随便写, 只是方便前端直接打印提示消息</span></span><br><span class="line">  <span class="attr">"data"</span>: [ <span class="comment">// 后台返回的数据</span></span><br><span class="line">    { <span class="attr">"id"</span>: <span class="number">1</span>, <span class="attr">"bookname"</span>: <span class="string">"西游记"</span>, <span class="attr">"author"</span>: <span class="string">"吴承恩"</span>, <span class="attr">"publisher"</span>: <span class="string">"北京图书出版社"</span> },</span><br><span class="line">    { <span class="attr">"id"</span>: <span class="number">2</span>, <span class="attr">"bookname"</span>: <span class="string">"红楼梦"</span>, <span class="attr">"author"</span>: <span class="string">"曹雪芹"</span>, <span class="attr">"publisher"</span>: <span class="string">"上海图书出版社"</span> },</span><br><span class="line">    { <span class="attr">"id"</span>: <span class="number">3</span>, <span class="attr">"bookname"</span>: <span class="string">"三国演义"</span>, <span class="attr">"author"</span>: <span class="string">"罗贯中"</span>, <span class="attr">"publisher"</span>: <span class="string">"北京图书出版社"</span> }</span><br><span class="line">  ]</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><ul>
<li>请求方式: POST</li>
<li>请求地址: 根域名/api/addbook</li>
<li>请求参数:</li>
</ul>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数类型</th>
<th>是否必选</th>
<th>参数说明</th>
</tr>
</thead>
<tbody><tr>
<td>bookname</td>
<td>String</td>
<td>是</td>
<td>图书名称</td>
</tr>
<tr>
<td>author</td>
<td>String</td>
<td>是</td>
<td>作者</td>
</tr>
<tr>
<td>publisher</td>
<td>String</td>
<td>是</td>
<td>出版社</td>
</tr>
<tr>
<td>appkey</td>
<td>String</td>
<td>是</td>
<td>个人ID - 用’7250d3eb-18e1-41bc-8bb2-11483665535a’</td>
</tr>
</tbody></table>
<ul>
<li>返回示例:</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"status"</span>: <span class="number">201</span>, <span class="comment">// 后台返回数据逻辑层的状态码, 201代表后台已经新增加了一个资源</span></span><br><span class="line">    <span class="string">"data"</span>: {</span><br><span class="line">        <span class="string">"author"</span>: <span class="string">"施大神"</span></span><br><span class="line">        <span class="string">"bookname"</span>: <span class="string">"水浒传2"</span></span><br><span class="line">        <span class="string">"id"</span>: <span class="number">41</span></span><br><span class="line">        <span class="string">"publisher"</span>: <span class="string">"未来出版社"</span></span><br><span class="line">    }</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"添加图书成功"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础5-动态组件_插槽_自定义指令</title>
    <url>/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="自测"><a href="#自测" class="headerlink" title="自测"></a>自测</h2><ul>
<li><input disabled="" type="checkbox"> ==组件创建, 注册和使用 - 伸手就来特别熟练==</li>
<li><input disabled="" type="checkbox"> 指令的作用</li>
</ul>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol>
<li>能够了解组件进阶知识</li>
<li>能够掌握自定义指令创建和使用</li>
<li>能够完成tabbar案例的开发</li>
</ol>
<h2 id="1-组件进阶"><a href="#1-组件进阶" class="headerlink" title="1. 组件进阶"></a>1. 组件进阶</h2><h3 id="1-0-组件进阶-动态组件"><a href="#1-0-组件进阶-动态组件" class="headerlink" title="1.0 组件进阶 - 动态组件"></a>1.0 组件进阶 - 动态组件</h3><blockquote>
<p>目标: 多个组件使用同一个挂载点，并动态切换，这就是动态组件</p>
</blockquote>
<p>需求: 完成一个注册功能页面, 2个按钮切换, 一个填写注册信息, 一个填写用户简介信息</p>
<p>效果如下:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6.gif" alt="动态组件"></p>
<ol>
<li><p>准备被切换的 - UserName.vue / UserInfo.vue 2个组件</p>
</li>
<li><p>引入到UseDynamic.vue注册</p>
</li>
<li><p>准备变量来承载要显示的”组件名”</p>
</li>
<li><p>设置挂载点<component>, 使用is属性来设置要显示哪个组件</component></p>
</li>
<li><p>点击按钮 – 修改comName变量里的”组件名”</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;button @click="comName = 'UserName'"&gt;账号密码填写&lt;/button&gt;</span><br><span class="line">      &lt;button @click="comName = 'UserInfo'"&gt;个人信息填写&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;下面显示注册组件-动态切换:&lt;/p&gt;</span><br><span class="line">      &lt;div style="border: 1px solid red;"&gt;</span><br><span class="line">          &lt;component :is="comName"&gt;&lt;/component&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 动态组件 - 切换组件显示</span><br><span class="line">// 场景: 同一个挂载点要切换 不同组件 显示</span><br><span class="line">// 1. 创建要被切换的组件 - 标签+样式</span><br><span class="line">// 2. 引入到要展示的vue文件内, 注册</span><br><span class="line">// 3. 变量-承载要显示的组件名</span><br><span class="line">// 4. 设置挂载点&lt;component :is="变量"&gt;&lt;/component&gt;</span><br><span class="line">// 5. 点击按钮-切换comName的值为要显示的组件名</span><br><span class="line"></span><br><span class="line">import UserName from '../components/01/UserName'</span><br><span class="line">import UserInfo from '../components/01/UserInfo'</span><br><span class="line">export default {</span><br><span class="line">    data(){</span><br><span class="line">        return {</span><br><span class="line">            comName: "UserName"</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    components: {</span><br><span class="line">        UserName,</span><br><span class="line">        UserInfo</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>在App.vue - 引入01_UseDynamic.vue并使用显示</p>
<blockquote>
<p>总结: vue内置component组件, 配合is属性, 设置要显示的组件名字</p>
</blockquote>
<h3 id="1-1-组件进阶-组件缓存"><a href="#1-1-组件进阶-组件缓存" class="headerlink" title="1.1 组件进阶 - 组件缓存"></a>1.1 组件进阶 - 组件缓存</h3><blockquote>
<p>目标: 组件切换会导致组件被频繁销毁和重新创建, 性能不高</p>
</blockquote>
<p>使用Vue内置的keep-alive组件, 可以让包裹的组件保存在内存中不被销毁</p>
<p>演示1: 可以先给UserName.vue和UserInfo.vue 注册created和destroyed生命周期事件, 观察创建和销毁过程</p>
<p>演示2: 使用keep-alive内置的vue组件, 让动态组件缓存而不是销毁</p>
<p>语法:</p>
<p>​        Vue内置的keep-alive组件 包起来要频繁切换的组件</p>
<p>02_UseDynamic.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div style="border: 1px solid red;"&gt;</span><br><span class="line">    &lt;!-- Vue内置keep-alive组件, 把包起来的组件缓存起来 --&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">        &lt;component :is="comName"&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>补充生命周期:</p>
<ul>
<li>activated - 激活</li>
<li>deactivated - 失去激活状态</li>
</ul>
<blockquote>
<p>总结: keep-alive可以提高组件的性能, 内部包裹的标签不会被销毁和重新创建, 触发激活和非激活的生命周期方法</p>
</blockquote>
<h3 id="1-2-组件进阶-激活和非激活"><a href="#1-2-组件进阶-激活和非激活" class="headerlink" title="1.2 组件进阶 - 激活和非激活"></a>1.2 组件进阶 - 激活和非激活</h3><blockquote>
<p>目标: 被缓存的组件不再创建和销毁, 而是激活和非激活</p>
</blockquote>
<p>补充2个钩子方法名:</p>
<p>​    activated – 激活时触发</p>
<p>​    deactivated – 失去激活状态触发</p>
<h3 id="1-3-组件进阶-组件插槽"><a href="#1-3-组件进阶-组件插槽" class="headerlink" title="1.3 组件进阶 - 组件插槽"></a>1.3 组件进阶 - 组件插槽</h3><blockquote>
<p>目标: 用于实现组件的内容分发, 通过 slot 标签, 可以接收到写在组件标签内的内容</p>
</blockquote>
<p>vue提供组件插槽能力, 允许开发者在封装组件时，把不确定的部分定义为插槽</p>
<p>插槽例子:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/1ddad96d-f925-452b-8c40-85288fc2cbc4.gif" alt="1ddad96d-f925-452b-8c40-85288fc2cbc4"></p>
<p>需求: 以前折叠面板案例, 想要实现不同内容显示, 我们把折叠面板里的Pannel组件, 添加组件插槽方式</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/image-20210307110014556.png" alt="image-20210307110014556"></p>
<p>语法口诀: </p>
<ol>
<li>组件内用<slot></slot>占位</li>
<li>使用组件时<pannel></pannel>夹着的地方, 传入标签替换slot</li>
</ol>
<p>03/Pannel.vue - 组件(直接复制)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 按钮标题 --&gt;</span><br><span class="line">    &lt;div class="title"&gt;</span><br><span class="line">      &lt;h4&gt;芙蓉楼送辛渐&lt;/h4&gt;</span><br><span class="line">      &lt;span class="btn" @click="isShow = !isShow"&gt;</span><br><span class="line">        {{ isShow ? "收起" : "展开" }}</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 下拉内容 --&gt;</span><br><span class="line">    &lt;div class="container" v-show="isShow"&gt;</span><br><span class="line">          &lt;p&gt;寒雨连江夜入吴,&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;平明送客楚山孤。&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;洛阳亲友如相问，&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;一片冰心在玉壶。&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      isShow: false,</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h3 {</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.title {</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  padding: 0 1em;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.title h4 {</span><br><span class="line">  line-height: 2;</span><br><span class="line">  margin: 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.container {</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  padding: 0 1em;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.btn {</span><br><span class="line">  /* 鼠标改成手的形状 */</span><br><span class="line">  cursor: pointer;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">img {</span><br><span class="line">  width: 50%;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>views/03_UserSlot.vue - 使用组件(==直接复制==)</p>
<p>框: 在这个基础重复使用组件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="container"&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">      &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app {</span><br><span class="line">  width: 400px;</span><br><span class="line">  margin: 20px auto;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  border: 4px solid blueviolet;</span><br><span class="line">  border-radius: 1em;</span><br><span class="line">  box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.5);</span><br><span class="line">  padding: 1em 2em 2em;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>views/03_UseSlot.vue - 组件插槽使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="container"&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">      &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">      &lt;Pannel&gt;</span><br><span class="line">          &lt;img src="../assets/mm.gif" alt=""&gt;</span><br><span class="line">          &lt;span&gt;我是内容&lt;/span&gt;</span><br><span class="line">      &lt;/Pannel&gt;</span><br><span class="line">      &lt;Pannel&gt;</span><br><span class="line">          &lt;p&gt;寒雨连江夜入吴,&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;平明送客楚山孤。&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;洛阳亲友如相问，&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;一片冰心在玉壶。&lt;/p&gt;</span><br><span class="line">      &lt;/Pannel&gt;</span><br><span class="line">      &lt;Pannel&gt;&lt;/Pannel&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Pannel from "../components/03/Pannel";</span><br><span class="line">export default {</span><br><span class="line">  components: {</span><br><span class="line">    Pannel,</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 组件内容分发技术, slot占位, 使用组件时传入替换slot位置的标签</p>
</blockquote>
<h3 id="1-4-组件进阶-插槽默认内容"><a href="#1-4-组件进阶-插槽默认内容" class="headerlink" title="1.4 组件进阶 - 插槽默认内容"></a>1.4 组件进阶 - 插槽默认内容</h3><blockquote>
<p>目标: 如果外面不给传, 想给个默认显示内容</p>
</blockquote>
<p>口诀: <slot>夹着内容默认显示内容, 如果不给插槽slot传东西, 则使用<slot>夹着的内容在原地显示</slot></slot></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;slot&gt;默认内容&lt;/slot&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="1-5-组件进阶-具名插槽"><a href="#1-5-组件进阶-具名插槽" class="headerlink" title="1.5 组件进阶 - 具名插槽"></a>1.5 组件进阶 - 具名插槽</h3><blockquote>
<p>目标: 当一个组件内有2处以上需要外部传入标签的地方</p>
</blockquote>
<p>传入的标签可以分别派发给不同的slot位置</p>
<p>要求: v-slot一般用跟template标签使用 (template是html5新出标签内容模板元素, 不会渲染到页面上, 一般被vue解析内部标签)</p>
<p>components/04/Pannel.vue - 留下具名slot</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 按钮标题 --&gt;</span><br><span class="line">    &lt;div class="title"&gt;</span><br><span class="line">      &lt;slot name="title"&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;span class="btn" @click="isShow = !isShow"&gt;</span><br><span class="line">        {{ isShow ? "收起" : "展开" }}</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 下拉内容 --&gt;</span><br><span class="line">    &lt;div class="container" v-show="isShow"&gt;</span><br><span class="line">     &lt;slot name="content"&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>views/04_UseSlot.vue使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="container"&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">      &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">      &lt;Pannel&gt;</span><br><span class="line">        &lt;template v-slot:title&gt;</span><br><span class="line">          &lt;h4&gt;芙蓉楼送辛渐&lt;/h4&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template v-slot:content&gt;</span><br><span class="line">          &lt;img src="../assets/mm.gif" alt=""&gt;</span><br><span class="line">          &lt;span&gt;我是内容&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/Pannel&gt;</span><br><span class="line">      &lt;Pannel&gt;</span><br><span class="line">        &lt;template #title&gt;</span><br><span class="line">          &lt;span style="color: red;"&gt;我是标题&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template #content&gt;</span><br><span class="line">          &lt;p&gt;寒雨连江夜入吴,&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;平明送客楚山孤。&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;洛阳亲友如相问，&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;一片冰心在玉壶。&lt;/p&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/Pannel&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Pannel from "../components/04/Pannel";</span><br><span class="line">export default {</span><br><span class="line">  components: {</span><br><span class="line">    Pannel,</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>==v-slot可以简化成#使用==</p>
<blockquote>
<p>v-bind可以省略成:    v-on: 可以省略成@   那么v-slot: 可以简化成#</p>
</blockquote>
<blockquote>
<p>总结: slot的name属性起插槽名, 使用组件时, template配合#插槽名传入具体标签</p>
</blockquote>
<h3 id="1-6-组件进阶-作用域插槽"><a href="#1-6-组件进阶-作用域插槽" class="headerlink" title="1.6 组件进阶 - 作用域插槽"></a>1.6 组件进阶 - 作用域插槽</h3><blockquote>
<p>目标: 子组件里值, 在给插槽赋值时在父组件环境下使用</p>
</blockquote>
<p>复习: 插槽内slot中显示默认内容</p>
<p>例子: 默认内容在子组件中, 但是父亲在给插槽传值, 想要改变插槽显示的默认内容</p>
<p>口诀: </p>
<ol>
<li>子组件, 在slot上绑定属性和子组件内的值</li>
<li>使用组件, 传入自定义标签, 用template和v-slot=”自定义变量名” </li>
<li>scope变量名自动绑定slot上所有属性和值</li>
</ol>
<p>components/05/Pannel.vue - 定义组件, 和具名插槽, 给slot绑定属性和值 </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 按钮标题 --&gt;</span><br><span class="line">    &lt;div class="title"&gt;</span><br><span class="line">      &lt;h4&gt;芙蓉楼送辛渐&lt;/h4&gt;</span><br><span class="line">      &lt;span class="btn" @click="isShow = !isShow"&gt;</span><br><span class="line">        {{ isShow ? "收起" : "展开" }}</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 下拉内容 --&gt;</span><br><span class="line">    &lt;div class="container" v-show="isShow"&gt;</span><br><span class="line">     &lt;slot :row="defaultObj"&gt;{{ defaultObj.defaultOne }}&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 作用域插槽</span><br><span class="line">// 场景: 使用插槽, 使用组件内的变量</span><br><span class="line">// 1. slot标签, 自定义属性和内变量关联</span><br><span class="line">// 2. 使用组件, template配合v-slot="变量名"</span><br><span class="line">// 变量名会收集slot身上属性和值形成对象</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      isShow: false,</span><br><span class="line">      defaultObj: {</span><br><span class="line">        defaultOne: "无名氏",</span><br><span class="line">        defaultTwo: "小传同学"</span><br><span class="line">      }</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>views/05_UseSlot.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="container"&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">      &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">      &lt;Pannel&gt;</span><br><span class="line">        &lt;!-- 需求: 插槽时, 使用组件内变量 --&gt;</span><br><span class="line">        &lt;!-- scope变量: {row: defaultObj} --&gt;</span><br><span class="line">        &lt;template v-slot="scope"&gt;</span><br><span class="line">          &lt;p&gt;{{ scope.row.defaultTwo }}&lt;/p&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/Pannel&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Pannel from "../components/05/Pannel";</span><br><span class="line">export default {</span><br><span class="line">  components: {</span><br><span class="line">    Pannel,</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 组件内变量绑定在slot上, 然后使用组件v-slot=”变量”  变量上就会绑定slot身上属性和值</p>
</blockquote>
<h3 id="1-7-组件进阶-作用域插槽使用场景"><a href="#1-7-组件进阶-作用域插槽使用场景" class="headerlink" title="1.7 组件进阶 - 作用域插槽使用场景"></a>1.7 组件进阶 - 作用域插槽使用场景</h3><blockquote>
<p>目标: 了解作用域插槽使用场景, 自定义组件内标签+<strong>内容</strong></p>
</blockquote>
<p>案例: 封装一个表格组件, 在表格组件内循环产生单元格</p>
<p>准备MyTable.vue组件 – 内置表格, 传入数组循环铺设页面, 把对象每个内容显示在单元格里</p>
<p>准备UseTable.vue – 准备数据传入给MyTable.vue使用</p>
<p>components/06/MyTable.vue - 模板(==直接复制==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;table border="1"&gt;</span><br><span class="line">          &lt;thead&gt;</span><br><span class="line">              &lt;tr&gt;</span><br><span class="line">                  &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                  &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">                  &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">                  &lt;th&gt;头像&lt;/th&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">          &lt;/thead&gt;</span><br><span class="line">          &lt;thead&gt;</span><br><span class="line">              &lt;tr&gt;</span><br><span class="line">                  &lt;td&gt;&lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;&lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;&lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;&lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">          &lt;/thead&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>views/06_UseTable.vue - 准备数据, 传入给MyTable.vue组件里循环使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">list: [</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">name</span>: <span class="string">"小传同学"</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">headImgUrl</span>:</span><br><span class="line">        <span class="string">"http://yun.itheima.com/Upload/./Images/20210303/603f2d2153241.jpg"</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">name</span>: <span class="string">"小黑同学"</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">        <span class="attr">headImgUrl</span>:</span><br><span class="line">        <span class="string">"http://yun.itheima.com/Upload/./Images/20210304/6040b101a18ef.jpg"</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">name</span>: <span class="string">"智慧同学"</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="attr">headImgUrl</span>:</span><br><span class="line">        <span class="string">"http://yun.itheima.com/Upload/./Images/20210302/603e0142e535f.jpg"</span>,</span><br><span class="line">    },</span><br><span class="line">],</span><br></pre></td></tr></tbody></table></figure>

<p>例子: 我想要给td内显示图片, 需要传入自定义的img标签</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/image-20210511170436114.png" alt="image-20210511170436114"></p>
<p>正确做法:    </p>
<p>​    在MyTable.vue的td中准备<slot>占位, 但是外面需要把图片地址赋予给src属性,所以在slot上把obj数据绑定</slot></p>
<p>components/06/MyTable.vue   - ==正确代码==</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;table border="1"&gt;</span><br><span class="line">          &lt;thead&gt;</span><br><span class="line">              &lt;tr&gt;</span><br><span class="line">                  &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                  &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">                  &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">                  &lt;th&gt;头像&lt;/th&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">          &lt;/thead&gt;</span><br><span class="line">          &lt;tbody&gt;</span><br><span class="line">              &lt;tr v-for="(obj, index) in arr" :key="index"&gt;</span><br><span class="line">                  &lt;td&gt;{{ index + 1 }}&lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;{{ obj.name }}&lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;{{ obj.age }}&lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;</span><br><span class="line">                      &lt;slot :row="obj"&gt;</span><br><span class="line">                          &lt;!-- 默认值给上,如果使用组件不自定义标签显示默认文字 --&gt;</span><br><span class="line">                          {{ obj.headImgUrl}}</span><br><span class="line">                      &lt;/slot&gt;</span><br><span class="line">                  &lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">          &lt;/tbody&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">    props: {</span><br><span class="line">        arr: Array</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>​    在UseTable使用MyTable的时候, template上v-slot绑定变量, 传入img组件设置图片地址</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyTable :arr="list"&gt;&lt;/MyTable&gt;</span><br><span class="line">    &lt;MyTable :arr="list"&gt;</span><br><span class="line">        &lt;!-- scope: {row: obj} --&gt;</span><br><span class="line">       &lt;template v-slot="scope"&gt;</span><br><span class="line">            &lt;a :href="scope.row.headImgUrl"&gt;{{ scope.row.headImgUrl }}&lt;/a&gt;</span><br><span class="line">       &lt;/template&gt;</span><br><span class="line">    &lt;/MyTable&gt;</span><br><span class="line">    &lt;MyTable :arr="list"&gt;</span><br><span class="line">       &lt;template v-slot="scope"&gt;</span><br><span class="line">            &lt;img style="width: 100px;" :src="scope.row.headImgUrl" alt=""&gt;</span><br><span class="line">       &lt;/template&gt;</span><br><span class="line">    &lt;/MyTable&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyTable from "../components/06/MyTable";</span><br><span class="line">export default {</span><br><span class="line">  components: {</span><br><span class="line">    MyTable,</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      list: [</span><br><span class="line">        {</span><br><span class="line">          name: "小传同学",</span><br><span class="line">          age: 18,</span><br><span class="line">          headImgUrl:</span><br><span class="line">            "http://yun.itheima.com/Upload/./Images/20210303/603f2d2153241.jpg",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "小黑同学",</span><br><span class="line">          age: 25,</span><br><span class="line">          headImgUrl:</span><br><span class="line">            "http://yun.itheima.com/Upload/./Images/20210304/6040b101a18ef.jpg",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "智慧同学",</span><br><span class="line">          age: 21,</span><br><span class="line">          headImgUrl:</span><br><span class="line">            "http://yun.itheima.com/Upload/./Images/20210302/603e0142e535f.jpg",</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 插槽可以自定义标签, 作用域插槽可以把组件内的值取出来自定义内容</p>
</blockquote>
<h2 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2. 自定义指令"></a>2. 自定义指令</h2><p><a href="https://www.vue3js.cn/docs/zh/guide/custom-directive.html">自定义指令文档</a></p>
<p>除了核心功能默认内置的指令 (<code>v-model</code> 和 <code>v-show</code>)，Vue 也允许注册自定义指令。 <code>v-xxx</code>  </p>
<p>html+css的复用的主要形式是组件</p>
<p>你需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令</p>
<h3 id="2-0-自定义指令-注册"><a href="#2-0-自定义指令-注册" class="headerlink" title="2.0 自定义指令-注册"></a>2.0 自定义指令-注册</h3><blockquote>
<p>目标: 获取标签, 扩展额外的功能</p>
</blockquote>
<blockquote>
<h3 id="局部注册和使用"><a href="#局部注册和使用" class="headerlink" title="局部注册和使用"></a>局部注册和使用</h3></blockquote>
<p>07_UseDirective.vue - 只能在当前组件.vue文件中使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;!-- &lt;input type="text" v-gfocus&gt; --&gt;</span><br><span class="line">      &lt;input type="text" v-focus&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 创建 "自定义指令", 让输入框自动聚焦</span><br><span class="line">// 1. 创建自定义指令</span><br><span class="line">// 全局 / 局部</span><br><span class="line">// 2. 在标签上使用自定义指令  v-指令名</span><br><span class="line">// 注意:</span><br><span class="line">// inserted方法 - 指令所在标签, 被插入到网页上触发(一次)</span><br><span class="line">// update方法 - 指令对应数据/标签更新时, 此方法执行</span><br><span class="line">export default {</span><br><span class="line">    data(){</span><br><span class="line">        return {</span><br><span class="line">            colorStr: 'red'</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    directives: {</span><br><span class="line">        focus: {</span><br><span class="line">            inserted(el){</span><br><span class="line">                el.focus()</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3></blockquote>
<p>在main.js用 Vue.directive()方法来进行注册, 以后随便哪个.vue文件里都可以直接用v-fofo指令</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 全局指令 - 到处"直接"使用</span></span><br><span class="line">Vue.directive(<span class="string">"gfocus"</span>, {</span><br><span class="line">  <span class="function"><span class="title">inserted</span>(<span class="params">el</span>)</span> {</span><br><span class="line">    el.focus() <span class="comment">// 触发标签的事件方法</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 全局注册自定义指令, 哪里都能用, 局部注册, 只能在当前vue文件里用</p>
</blockquote>
<h3 id="2-1-自定义指令-传值"><a href="#2-1-自定义指令-传值" class="headerlink" title="2.1 自定义指令-传值"></a>2.1 自定义指令-传值</h3><blockquote>
<p>目标: 使用自定义指令, 传入一个值</p>
</blockquote>
<p>需求: 定义color指令-传入一个颜色, 给标签设置文字颜色</p>
<p>main.js定义处修改一下</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 目标: 自定义指令传值</span></span><br><span class="line">Vue.directive(<span class="string">'color'</span>, {</span><br><span class="line">  <span class="function"><span class="title">inserted</span>(<span class="params">el, binding</span>)</span> {</span><br><span class="line">    el.style.color = binding.value</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">el, binding</span>)</span> {</span><br><span class="line">    el.style.color = binding.value</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>Direct.vue处更改一下</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;p v-color="colorStr" @click="changeColor"&gt;修改文字颜色&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      theColor: "red",</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    changeColor() {</span><br><span class="line">      this.theColor = 'blue';</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: v-xxx, 自定义指令, 获取原生DOM, 自定义操作</p>
</blockquote>
<h2 id="3-案例-tabbar"><a href="#3-案例-tabbar" class="headerlink" title="3. 案例-tabbar"></a>3. 案例-tabbar</h2><blockquote>
<p>完成如下案例和各步功能</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/21_tabbar%E6%A1%88%E4%BE%8B_%E6%89%80%E6%9C%89%E6%95%88%E6%9E%9C.gif" alt="image-20201224004845495"></p>
<p>知识点:</p>
<ul>
<li>组件封装</li>
<li>动态组件</li>
<li>keep-alive</li>
<li>作用域插槽</li>
<li>自定义指令</li>
</ul>
<h3 id="3-0-案例-tabbar-初始化项目"><a href="#3-0-案例-tabbar-初始化项目" class="headerlink" title="3.0 案例-tabbar-初始化项目"></a>3.0 案例-tabbar-初始化项目</h3><blockquote>
<p>目标: 创建项目文件夹, 引入字体图标, 下载bootstrap, less, <a href="mailto:less-loader@5.0.0">less-loader@5.0.0</a> axios, 在App.vue注册组件</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/image-20210511172408766.png" alt="image-20210511172408766"></p>
<ul>
<li>需求: 从0新建项目, 拆分组件, 创建使用</li>
</ul>
<p>组件分析:</p>
<ul>
<li><p>组件拆分:</p>
<ul>
<li>MyHeader.vue – ==复用之前的==</li>
<li>MyTabBar.vue – 底部导航</li>
<li>MyTable.vue – 封装表格</li>
</ul>
</li>
<li><p>三个页面</p>
<ul>
<li>-MyGoodsList.vue – 商品页</li>
<li>MyGoodsSearch.vue – 搜索页</li>
<li>-MyUserInfo.vue – 用户信息页</li>
</ul>
</li>
</ul>
<p>思路分析：</p>
<p>​    ①: vue create tabbar-demo</p>
<p>​    ②: yarn add less <a href="mailto:less-loader@5.0.0">less-loader@5.0.0</a> -D</p>
<p>​    ③: yarn add bootstrap axios 并在main.js 引入和全局属性</p>
<p>​    ④: 根据需求-创建需要的页面组件</p>
<p>​    ⑤: 把昨天购物车案例-封装的MyHeader.vue文件复制过来复用</p>
<p>​    ⑥: 从App.vue – 引入组织相关标签</p>
<p>新建工程:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vue create tabbar-demo</span><br><span class="line">yarn add less less-loader@5.0.0 -D</span><br><span class="line">yarn add bootstrap axios</span><br></pre></td></tr></tbody></table></figure>

<p>在main.js中引入bootStrap.css和字体图标样式</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"bootstrap/dist/css/bootstrap.css"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./assets/fonts/iconfont.css"</span></span><br></pre></td></tr></tbody></table></figure>

<p>创建/复制如下文件</p>
<p>从昨天案例中-直接复制过来components/MyHeader.vue</p>
<p>components/MyTabBar.vue</p>
<p>views/MyGoodsList.vue</p>
<p>views/MyGoodsSearch.vue</p>
<p>views/MyUserInfo.vue</p>
<p>components/MyTable.vue</p>
<h3 id="3-1-案例-tabbar-底部封装"><a href="#3-1-案例-tabbar-底部封装" class="headerlink" title="3.1 案例-tabbar-底部封装"></a>3.1 案例-tabbar-底部封装</h3><blockquote>
<p>目标: 实现MyTabBar.vue组件</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/image-20210511172826513.png" alt="image-20210511172826513"></p>
<ul>
<li>需求: 把底部导航也灵活封装起来</li>
</ul>
<p>分析：</p>
<p>​    ①: 基本标签+样式(md里复制)</p>
<p>​    ②: 为tabbar组件指定数据源</p>
<p>​    ③: 数据源最少2个, 最多5个(validator)</p>
<p>​    ④: 从App.vue给MyTabBar.vue传入底部导航的数据</p>
<p>​    ⑤: MyTabBar.vue中循环展示</p>
<p>App.vue-数组准备</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">tabList: [</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">iconText</span>: <span class="string">"icon-shangpinliebiao"</span>,</span><br><span class="line">        <span class="attr">text</span>: <span class="string">"商品列表"</span>,</span><br><span class="line">        <span class="attr">componentName</span>: <span class="string">"MyGoodsList"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">iconText</span>: <span class="string">"icon-sousuo"</span>,</span><br><span class="line">        <span class="attr">text</span>: <span class="string">"商品搜索"</span>,</span><br><span class="line">        <span class="attr">componentName</span>: <span class="string">"MyGoodsSearch"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">iconText</span>: <span class="string">"icon-user"</span>,</span><br><span class="line">        <span class="attr">text</span>: <span class="string">"我的信息"</span>,</span><br><span class="line">        <span class="attr">componentName</span>: <span class="string">"MyUserInfo"</span></span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<p>MyTabBar.vue - 标签模板</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-tab-bar"&gt;</span><br><span class="line">  	&lt;div class="tab-item"&gt;</span><br><span class="line">      &lt;!-- 图标 --&gt;</span><br><span class="line">      &lt;span class="iconfont"&gt;&lt;/span&gt;</span><br><span class="line">      &lt;!-- 文字 --&gt;</span><br><span class="line">      &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  </span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scoped&gt;</span><br><span class="line">.my-tab-bar {</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border-top: 1px solid #ccc;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">  align-items: center;</span><br><span class="line">  background-color: white;</span><br><span class="line">  .tab-item {</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    align-items: center;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line">.current {</span><br><span class="line">  color: #1d7bff;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>MyTabBar.vue正确代码(==不可复制==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-tab-bar"&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class="tab-item"</span><br><span class="line">      v-for="(obj, index) in arr"</span><br><span class="line">      :key="index"</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- 图标 --&gt;</span><br><span class="line">      &lt;span class="iconfont" :class="obj.iconText"&gt;&lt;/span&gt;</span><br><span class="line">      &lt;!-- 文字 --&gt;</span><br><span class="line">      &lt;span&gt;{{ obj.text }}&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  props: {</span><br><span class="line">    arr: {</span><br><span class="line">      type: Array,</span><br><span class="line">      required: true,</span><br><span class="line">      // 自定义校验规则</span><br><span class="line">      validator(value) {</span><br><span class="line">        // value就是接到数组</span><br><span class="line">        if (value.length &gt;= 2 &amp;&amp; value.length &lt;= 5) {</span><br><span class="line">          return true; // 符合条件就return true</span><br><span class="line">        } else {</span><br><span class="line">          console.error("数据源必须在2-5项");</span><br><span class="line">          return false;</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>不要忘了把tabList数组从App.vue -&gt; MyTabBar.vue</p>
<h3 id="3-2-案例-tabbar-底部高亮"><a href="#3-2-案例-tabbar-底部高亮" class="headerlink" title="3.2 案例-tabbar-底部高亮"></a>3.2 案例-tabbar-底部高亮</h3><blockquote>
<p>目标: 点击底部导航实现高亮效果</p>
</blockquote>
<ul>
<li>需求: 点击底部实现高亮效果</li>
</ul>
<p>分析：</p>
<p>​    ①: 绑定点击事件, 获取点击的索引</p>
<p>​    ②: 循环的标签设置动态class, 遍历的索引, 和点击保存的索引比较, 相同则高亮</p>
<p>效果演示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/image-20210511173026688.png" alt="image-20210511173026688"></p>
<p>MyTabBar.vue(==正确代码==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-tab-bar"&gt;</span><br><span class="line">    &lt;div class="tab-item" </span><br><span class="line">    v-for="(obj, index) in arr" </span><br><span class="line">    :key="index"</span><br><span class="line">    :class="{current: activeIndex === index}"</span><br><span class="line">    @click="activeIndex = index"&gt;</span><br><span class="line">      &lt;!-- 图标 --&gt;</span><br><span class="line">      &lt;span class="iconfont" :class="obj.iconText"&gt;&lt;/span&gt;</span><br><span class="line">      &lt;!-- 文字 --&gt;</span><br><span class="line">      &lt;span&gt;{{ obj.text }}&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      activeIndex: 0 // 高亮元素下标</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  // ....其他代码</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-3-案例-tabbar-组件切换"><a href="#3-3-案例-tabbar-组件切换" class="headerlink" title="3.3 案例-tabbar-组件切换"></a>3.3 案例-tabbar-组件切换</h3><blockquote>
<p>目的: 点击底部导航, 切换页面组件显示</p>
</blockquote>
<p>需求: 点击底部切换组件</p>
<p>分析：</p>
<p>​    ①: 底部导航传出动态组件名字符串到App.vue</p>
<p>​    ②: 切换动态组件is属性的值为要显示的组件名</p>
<p>效果演示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/tabbar_%E5%88%87%E6%8D%A2%E7%BB%84%E4%BB%B6.gif" alt="image-20210511173144326"></p>
<p>补充: 给内容div.app- 设置上下内边距</p>
<p>App.vue - 引入并注册</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyHeader</span><br><span class="line">      :background="'blue'"</span><br><span class="line">      :fontColor="'white'"</span><br><span class="line">      title="TabBar案例"</span><br><span class="line">    &gt;&lt;/MyHeader&gt;</span><br><span class="line">    &lt;div class="main"&gt;</span><br><span class="line">      &lt;component :is="comName"&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;MyTabBar :arr="tabList"</span><br><span class="line">    @changeCom="changeComFn"</span><br><span class="line">    &gt;&lt;/MyTabBar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyHeader from "./components/MyHeader";</span><br><span class="line">// 目标: 完成底部封装</span><br><span class="line">// 1. MyTabBar.vue 组件标签+样式 准备</span><br><span class="line">// 2. 字体图标引入</span><br><span class="line">// 3. 准备底部数据</span><br><span class="line">// 4. 使用MyTabBar组件, 传入数据(父-&gt;子), 循环产生底部导航</span><br><span class="line">// 5. 子组件内props自定义检验规则(2-5项)</span><br><span class="line">// 6. 子组件内循环产生底部导航</span><br><span class="line">import MyTabBar from './components/MyTabBar'</span><br><span class="line"></span><br><span class="line">// 目标: 切换组件显示</span><br><span class="line">// 1. 创建组件 - 编写内容</span><br><span class="line">// 2. 引入App.vue注册</span><br><span class="line">// 3. 挂载点设置is</span><br><span class="line">// 4. 切换comName的值(重要)</span><br><span class="line">// 5. 底部导航点击- MyTabBar.vue里</span><br><span class="line">// 子 -&gt; 父技术 (传要切换的组件名出来)</span><br><span class="line"></span><br><span class="line">import MyGoodsList from './views/MyGoodsList'</span><br><span class="line">import MyGoodsSearch from './views/MyGoodsSearch'</span><br><span class="line">import MyUserInfo from './views/MyUserInfo'</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      comName: "MyGoodsList", // 默认显示的组件</span><br><span class="line">      tabList: [ // 底部导航的数据</span><br><span class="line">        {</span><br><span class="line">          iconText: "icon-shangpinliebiao",</span><br><span class="line">          text: "商品列表",</span><br><span class="line">          componentName: "MyGoodsList",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          iconText: "icon-sousuo",</span><br><span class="line">          text: "商品搜索",</span><br><span class="line">          componentName: "MyGoodsSearch",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          iconText: "icon-user",</span><br><span class="line">          text: "我的信息",</span><br><span class="line">          componentName: "MyUserInfo",</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    MyHeader,</span><br><span class="line">    MyTabBar,</span><br><span class="line">    MyGoodsList,</span><br><span class="line">    MyGoodsSearch,</span><br><span class="line">    MyUserInfo</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    changeComFn(cName){</span><br><span class="line">      </span><br><span class="line">      this.comName = cName; // MyTabBar里选出来的组件名赋予给is属性的comName</span><br><span class="line">      // 导致组件的切换</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.main{</span><br><span class="line">  padding-top: 45px;</span><br><span class="line">  padding-bottom: 51px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>MyTabBar.vue - 点击传递过来组件名</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">methods: {</span><br><span class="line">    <span class="function"><span class="title">btn</span>(<span class="params">index, theObj</span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.selIndex = index; <span class="comment">// 点谁, 就把谁的索引值保存起来</span></span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">"changeCom"</span>, theObj.componentName); <span class="comment">// 要切换的组件名传App.vue</span></span><br><span class="line">    },</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-4-案例-tabbar-商品列表"><a href="#3-4-案例-tabbar-商品列表" class="headerlink" title="3.4 案例-tabbar-商品列表"></a>3.4 案例-tabbar-商品列表</h3><blockquote>
<p>目标: 为MyGoodsList页面, 准备表格组件MyTable.vue-铺设展示数据 </p>
</blockquote>
<ul>
<li>需求: 商品列表铺设页面</li>
</ul>
<p>分析：</p>
<p>​    ①: 封装MyTable.vue – 准备标签和样式</p>
<p>​    ②: axios在MyGoodsList.vue请求数据回来</p>
<p>​    ③: 请求地址: <a href="https://www.escook.cn/api/goods">https://www.escook.cn/api/goods</a></p>
<p>​    ④: 传入MyTable.vue中循环数据显示</p>
<p>​    ⑤: 给删除按钮添加bootstrap的样式: btn btn-danger btn-sm</p>
<p>效果演示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/image-20210511173412963.png" alt="image-20210511173412963"></p>
<p>MyTable.vue - 准备table整个表格标签和样式(可复制)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;table class="table table-bordered table-stripped"&gt;</span><br><span class="line">    &lt;!-- 表格标题区域 --&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;#&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;商品名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;标签&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;!-- 表格主体区域 --&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">      &lt;tr &gt;</span><br><span class="line">        &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;商品&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;998&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;xxx&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;xxx&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'MyTable'</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped lang="less"&gt;</span><br><span class="line">.my-goods-list {</span><br><span class="line">  .badge {</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>使用axios请求数据, 把表格页面铺设出来</p>
</blockquote>
<p>main.js - 注册axios配置默认地址</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line">axios.defaults.baseURL = <span class="string">"https://www.escook.cn"</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>MyGoodsList.vue - 使用axios请求数据, 把数据传入给MyTable.vue里循环铺设</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyTable :arr="list"&gt;</span><br><span class="line">    &lt;/MyTable&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyTable from "../components/MyTable";</span><br><span class="line">import axios from "axios";</span><br><span class="line">axios.defaults.baseURL = "https://www.escook.cn";</span><br><span class="line">// 目标: 循环商品列表表格</span><br><span class="line">// 1. 封装MyTable.vue 整体表格组件-一套标签和样式</span><br><span class="line">// 2. axios请求数据</span><br><span class="line">// 3. 传入MyTable组件里循环tr显示数据</span><br><span class="line"></span><br><span class="line">// 目标: 展示tags标签</span><br><span class="line">// 1. tags数组 - 某个td循环span使用文字</span><br><span class="line">// 2. span设置bs的样式</span><br><span class="line"></span><br><span class="line">// 目标: 删除数据</span><br><span class="line">// 1. 删除按钮 - 点击事件</span><br><span class="line">// 2. 作用域插槽把索引值关联出来了</span><br><span class="line">// scope身上就有row和index</span><br><span class="line">// 3. 删除中使用scope.index的索引值</span><br><span class="line">// 4. 删除事件里删除数组里对应索引值的数据</span><br><span class="line">export default {</span><br><span class="line">  components: {</span><br><span class="line">    MyTable,</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      list: [] // 所有数据</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  created() {</span><br><span class="line">    axios({</span><br><span class="line">      url: "/api/goods",</span><br><span class="line">    }).then((res) =&gt; {</span><br><span class="line">      console.log(res);</span><br><span class="line">      this.list = res.data.data;</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>MyTable.vue里正确代码(==不可复制==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;table class="table table-bordered table-stripped"&gt;</span><br><span class="line">    &lt;!-- 表格标题区域 --&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;#&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;商品名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;标签&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;!-- 表格主体区域 --&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">      &lt;tr v-for="(obj, index) in arr"</span><br><span class="line">      :key="obj.id"</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;td&gt;{{ obj.id }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ obj.goods_name }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ obj.goods_price }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ obj.tags }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">            &lt;button class="btn btn-danger btn-sm"&gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'MyTable',</span><br><span class="line">  props: {</span><br><span class="line">      arr: Array</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped lang="less"&gt;</span><br><span class="line">.my-goods-list {</span><br><span class="line">  .badge {</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-5-案例-tabbar-商品表格-插槽"><a href="#3-5-案例-tabbar-商品表格-插槽" class="headerlink" title="3.5_案例-tabbar-商品表格-插槽"></a>3.5_案例-tabbar-商品表格-插槽</h3><blockquote>
<p>目标: 使用插槽技术, 和作用域插槽技术, 给MyTable.vue组件, 自定义列标题, 自定义表格内容</p>
</blockquote>
<ul>
<li>需求: 允许用户自定义表格头和表格单元格内容</li>
</ul>
<p>分析：</p>
<p>​    ①: 把MyTable.vue里准备slot</p>
<p>​    ②: 使用MyTable组件时传入具体标签</p>
<p>步骤:</p>
<ol>
<li>提高组件==复用性和灵活性==, 把表格列标题thead部分预留<slot>标签, 设置name属性</slot></li>
<li>使用MyTable.vue时, 传入列标题标签</li>
<li>表格内容td部分也可以让组件使用者自定义, 也给tbody下tr内留好<slot>标签和name属性名</slot></li>
<li>使用插槽需要用到插槽内的obj对象上的数据, 使用作用域插槽技术</li>
</ol>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/image-20201225230419844-1610538206980.png" alt="image-20201225230419844"></p>
<p>MyTable.vue - 留好具名插槽</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;table class="table table-bordered table-stripped"&gt;</span><br><span class="line">    &lt;!-- 表格标题区域 --&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;!-- &lt;th&gt;#&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;商品名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;标签&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt; --&gt;</span><br><span class="line">        &lt;slot name="header"&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;!-- 表格主体区域 --&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">      &lt;tr v-for="(obj, index) in arr"</span><br><span class="line">      :key="obj.id"</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;!-- &lt;td&gt;{{ obj.id }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ obj.goods_name }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ obj.goods_price }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ obj.tags }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">            &lt;button class="btn btn-danger btn-sm"&gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt; --&gt;</span><br><span class="line">        &lt;slot name="body" :row="obj" :index="index"&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'MyTable',</span><br><span class="line">  props: {</span><br><span class="line">      arr: Array</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>MyGoodsList.vue 使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyTable :arr="list"&gt;</span><br><span class="line">      &lt;template #header&gt;</span><br><span class="line">        &lt;th&gt;#&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;商品名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;标签&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;!-- scope的值: {row: obj, index: 索引值} --&gt;</span><br><span class="line">      &lt;template #body="scope"&gt;</span><br><span class="line">        &lt;td&gt;{{ scope.row.id }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ scope.row.goods_name }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;{{ scope.row.goods_price }}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">            {{ scope.row.tags }}</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;button class="btn btn-danger btn-sm"</span><br><span class="line">          &gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/MyTable&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyTable from "../components/MyTable";</span><br><span class="line">import axios from "axios";</span><br><span class="line">axios.defaults.baseURL = "https://www.escook.cn";</span><br><span class="line">// 目标: 循环商品列表表格</span><br><span class="line">// 1. 封装MyTable.vue 整体表格组件-一套标签和样式</span><br><span class="line">// 2. axios请求数据</span><br><span class="line">// 3. 传入MyTable组件里循环tr显示数据</span><br><span class="line"></span><br><span class="line">// 目标: 展示tags标签</span><br><span class="line">// 1. tags数组 - 某个td循环span使用文字</span><br><span class="line">// 2. span设置bs的样式</span><br><span class="line"></span><br><span class="line">// 目标: 删除数据</span><br><span class="line">// 1. 删除按钮 - 点击事件</span><br><span class="line">// 2. 作用域插槽把索引值关联出来了</span><br><span class="line">// scope身上就有row和index</span><br><span class="line">// 3. 删除中使用scope.index的索引值</span><br><span class="line">// 4. 删除事件里删除数组里对应索引值的数据</span><br><span class="line">export default {</span><br><span class="line">  components: {</span><br><span class="line">    MyTable,</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      list: [] // 所有数据</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  created() {</span><br><span class="line">    axios({</span><br><span class="line">      url: "/api/goods",</span><br><span class="line">    }).then((res) =&gt; {</span><br><span class="line">      console.log(res);</span><br><span class="line">      this.list = res.data.data;</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-6-案例-tabbar-商品表格-tags微标"><a href="#3-6-案例-tabbar-商品表格-tags微标" class="headerlink" title="3.6 案例-tabbar-商品表格-tags微标"></a>3.6 案例-tabbar-商品表格-tags微标</h3><blockquote>
<p>目标: 把单元格里的标签, tags徽章铺设下</p>
</blockquote>
<ul>
<li>需求: 标签列自定义显示</li>
</ul>
<p>分析：</p>
<p>​    ①: 插槽里传入的td单元格</p>
<p>​    ②: 自定义span标签的循环展示-给予样式</p>
<p>效果演示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/image-20210511174218209.png" alt="image-20210511174218209"></p>
<p>bootstrap徽章: <a href="https://v4.bootcss.com/docs/components/badge/">https://v4.bootcss.com/docs/components/badge/</a></p>
<p>MyGoodsList.vue - 插槽</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;span v-for="(str, ind) in scope.row.tags" :key="ind"</span><br><span class="line">      class="badge badge-warning"</span><br><span class="line">      &gt;</span><br><span class="line">    {{ str }}</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>下面额外添加样式</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;style lang="less" scoped&gt;</span><br><span class="line">.my-goods-list {</span><br><span class="line">  .badge {</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-7-案例-tabbar-商品表格-删除功能"><a href="#3-7-案例-tabbar-商品表格-删除功能" class="headerlink" title="3.7 案例-tabbar-商品表格-删除功能"></a>3.7 案例-tabbar-商品表格-删除功能</h3><blockquote>
<p>目标: 点击删除对应这条数据</p>
</blockquote>
<ul>
<li>需求: 点击删除按钮删除数据</li>
</ul>
<p>分析：</p>
<p>​    ①: 删除按钮绑定点击事件</p>
<p>​    ②: 作用域插槽绑定id值出来</p>
<p>​    ③: 传给删除方法, 删除MyGoodsList.vue里数组里数据</p>
<p>效果演示</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/tabbar_%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD.gif" alt="tabbar_删除功能"></p>
<p>提示: id在MyTable.vue里, 但是MyGoodsList.vue里要使用, 而且在插槽位置, 使用作用域插槽已经把整个obj对象(包含id)带出来了</p>
<p>MyTable.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;slot name="body" :row="obj"&gt;&lt;/slot&gt;</span><br></pre></td></tr></tbody></table></figure>

<ol>
<li>MyGoodsList.vue - 注册点击事件</li>
</ol>
<figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-danger btn-sm"</span></span><br><span class="line">    @click=<span class="string">"removeBtn(scope.row.id)"</span></span><br><span class="line">    &gt;删除&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>​    2. <code>my-goods-list.vue</code> 根据 id 删除</p>
<figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">removeBtn</span>(<span class="params">id</span>)</span>{</span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">this</span>.list.findIndex(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id === id)</span><br><span class="line">    <span class="built_in">this</span>.list.splice(index, <span class="number">1</span>)</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-8-案例-tabbar-添加tab"><a href="#3-8-案例-tabbar-添加tab" class="headerlink" title="3.8 案例-tabbar-添加tab"></a>3.8 案例-tabbar-添加tab</h3><blockquote>
<p>目标: 实现点击tab按钮, 出现输入框自动获取焦点, 失去焦点关闭input, 回车新增tag, esc清空内容</p>
</blockquote>
<ul>
<li>需求1: 点击Tab, 按钮消失, 输入框出现</li>
<li>需求2: 输入框自动聚焦</li>
<li>需求3: 失去焦点, 输入框消失, 按钮出</li>
<li>需求4: 监测input回车, 无数据拦截</li>
<li>需求5: 监测input取消, 清空数据</li>
<li>需求6: 监测input回车, 有数据添加</li>
</ul>
<p>效果目标: </p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/tabbar_tab%E5%8A%9F%E8%83%BD.gif" alt="image-20201225233325965"></p>
<h4 id="3-8-0-点击按钮消失-输入框出现"><a href="#3-8-0-点击按钮消失-输入框出现" class="headerlink" title="3.8.0 点击按钮消失, 输入框出现"></a>3.8.0 点击按钮消失, 输入框出现</h4><p>MyGoodsList.vue - 标签位置添加</p>
<p>注意: 每个tab按钮和input都是独立变量控制, 那么直接在row身上的属性控制即可</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">          class="tag-input form-control"</span><br><span class="line">          style="width: 100px;"</span><br><span class="line">          type="text"</span><br><span class="line">          v-if="scope.row.inputVisible"</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;button </span><br><span class="line">          v-else </span><br><span class="line">          style="display: block;" </span><br><span class="line">          class="btn btn-primary btn-sm add-tag"</span><br><span class="line">          @click="scope.row.inputVisible = true"</span><br><span class="line">          &gt;+Tag&lt;/button&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3-8-1-input自动获取焦点"><a href="#3-8-1-input自动获取焦点" class="headerlink" title="3.8.1 input自动获取焦点"></a>3.8.1 input自动获取焦点</h4><p>main.js - 定义全局自定义指令</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 全局指令</span></span><br><span class="line">Vue.directive(<span class="string">"focus"</span>, {</span><br><span class="line">  <span class="function"><span class="title">inserted</span>(<span class="params">el</span>)</span>{</span><br><span class="line">    el.focus()</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>MyGoodsList.vue - 使用 v-focus指令</p>
<h4 id="3-8-2-input失去焦点关闭input"><a href="#3-8-2-input失去焦点关闭input" class="headerlink" title="3.8.2 input失去焦点关闭input"></a>3.8.2 input失去焦点关闭input</h4><p>监听input失去焦点事件, 让input消失</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">@blur=<span class="string">"scope.row.inputVisible = false"</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3-8-3-input回车新增tag"><a href="#3-8-3-input回车新增tag" class="headerlink" title="3.8.3 input回车新增tag"></a>3.8.3 input回车新增tag</h4><p>监听input的回车事件, 如果无数据拦截代码</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">@keydown.enter=<span class="string">"enterFn(scope.row)"</span></span><br></pre></td></tr></tbody></table></figure>

<p>事件处理函数</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">enterFn</span>(<span class="params">obj</span>)</span>{ <span class="comment">// 回车</span></span><br><span class="line">    <span class="comment">// console.log(obj.inputValue);</span></span><br><span class="line">    <span class="keyword">if</span> (obj.inputValue.trim().length === <span class="number">0</span>) {</span><br><span class="line">        alert(<span class="string">'请输入数据'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    obj.tags.push(obj.inputValue) <span class="comment">// 表单里的字符串状态tags数组</span></span><br><span class="line">    obj.inputValue = <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="3-8-4-input框esc清空内容"><a href="#3-8-4-input框esc清空内容" class="headerlink" title="3.8.4 input框esc清空内容"></a>3.8.4 input框esc清空内容</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">@keydown.esc=<span class="string">"scope.row.inputValue = ''"</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ol>
<li>动态组件的使用步骤</li>
<li>组件缓存使用步骤和作用</li>
<li>组件插槽默认使用</li>
<li>插槽默认显示的内容</li>
<li>多个插槽时, 具名插槽如何使用</li>
<li>作用域插槽如何使用以及目的</li>
<li>自定义命令如何使用</li>
<li>跟随视频完成tabbar案例</li>
</ol>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1-vue中solt的使用方式，以及solt作用域插槽的用法"><a href="#1-vue中solt的使用方式，以及solt作用域插槽的用法" class="headerlink" title="1. vue中solt的使用方式，以及solt作用域插槽的用法"></a>1. vue中solt的使用方式，以及solt作用域插槽的用法</h3><p>   使用方式：当组件当做标签进行使用的时候，用slot可以用来接受组件标签包裹的内容，当给solt标签添加name属性的 时候，可以调换响应的位置<br>  (高级用法) 插槽作用域： 当传递的不是单一的标签, 例如需要循环时, 把要循环的标签传入, 组件内使用v-for在slot标签上, 内部可以v-bind:把值传出来, 再外面把值赋予进去, 看示例</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">"slotProps"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    {{ slotProps.user.firstName }}</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/current-user&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// current-user组件, user属性和值, 绑定给slotProps上</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:user</span>=<span class="string">"user"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    {{ user.lastName }}</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>扩展阅读: <a href="https://cn.vuejs.org/v2/guide/components-slots.html">https://cn.vuejs.org/v2/guide/components-slots.html</a> (了解即可, 一般用不上)</p>
</blockquote>
<h3 id="2-跟keep-alive有关的生命周期是哪些？（必会）"><a href="#2-跟keep-alive有关的生命周期是哪些？（必会）" class="headerlink" title="2. 跟keep-alive有关的生命周期是哪些？（必会）"></a>2. 跟keep-alive有关的生命周期是哪些？（必会）</h3><p>​    <strong>1****）前言：</strong>在开发Vue项目的时候，大部分组件是没必要多次渲染的，所以Vue提供了一个内置组件keep-alive来缓存组件内部状态，避免重新渲染，在开发Vue项目的时候，大部分组件是没必要多次渲染的，所以Vue提供了一个内置组件keep-alive来缓存组件内部状态，避免重新渲染</p>
<p>​    <strong>2****）生命周期函数：</strong>在被keep-alive包含的组件/路由中，会多出两个生命周期的钩子:activated 与 deactivated。</p>
<p>​       <strong>1****、activated钩子：</strong>在在组件第一次渲染时会被调用，之后在每次缓存组件被激活时调用。</p>
<p>​       <strong>2****、Activated钩子调用时机：</strong> 第一次进入缓存路由/组件，在mounted后面，beforeRouteEnter守卫传给 next 的回调函数之前调用，并且给因为组件被缓存了，再次进入缓存路由、组件时，不会触发这些钩子函数，beforeCreate created beforeMount mounted 都不会触发</p>
<p>​       <strong>1****、deactivated钩子：</strong>组件被停用（离开路由）时调用。</p>
<p>​       <strong>2****、deactivated钩子调用时机</strong>：使用keep-alive就不会调用beforeDestroy(组件销毁前钩子)和destroyed(组件销毁)，因为组件没被销毁，被缓存起来了，这个钩子可以看作beforeDestroy的替代，如果你缓存了组件，要在组件销毁的的时候做一些事情，可以放在这个钩子里，组件内的离开当前路由钩子beforeRouteLeave =&gt; 路由前置守卫 beforeEach =&gt;全局后置钩子afterEach =&gt; deactivated 离开缓存组件 =&gt; activated 进入缓存组件(如果你进入的也是缓存路由)</p>
<h3 id="3-自定义指令-v-check、v-focus-的方法有哪些-它有哪些钩子函数-还有哪些钩子函数参数-（必会）"><a href="#3-自定义指令-v-check、v-focus-的方法有哪些-它有哪些钩子函数-还有哪些钩子函数参数-（必会）" class="headerlink" title="3. 自定义指令(v-check、v-focus)的方法有哪些?它有哪些钩子函数?还有哪些钩子函数参数?（必会）"></a>3. 自定义指令(v-check、v-focus)的方法有哪些?它有哪些钩子函数?还有哪些钩子函数参数?（必会）</h3><p>​    全局定义指令：在vue对象的directive方法里面有两个参数，一个是指令名称，另外一个是函数。组件内定义指令：directives</p>
<p>​    钩子函数：bind(绑定事件触发)、inserted(节点插入的时候触发)、update(组件内相关更新)</p>
<p>​    钩子函数参数：el、binding</p>
<h3 id="4-is这个特性你有用过吗？主要用在哪些方面？（高薪常问）"><a href="#4-is这个特性你有用过吗？主要用在哪些方面？（高薪常问）" class="headerlink" title="4. is这个特性你有用过吗？主要用在哪些方面？（高薪常问）"></a>4. is这个特性你有用过吗？主要用在哪些方面？（高薪常问）</h3><p><strong> 1****）动态组件</strong></p>
<p>​    <component :is="componentName"></component>， componentName可以是在本页面已经注册的局部组件名和全局组件名,也可以是一个组件的选项对象。 当控制componentName改变时就可以动态切换选择组件。</p>
<p><strong>  2****）is的用法</strong></p>
<p>​    有些HTML元素，诸如 </p><ul>、<ol>、和<select>，对于哪些元素可以出现在其内部是有严格限制的。</select><table></table></ol></ul><p></p>
<p>​    而有些HTML元素，诸如 </p><li>、 和 <option>，只能出现在其它某些特定的元素内部。</option></li><p></p>
<p>​    </p><ul></ul><p></p>
<p>​      <card-list></card-list></p>
<p>​    </p>
<p>​    所以上面<card-list></card-list>会被作为无效的内容提升到外部，并导致最终渲染结果出错。应该这么写：</p>
<p>​    </p><ul></ul><p></p>
<p>​      </p><li is="cardList"></li><p></p>
<p>​     </p>
<h2 id="附加练习-1-注册组件复用"><a href="#附加练习-1-注册组件复用" class="headerlink" title="附加练习_1.注册组件复用"></a>附加练习_1.注册组件复用</h2><p>目的: 封装一个复用的组件, 可以动态的插入标签, 来作为注册页的一块项</p>
<p>图示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%805-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6_%E6%8F%92%E6%A7%BD_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/image-20210115194708455.png" alt="image-20210115194708455"></p>
<p>正确代码:</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-com</span> <span class="attr">:title</span>=<span class="string">"'姓名'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-com</span> <span class="attr">:title</span>=<span class="string">"'密码'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'password'</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-com</span> <span class="attr">:title</span>=<span class="string">"'性别'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'radio'</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span>/&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'radio'</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span>/&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">child-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-com</span> <span class="attr">:title</span>=<span class="string">"'爱好'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'checkbox'</span> <span class="attr">value</span>=<span class="string">"抽烟"</span> /&gt;</span>抽烟</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'checkbox'</span> <span class="attr">value</span>=<span class="string">"喝酒"</span> /&gt;</span>喝酒</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'checkbox'</span> <span class="attr">value</span>=<span class="string">"烫头"</span> /&gt;</span>烫头</span><br><span class="line">    <span class="tag">&lt;/<span class="name">child-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-com</span> <span class="attr">:title</span>=<span class="string">"'来自于'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"北京"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"天津"</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"南京"</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child-com</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    new Vue({</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el: "#app",</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components: {</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            childCom: { // 组件名字</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                props: {</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    title: {</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                        type: String</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    }</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                },</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid black;"</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{<span class="name">title</span>}}</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            }</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        }</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    })</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue应用1—用vant和node实现网易云音乐案例</title>
    <url>/2021/05/20/vue%E5%BA%94%E7%94%A81-%E7%94%A8vant%E5%92%8Cnode%E5%AE%9E%E7%8E%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<h2 id="本地接口项目部署"><a href="#本地接口项目部署" class="headerlink" title="本地接口项目部署"></a>本地接口项目部署</h2></blockquote>
<p>下载网易云音乐node接口项目, 在本地启动, 为我们vue项目提供数据支持</p>
<p><a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/?id=%e5%ae%89%e8%a3%85">项目地址</a></p>
<p><a href="https://github.com/Binaryify/NeteaseCloudMusicApi/tree/master/docs">备用地址</a></p>
<p>下载后, 安装所有依赖, 在本地启动起来, 测试访问此地址是否有数据</p>
<p><img src="/2021/05/20/vue%E5%BA%94%E7%94%A81-%E7%94%A8vant%E5%92%8Cnode%E5%AE%9E%E7%8E%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%A1%88%E4%BE%8B/image-20210328231901220.png" alt="image-20210328231901220"></p>
<blockquote>
<p>总结: 前端请求本地的node项目, node服务器伪装请求去拿网易云音乐服务器数据转发回给自己前端</p>
</blockquote>
<h2 id="今日学习目标"><a href="#今日学习目标" class="headerlink" title="今日学习目标"></a>今日学习目标</h2><ol>
<li>能够掌握vant组件库的使用</li>
<li>能够掌握vant组件自定义样式能力</li>
<li>能够掌握组件库使用和文档使用能力</li>
<li>能够完成网易云音乐案例</li>
</ol>
<h2 id="1-案例-网易云音乐"><a href="#1-案例-网易云音乐" class="headerlink" title="1. 案例-网易云音乐"></a>1. 案例-网易云音乐</h2><h3 id="1-0-网易云音乐-本地接口"><a href="#1-0-网易云音乐-本地接口" class="headerlink" title="1.0 网易云音乐-本地接口"></a>1.0 网易云音乐-本地接口</h3><blockquote>
<p>目的: 请求网易云音乐服务器API接口-获取数据</p>
</blockquote>
<p><img src="/2021/05/20/vue%E5%BA%94%E7%94%A81-%E7%94%A8vant%E5%92%8Cnode%E5%AE%9E%E7%8E%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%A1%88%E4%BE%8B/image-20210512135848114.png" alt="image-20210512135848114"></p>
<blockquote>
<p>总结: 反向代理就是用本地开启cors的服务器去转发请求拿到数据</p>
</blockquote>
<h3 id="1-1-网易云音乐-本地接口启动"><a href="#1-1-网易云音乐-本地接口启动" class="headerlink" title="1.1 网易云音乐-本地接口启动"></a>1.1 网易云音乐-本地接口启动</h3><blockquote>
<p>目的: 启动本地网易云音乐API服务</p>
</blockquote>
<p>在今天的笔记铺垫中, 大家自学下载了一个项目启动即可</p>
<h3 id="1-2-网易云音乐-前端项目初始化"><a href="#1-2-网易云音乐-前端项目初始化" class="headerlink" title="1.2 网易云音乐-前端项目初始化"></a>1.2 网易云音乐-前端项目初始化</h3><blockquote>
<p>目标: 初始化项目, 下载必备包, 引入初始文件, 配置按需自动引入vant, 创建页面组件</p>
</blockquote>
<ol>
<li><p>初始化工程</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vue create music-demo</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>下载需要的所有第三方依赖包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn add axios vant vue-router </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>引入笔记代码里准备好的reset.css和flexible.js - 实现样式初始化和适配问题 - 引入到main.js</p>
</li>
<li><p>本次vant使用<strong>自动按需引入</strong>的方式</p>
<p>文档: <a href="https://vant-contrib.gitee.io/vant/#/zh-CN/quickstart">https://vant-contrib.gitee.io/vant/#/zh-CN/quickstart</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn add babel-plugin-import  -D</span><br></pre></td></tr></tbody></table></figure>

<p>在babel.config.js - 添加插件配置</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">       [<span class="string">'import'</span>, {</span><br><span class="line">           <span class="attr">libraryName</span>: <span class="string">'vant'</span>,</span><br><span class="line">           <span class="attr">libraryDirectory</span>: <span class="string">'es'</span>,</span><br><span class="line">           <span class="attr">style</span>: <span class="literal">true</span></span><br><span class="line">       }, <span class="string">'vant'</span>]</span><br><span class="line">   ]</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="1-3-网易云音乐-需求分析"><a href="#1-3-网易云音乐-需求分析" class="headerlink" title="1.3 网易云音乐-需求分析"></a>1.3 网易云音乐-需求分析</h3><p>根据需求, 创建路由所需要的5个页面的组件</p>
<p>Layout(布局, 顶部导航和底部导航) &gt; 二级路由 Home 和 Search</p>
<p>Play</p>
<p><img src="/2021/05/20/vue%E5%BA%94%E7%94%A81-%E7%94%A8vant%E5%92%8Cnode%E5%AE%9E%E7%8E%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%A1%88%E4%BE%8B/image-20210426212251154.png" alt="image-20210426212251154"></p>
<p>创建需要的views下的页面组件4个</p>
<p>views/Layout/index.vue  - 负责布局(上下导航 - 中间二级路由切换首页和搜索页面)</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 中间内容区域 - 容器样式(留好上下导航所占位置) */</span></span><br><span class="line"><span class="selector-class">.main</span> {</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">46px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>views/Home/index.vue - 标题和歌名样式</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 标题 */</span></span><br><span class="line"><span class="selector-class">.title</span> {</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.266667rem</span> <span class="number">0.24rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0.24rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 推荐歌单 - 歌名 */</span></span><br><span class="line"><span class="selector-class">.song_name</span> {</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.346667rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.08rem</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0.266667rem</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box; <span class="comment">/** 对象作为伸缩盒子模型显示 **/</span></span><br><span class="line">  -webkit-box-orient: vertical; <span class="comment">/** 设置或检索伸缩盒对象的子元素的排列方式 **/</span></span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>; <span class="comment">/** 显示的行数 **/</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden; <span class="comment">/** 隐藏超出的内容 **/</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>views/Search/index.vue</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 搜索容器的样式 */</span></span><br><span class="line"><span class="selector-class">.search_wrap</span> {</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.266667rem</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*热门搜索文字标题样式 */</span></span><br><span class="line"><span class="selector-class">.hot_title</span> {</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.32rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 热搜词_容器 */</span></span><br><span class="line"><span class="selector-class">.hot_name_wrap</span> {</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.266667rem</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 热搜词_样式 */</span></span><br><span class="line"><span class="selector-class">.hot_item</span> {</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0.853333rem</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0.213333rem</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0.213333rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.373333rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.373333rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0.853333rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#d3d4da</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.853333rem</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d4da</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>views/Play/index.vue - 直接从预习资料里复制(节省时间) - 可自己扩展阅读代码</p>
<h3 id="1-4-网易云音乐-路由准备"><a href="#1-4-网易云音乐-路由准备" class="headerlink" title="1.4 网易云音乐-路由准备"></a>1.4 网易云音乐-路由准备</h3><blockquote>
<p>目标: 准备路由配置, 显示不同路由页面</p>
</blockquote>
<p>router/index.js - 准备路由 - 以及默认显示Layout, 然后Layout默认显示二级路由的首页</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 路由-相关模块</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'@/views/Layout'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'@/views/Home'</span></span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">'@/views/Search'</span></span><br><span class="line"><span class="keyword">import</span> Play <span class="keyword">from</span> <span class="string">'@/views/Play'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">'/layout'</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/layout'</span>,</span><br><span class="line">        <span class="attr">component</span>: Layout,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">'/layout/home'</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">path</span>: <span class="string">'home'</span>,</span><br><span class="line">                <span class="attr">component</span>: Home,</span><br><span class="line">                <span class="attr">meta</span>: { <span class="comment">// meta保存路由对象额外信息的</span></span><br><span class="line">                    <span class="attr">title</span>: <span class="string">"首页"</span></span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">path</span>: <span class="string">'search'</span>,</span><br><span class="line">                <span class="attr">component</span>: Search,</span><br><span class="line">                <span class="attr">meta</span>: {</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">"搜索"</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/play'</span>,</span><br><span class="line">        <span class="attr">component</span>: Play</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter({</span><br><span class="line">    routes</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure>

<p>main.js - 引入路由对象, 注册到new Vue中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  router</span><br><span class="line">}).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue中留好router-view显示路由页面</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 把项目的框搭好, 逐个攻破</p>
</blockquote>
<h3 id="1-5-网易云音乐-Tabbar组件"><a href="#1-5-网易云音乐-Tabbar组件" class="headerlink" title="1.5 网易云音乐-Tabbar组件"></a>1.5 网易云音乐-Tabbar组件</h3><blockquote>
<p>目标: 点击底部导航, 切换路由页面显示</p>
</blockquote>
<p>文档: <a href="https://vant-contrib.gitee.io/vant/#/zh-CN/tabbar">https://vant-contrib.gitee.io/vant/#/zh-CN/tabbar</a></p>
<ol>
<li><p>注册Tabbar组件, 在main.js中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { Tabbar, TabbarItem  } <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br><span class="line">Vue.use(Tabbar);</span><br><span class="line">Vue.use(TabbarItem);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>在Layout.vue中使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class="main"&gt;</span><br><span class="line">      &lt;!-- 二级路由-挂载点 --&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;van-tabbar route&gt;</span><br><span class="line">      &lt;van-tabbar-item replace to="/layout/home" icon="home-o"</span><br><span class="line">        &gt;首页&lt;/van-tabbar-item</span><br><span class="line">      &gt;</span><br><span class="line">      &lt;van-tabbar-item replace to="/layout/search" icon="search"</span><br><span class="line">        &gt;搜索&lt;/van-tabbar-item</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/van-tabbar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* 中间内容区域 - 容器样式(留好上下导航所占位置) */</span><br><span class="line">.main {</span><br><span class="line">  padding-top: 46px;</span><br><span class="line">  padding-bottom: 50px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>开启路由模式 route属性, 和to属性指向要切换的路由路径</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-tabbar route&gt;</span><br><span class="line">    &lt;van-tabbar-item icon="home-o" to="/layout/home"</span><br><span class="line">                     &gt;首页&lt;/van-tabbar-item</span><br><span class="line">        &gt;</span><br><span class="line">    &lt;van-tabbar-item icon="search" to="/layout/search"</span><br><span class="line">                     &gt;搜索&lt;/van-tabbar-item</span><br><span class="line">        &gt;</span><br><span class="line">&lt;/van-tabbar&gt;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<blockquote>
<p>总结: van-tabbar开启route</p>
</blockquote>
<h3 id="1-6-网易云音乐-NavBar导航组件"><a href="#1-6-网易云音乐-NavBar导航组件" class="headerlink" title="1.6 网易云音乐-NavBar导航组件"></a>1.6 网易云音乐-NavBar导航组件</h3><blockquote>
<p>目标: 实现顶部标题展示</p>
</blockquote>
<p>文档: <a href="https://vant-contrib.gitee.io/vant/#/zh-CN/nav-bar">https://vant-contrib.gitee.io/vant/#/zh-CN/nav-bar</a></p>
<ol>
<li><p>main.js - 注册NavBar组件</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { NavBar } <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br><span class="line">Vue.use(NavBar);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>复制文档里的, 然后删删只留标题</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-nav-bar :title="activeTitle" fixed /&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        activeTitle: "首页"</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="1-7-网易云音乐-NavBar标题切换"><a href="#1-7-网易云音乐-NavBar标题切换" class="headerlink" title="1.7 网易云音乐-NavBar标题切换"></a>1.7 网易云音乐-NavBar标题切换</h3><blockquote>
<p>目标: 实现点击底部导航/刷新非第一页面页面, 导航标题正确显示</p>
</blockquote>
<ul>
<li><p>在router/index.js - 给$route里需要导航标题的添加meta元信息属性</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/layout'</span>,</span><br><span class="line">        <span class="attr">component</span>: Layout,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">'/layout/home'</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">path</span>: <span class="string">'home'</span>,</span><br><span class="line">                <span class="attr">component</span>: Home,</span><br><span class="line">                <span class="attr">meta</span>: { <span class="comment">// meta保存路由对象额外信息的</span></span><br><span class="line">                    <span class="attr">title</span>: <span class="string">"首页"</span></span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">path</span>: <span class="string">'search'</span>,</span><br><span class="line">                <span class="attr">component</span>: Search,</span><br><span class="line">                <span class="attr">meta</span>: {</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">"搜索"</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure>

<p>Layout.vue中监听$route改变:</p>
<p>给导航active的值设置$route里的元信息的标题</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">activeTitle</span>: <span class="built_in">this</span>.$route.meta.title, <span class="comment">// "默认"顶部导航要显示的标题 (默认获取当前路由对象里的meta中title值)</span></span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 路由切换 - 侦听$route对象改变</span></span><br><span class="line">  <span class="attr">watch</span>: {</span><br><span class="line">    $route() {</span><br><span class="line">      <span class="built_in">this</span>.activeTitle = <span class="built_in">this</span>.$route.meta.title; <span class="comment">// 提取切换后路由信息对象里的title显示</span></span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<blockquote>
<p>总结: 点击底部导航和刷新当前网页, 都能保证导航标题的正确显示</p>
</blockquote>
<h3 id="1-8-网易云音乐-网络请求封装"><a href="#1-8-网易云音乐-网络请求封装" class="headerlink" title="1.8 网易云音乐-网络请求封装"></a>1.8 网易云音乐-网络请求封装</h3><blockquote>
<p>目标: 不想把网络请求散落在各个逻辑页面里, 不然以后找起来改起来很麻烦</p>
</blockquote>
<ol>
<li><p>封装utils/request.js - 基于axios进行二次封装 - 设置基础地址</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 网络请求 - 二次封装</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">"http://localhost:3000"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>封装src/api/Home.js</p>
<p>统一封装网络请求方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名-尽量和模块页面文件名统一(方便查找)</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首页 - 推荐歌单</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> recommendMusic = <span class="function"><span class="params">params</span> =&gt;</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/personalized'</span>,</span><br><span class="line">    params</span><br><span class="line">    <span class="comment">// 将来外面可能传入params的值 {limit: 20}</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>在src/api/index.js - 统一导出接口供外部使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// api文件夹下 各个请求模块js, 都统一来到index.js再向外导出</span></span><br><span class="line"><span class="keyword">import</span> {recommendMusic} <span class="keyword">from</span> <span class="string">'./Home'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> recommendMusicAPI = recommendMusic <span class="comment">// 请求推荐歌单的方法导出</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>在main.js - 测试使用一下.</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { recommendMusicAPI } <span class="keyword">from</span> <span class="string">'@/api/index'</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>)</span>{</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> recommendMusicAPI({<span class="attr">limit</span>: <span class="number">6</span>});</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">}</span><br><span class="line">myFn();</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<blockquote>
<p> 总结: 封装网络请求方法目的, 方便我们统一管理</p>
</blockquote>
<h3 id="1-9-网易云音乐-首页-推荐歌单"><a href="#1-9-网易云音乐-首页-推荐歌单" class="headerlink" title="1.9 网易云音乐-首页-推荐歌单"></a>1.9 网易云音乐-首页-推荐歌单</h3><p>接口地址: /personalized</p>
<ol>
<li><p>布局采用van-row和van-col </p>
<p>布局文档<a href="https://vant-contrib.gitee.io/vant/#/zh-CN/col">https://vant-contrib.gitee.io/vant/#/zh-CN/col</a></p>
</li>
<li><p>使用vant内置的图片组件来显示图片</p>
</li>
<li><p>在main.js注册使用的组件</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { Col, Row, Image <span class="keyword">as</span> VanImage } <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Col);</span><br><span class="line">Vue.use(Row);</span><br><span class="line">Vue.use(VanImage);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>在api/index.js下定义推荐歌单的接口方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 首页 - 推荐歌单</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> recommendMusic = <span class="function"><span class="params">params</span> =&gt;</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/personalized'</span>,</span><br><span class="line">    params</span><br><span class="line">    <span class="comment">// 将来外面可能传入params的值 {limit: 20}</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>把数据请求回来, 用van-image和p标签展示推荐歌单和歌单名字</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;p class="title"&gt;推荐歌单&lt;/p&gt;</span><br><span class="line">    &lt;van-row gutter="6"&gt;</span><br><span class="line">      &lt;van-col span="8" v-for="obj in reList" :key="obj.id"&gt;</span><br><span class="line">        &lt;van-image width="100%" height="3rem" fit="cover" :src="obj.picUrl" /&gt;</span><br><span class="line">        &lt;p class="song_name"&gt;{{ obj.name }}&lt;/p&gt;</span><br><span class="line">      &lt;/van-col&gt;</span><br><span class="line">    &lt;/van-row&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import { recommendMusicAPI } from "@/api";</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">       reList: [], // 推荐歌单数据</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  async created() {</span><br><span class="line">    const res = await recommendMusicAPI({</span><br><span class="line">      limit: 6,</span><br><span class="line">    });</span><br><span class="line">    console.log(res);</span><br><span class="line">    this.reList = res.data.result;</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="1-10-网易云音乐-首页-最新音乐"><a href="#1-10-网易云音乐-首页-最新音乐" class="headerlink" title="1.10 网易云音乐- 首页-最新音乐"></a>1.10 网易云音乐- 首页-最新音乐</h3><blockquote>
<p>目标: van-cell单元格使用</p>
</blockquote>
<p>请求地址: /personalized/newsong</p>
<ol>
<li><p>引入van-cell使用 - 注册组件main.js中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> {Cell} <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br><span class="line">Vue.use(Cell);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>定义接口请求方法 - api/index.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 首页 - 推荐最新音乐</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> newMusic = <span class="function"><span class="params">params</span> =&gt;</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">"/personalized/newsong"</span>,</span><br><span class="line">    params</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>列表数据铺设 - 插入自定义标签</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p class="title"&gt;推荐歌单&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;van-row gutter="5"&gt;</span><br><span class="line">        &lt;van-col span="8" v-for="obj in recommendList" :key="obj.id"&gt;</span><br><span class="line">          &lt;van-image fit="cover" :src="obj.picUrl" /&gt;</span><br><span class="line">          &lt;p class="song_name"&gt;{{ obj.name }}&lt;/p&gt;</span><br><span class="line">        &lt;/van-col&gt;</span><br><span class="line">      &lt;/van-row&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p class="title"&gt;最新音乐&lt;/p&gt;</span><br><span class="line">    &lt;van-cell center v-for="obj in songList" :key="obj.id" :title="obj.name" :label="obj.song.artists[0].name + ' - ' + obj.name"&gt;</span><br><span class="line">        &lt;template #right-icon&gt;</span><br><span class="line">          &lt;van-icon name="play-circle-o" size="0.6rem"/&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/van-cell&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import { recommendMusicAPI, newMusicAPI } from "@/api";</span><br><span class="line">export default {</span><br><span class="line">   data() {</span><br><span class="line">    return {</span><br><span class="line">      reList: [], // 推荐歌单数据</span><br><span class="line">      songList: [], // 最新音乐数据</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  async created() {</span><br><span class="line">    const res = await recommendMusicAPI({</span><br><span class="line">      limit: 6,</span><br><span class="line">    });</span><br><span class="line">    console.log(res);</span><br><span class="line">    this.reList = res.data.result;</span><br><span class="line"></span><br><span class="line">    const res2 = await newMusicAPI({</span><br><span class="line">      limit: 20</span><br><span class="line">    })</span><br><span class="line">    console.log(res2);</span><br><span class="line">    this.songList = res2.data.result</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="1-11-网易云音乐-搜索-热搜关键字"><a href="#1-11-网易云音乐-搜索-热搜关键字" class="headerlink" title="1.11 网易云音乐-搜索-热搜关键字"></a>1.11 网易云音乐-搜索-热搜关键字</h3><blockquote>
<p>目标: 完成热搜关键字铺设</p>
</blockquote>
<p>搜索框 – van-search组件</p>
<p>api/Search.js – 热搜关键字 - 接口方法</p>
<p>Search/index.vue引入-获取热搜关键字 - 铺设页面</p>
<p>点击文字填充到输入框</p>
<ol>
<li>准备搜索界面标签</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;van-search</span><br><span class="line">      shape="round"</span><br><span class="line">      placeholder="请输入搜索关键词"</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;!-- 搜索下容器 --&gt;</span><br><span class="line">    &lt;div class="search_wrap"&gt;</span><br><span class="line">      &lt;!-- 标题 --&gt;</span><br><span class="line">      &lt;p class="hot_title"&gt;热门搜索&lt;/p&gt;</span><br><span class="line">      &lt;!-- 热搜关键词容器 --&gt;</span><br><span class="line">      &lt;div class="hot_name_wrap"&gt;</span><br><span class="line">        &lt;!-- 每个搜索关键词 --&gt;</span><br><span class="line">        &lt;span</span><br><span class="line">          class="hot_item"</span><br><span class="line">          &gt;热搜关键字&lt;/span</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* 搜索容器的样式 */</span><br><span class="line">.search_wrap {</span><br><span class="line">  padding: 0.266667rem;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/*热门搜索文字标题样式 */</span><br><span class="line">.hot_title {</span><br><span class="line">  font-size: 0.32rem;</span><br><span class="line">  color: #666;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/* 热搜词_容器 */</span><br><span class="line">.hot_name_wrap {</span><br><span class="line">  margin: 0.266667rem 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/* 热搜词_样式 */</span><br><span class="line">.hot_item {</span><br><span class="line">  display: inline-block;</span><br><span class="line">  height: 0.853333rem;</span><br><span class="line">  margin-right: 0.213333rem;</span><br><span class="line">  margin-bottom: 0.213333rem;</span><br><span class="line">  padding: 0 0.373333rem;</span><br><span class="line">  font-size: 0.373333rem;</span><br><span class="line">  line-height: 0.853333rem;</span><br><span class="line">  color: #333;</span><br><span class="line">  border-color: #d3d4da;</span><br><span class="line">  border-radius: 0.853333rem;</span><br><span class="line">  border: 1px solid #d3d4da;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/* 给单元格设置底部边框 */</span><br><span class="line">.van-cell {</span><br><span class="line">  border-bottom: 1px solid lightgray;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>api/Search.js - 定义热门搜索接口方法和搜索结果方法</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 热搜关键字</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hotSearch = <span class="function">() =&gt;</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/search/hot'</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索结果列表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> searchResult = <span class="function"><span class="params">params</span> =&gt;</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/cloudsearch'</span>,</span><br><span class="line">    params</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>api/index.js - 导入使用并统一导出</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 统一出口</span></span><br><span class="line"><span class="comment">// 你也可以在逻辑页面里.vue中直接引入@/api/Home下的网络请求工具方法</span></span><br><span class="line"><span class="comment">// 为什么: 我们可以把api所有的方法都统一到一处. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> {recommendMusic, hotMusic} <span class="keyword">from</span> <span class="string">'@/api/Home'</span></span><br><span class="line"><span class="keyword">import</span> {hotSearch, searchResult} <span class="keyword">from</span> <span class="string">'@/api/Search'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> recommendMusicAPI = recommendMusic <span class="comment">// 把网络请求方法拿过来 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hotMusicAPI = hotMusic <span class="comment">// 把获取最新音乐的, 网络请求方法导出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hotSearchAPI = hotSearch <span class="comment">// 热搜</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> searchResultAPI = searchResult <span class="comment">// 搜索结果</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>created中请求接口-拿到热搜关键词列表</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 每个搜索关键词 --&gt;</span><br><span class="line">&lt;span</span><br><span class="line">      class="hot_item"</span><br><span class="line">      v-for="(obj, index) in hotArr"</span><br><span class="line">      :key="index"</span><br><span class="line">      &gt;{{ obj.first }}&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 目标: 铺设热搜关键字</span><br><span class="line">    // 1. 搜索框van-search组件, 关键词标签和样式</span><br><span class="line">    // 2. 找接口, api/Search.js里定义获取搜索关键词的请求方法</span><br><span class="line">    // 3. 引入到当前页面, 调用接口拿到数据循环铺设页面</span><br><span class="line">    // 4. 点击关键词把值赋予给van-search的v-model变量</span><br><span class="line">    import { hotSearchAPI } from "@/api";</span><br><span class="line">    export default {</span><br><span class="line">        data(){</span><br><span class="line">            return {</span><br><span class="line">                hotArr: [], // 热搜关键字</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        async created() {</span><br><span class="line">            const res = await hotSearchAPI();</span><br><span class="line">            console.log(res);</span><br><span class="line">            this.hotArr = res.data.result.hots;</span><br><span class="line">        },</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<ol start="5">
<li>点击热词填充到输入框</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;van-search</span><br><span class="line">            shape="round"</span><br><span class="line">            v-model="value"</span><br><span class="line">            placeholder="请输入搜索关键词"</span><br><span class="line">            /&gt;</span><br><span class="line">&lt;!-- 每个搜索关键词 --&gt;</span><br><span class="line">&lt;span</span><br><span class="line">      class="hot_item"</span><br><span class="line">      v-for="(obj, index) in hotArr"</span><br><span class="line">      :key="index"</span><br><span class="line">      @click="fn(obj.first)"</span><br><span class="line">      &gt;{{ obj.first }}&lt;/span</span><br><span class="line">    &gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        data(){</span><br><span class="line">            return {</span><br><span class="line">                value: "",</span><br><span class="line">                hotArr: [], // 热搜关键字</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        // ...省略了created</span><br><span class="line">        methods: {</span><br><span class="line">            async fn(val) {</span><br><span class="line">                // 点击热搜关键词</span><br><span class="line">                this.value = val; // 选中的关键词显示到搜索框</span><br><span class="line">            },</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 写好标签和样式, 拿到数据循环铺设, 点击关键词填入到van-search中</p>
</blockquote>
<h3 id="1-12-网易云音乐-搜索-点击热词-搜索结果"><a href="#1-12-网易云音乐-搜索-点击热词-搜索结果" class="headerlink" title="1.12 网易云音乐-搜索-点击热词-搜索结果"></a>1.12 网易云音乐-搜索-点击热词-搜索结果</h3><blockquote>
<p>目标: 点击热词填充到输入框-出搜索结果</p>
</blockquote>
<p>api/Search.js - 搜索结果, 接口方法</p>
<p>Search/index.vue引入-获取搜索结果 - 铺设页面</p>
<p>和热搜关键字容器 – 互斥显示</p>
<p>点击文字填充到输入框, 请求搜索结果铺设</p>
<ol>
<li>搜索结果显示区域标签+样式(直接复制/vant文档找)</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 搜索结果 --&gt;</span><br><span class="line">    &lt;div class="search_wrap"&gt;</span><br><span class="line">      &lt;!-- 标题 --&gt;</span><br><span class="line">      &lt;p class="hot_title"&gt;最佳匹配&lt;/p&gt;</span><br><span class="line">      &lt;van-cell</span><br><span class="line">        center</span><br><span class="line">        title='结果名字'</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;template #right-icon&gt;</span><br><span class="line">          &lt;van-icon name="play-circle-o" size="0.6rem"/&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/van-cell&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>点击 - 获取搜索结果 - 循环铺设页面</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;van-search shape="round" v-model="value" placeholder="请输入搜索关键词" /&gt;</span><br><span class="line">    &lt;!-- 搜索下容器 --&gt;</span><br><span class="line">    &lt;div class="search_wrap"&gt;</span><br><span class="line">      &lt;!-- 标题 --&gt;</span><br><span class="line">      &lt;p class="hot_title"&gt;热门搜索&lt;/p&gt;</span><br><span class="line">      &lt;!-- 热搜关键词容器 --&gt;</span><br><span class="line">      &lt;div class="hot_name_wrap"&gt;</span><br><span class="line">        &lt;!-- 每个搜索关键词 --&gt;</span><br><span class="line">        &lt;span</span><br><span class="line">          class="hot_item"</span><br><span class="line">          v-for="(obj, index) in hotArr"</span><br><span class="line">          :key="index"</span><br><span class="line">          @click="fn(obj.first)"</span><br><span class="line">          &gt;{{ obj.first }}&lt;/span</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 搜索结果 --&gt;</span><br><span class="line">    &lt;div class="search_wrap"&gt;</span><br><span class="line">      &lt;!-- 标题 --&gt;</span><br><span class="line">      &lt;p class="hot_title"&gt;最佳匹配&lt;/p&gt;</span><br><span class="line">      &lt;van-cell</span><br><span class="line">        center</span><br><span class="line">        v-for="obj in resultList"</span><br><span class="line">        :key="obj.id"</span><br><span class="line">        :title="obj.name"</span><br><span class="line">        :label="obj.ar[0].name + ' - ' + obj.name"</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;template #right-icon&gt;</span><br><span class="line">          &lt;van-icon name="play-circle-o" size="0.6rem"/&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/van-cell&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 铺设热搜关键字</span><br><span class="line">// 1. 搜索框van-search组件, 关键词标签和样式</span><br><span class="line">// 2. 找接口, api/Search.js里定义获取搜索关键词的请求方法</span><br><span class="line">// 3. 引入到当前页面, 调用接口拿到数据循环铺设页面</span><br><span class="line">// 4. 点击关键词把值赋予给van-search的v-model变量</span><br><span class="line"></span><br><span class="line">// 目标: 铺设搜索结果</span><br><span class="line">// 1. 找到搜索结果的接口 - api/Search.js定义请求方法</span><br><span class="line">// 2. 再定义methods里getListFn方法(获取数据)</span><br><span class="line">// 3. 在点击事件方法里调用getListFn方法拿到搜索结果数据</span><br><span class="line">// 4. 铺设页面(首页van-cell标签复制过来)</span><br><span class="line">// 5. 把数据保存到data后, 循环van-cell使用即可(切换歌手字段)</span><br><span class="line">// 6. 互斥显示搜索结果和热搜关键词</span><br><span class="line">import { hotSearchAPI, searchResultListAPI } from "@/api";</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      value: "",</span><br><span class="line">      hotArr: [], // 热搜关键字</span><br><span class="line">      resultList: [], // 搜索结果</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  async created() {</span><br><span class="line">    const res = await hotSearchAPI();</span><br><span class="line">    console.log(res);</span><br><span class="line">    this.hotArr = res.data.result.hots;</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    async getListFn() {</span><br><span class="line">      return await searchResultListAPI({</span><br><span class="line">        keywords: this.value,</span><br><span class="line">        limit: 20,</span><br><span class="line">      }); // 把搜索结果return出去</span><br><span class="line">      // (难点):</span><br><span class="line">      // async修饰的函数 -&gt; 默认返回一个全新Promise对象</span><br><span class="line">      // 这个Promise对象的结果就是async函数内return的值</span><br><span class="line">      // 拿到getListFn的返回值用await提取结果</span><br><span class="line">    },</span><br><span class="line">    async fn(val) {</span><br><span class="line">      // 点击热搜关键词</span><br><span class="line">      this.value = val; // 选中的关键词显示到搜索框</span><br><span class="line">      const res = await this.getListFn();</span><br><span class="line">      console.log(res);</span><br><span class="line">      this.resultList = res.data.result.songs;</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>互斥显示, 热搜关键词和搜索结果列表</li>
</ol>
<p><img src="/2021/05/20/vue%E5%BA%94%E7%94%A81-%E7%94%A8vant%E5%92%8Cnode%E5%AE%9E%E7%8E%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%A1%88%E4%BE%8B/image-20210512142504929.png" alt="image-20210512142504929"></p>
<blockquote>
<p>总结: 点击热词后, 调用接口传入关键词, 返回数据铺设</p>
</blockquote>
<h3 id="1-13-网易云音乐-输入框-搜索结果"><a href="#1-13-网易云音乐-输入框-搜索结果" class="headerlink" title="1.13 网易云音乐-输入框-搜索结果"></a>1.13 网易云音乐-输入框-搜索结果</h3><blockquote>
<p>目标: 监测输入框改变-拿到搜索结果</p>
</blockquote>
<p>观察van-search组件是否支持和实现input事件</p>
<p>绑定@input事件和方法</p>
<p>在事件处理方法中获取对应的值使用</p>
<p>如果搜索不存在的数据-要注意接口返回字段不同</p>
<ol>
<li>绑定@input事件在van-search上</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-search shape="round" v-model="value" placeholder="请输入搜索关键词" @input="inputFn"/&gt;</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>实现输入框改变 - 获取搜索结果铺设</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">inputFn</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="comment">// 输入框值改变</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.value.length === <span class="number">0</span>) {</span><br><span class="line">        <span class="comment">// 搜索关键词如果没有, 就把搜索结果清空阻止网络请求发送(提前return)</span></span><br><span class="line">        <span class="built_in">this</span>.resultList = [];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.getListFn();</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="comment">// 如果搜索结果响应数据没有songs字段-无数据</span></span><br><span class="line">    <span class="keyword">if</span> (res.data.result.songs === <span class="literal">undefined</span>) {</span><br><span class="line">        <span class="built_in">this</span>.resultList = [];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">this</span>.resultList = res.data.result.songs;</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 监测输入框改变-保存新的关键词去请求结果回来铺设</p>
</blockquote>
<h3 id="1-14-网易云音乐-搜索结果-加载更多"><a href="#1-14-网易云音乐-搜索结果-加载更多" class="headerlink" title="1.14 网易云音乐-搜索结果-加载更多"></a>1.14 网易云音乐-搜索结果-加载更多</h3><blockquote>
<p>目标: 触底后, 加载下一页数据</p>
</blockquote>
<p>观察接口文档: 发现需要传入offset和分页公式</p>
<p>van-list组件监测触底执行onload事件</p>
<p>配合后台接口, 传递下一页的标识</p>
<p>拿到下一页数据后追加到当前数组末尾即可</p>
<ol>
<li>设置van-list组件实现相应的属性和方法, 让page++去请求下页数据</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">      &lt;van-list</span><br><span class="line">        v-model="loading"</span><br><span class="line">        :finished="finished"</span><br><span class="line">        finished-text="没有更多了"</span><br><span class="line">        @load="onLoad"</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;van-cell</span><br><span class="line">          center</span><br><span class="line">          v-for="obj in resultList"</span><br><span class="line">          :key="obj.id"</span><br><span class="line">          :title="obj.name"</span><br><span class="line">          :label="obj.ar[0].name + ' - ' + obj.name"</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;template #right-icon&gt;</span><br><span class="line">            &lt;van-icon name="play-circle-o" size="0.6rem" /&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/van-cell&gt;</span><br><span class="line">      &lt;/van-list&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 加载更多</span><br><span class="line">// 1. 集成list组件-定义相关的变量(搞懂变量的作用) -监测触底事件</span><br><span class="line">// 2. 一旦触底, 自动执行onload方法</span><br><span class="line">// 3. 对page++, 给后台传递offset偏移量参数-请求下一页的数据</span><br><span class="line">// 4. 把当前数据和下一页新来的数据拼接起来用在当前 页面的数组里</span><br><span class="line">// (切记) - 加载更多数据后,一定要把loading改成false, 保证下一次还能触发onload方法</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      value: "",</span><br><span class="line">      hotArr: [], // 热搜关键字</span><br><span class="line">      resultList: [], // 搜索结果</span><br><span class="line">      loading: false, // 加载中 (状态) - 只有为false, 才能触底后自动触发onload方法</span><br><span class="line">      finished: false, // 未加载全部 (如果设置为true, 底部就不会再次执行onload, 代表全部加载完成)</span><br><span class="line">      page: 1, // 当前搜索结果的页码</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  // ...省略其他</span><br><span class="line">  methods: {</span><br><span class="line">    async getListFn() {</span><br><span class="line">      return await searchResultListAPI({</span><br><span class="line">        keywords: this.value,</span><br><span class="line">        limit: 20,</span><br><span class="line">        offset: (this.page - 1) * 20, // 固定公式</span><br><span class="line">      }); // 把搜索结果return出去</span><br><span class="line">      // (难点):</span><br><span class="line">      // async修饰的函数 -&gt; 默认返回一个全新Promise对象</span><br><span class="line">      // 这个Promise对象的结果就是async函数内return的值</span><br><span class="line">      // 拿到getListFn的返回值用await提取结果</span><br><span class="line">    },</span><br><span class="line">    async onLoad() {</span><br><span class="line">      // 触底事件(要加载下一页的数据咯), 内部会自动把loading改为true</span><br><span class="line">      this.page++;</span><br><span class="line">      const res = await this.getListFn();</span><br><span class="line">      this.resultList = [...this.resultList, ...res.data.result.songs];</span><br><span class="line">      this.loading = false; // 数据加载完毕-保证下一次还能触发onload</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: list组件负责UI层监测触底, 执行onload函数, page++, 请求下页数据, 和现在数据合并显示更多, 设置loading为false, 确保下次触底还能执行onLoad</p>
</blockquote>
<h3 id="1-15-网易云音乐-加载更多-bug修复"><a href="#1-15-网易云音乐-加载更多-bug修复" class="headerlink" title="1.15 网易云音乐-加载更多-bug修复"></a>1.15 网易云音乐-加载更多-bug修复</h3><blockquote>
<p>目标: 如果只有一页数据/无数据判断</p>
</blockquote>
<p>无数据/只有一页数据, finished为true</p>
<p>防止list组件触底再加载更多</p>
<p>还要测试-按钮点击/输入框有数据情况的加载更多</p>
<p>正确代码</p>
<figure class="highlight diff"><table><tbody><tr><td class="code"><pre><span class="line"> async fn(val) {</span><br><span class="line">      // 点击热搜关键词</span><br><span class="line"><span class="addition">+        this.finished = false; // 点击新关键词-可能有新的数据</span></span><br><span class="line">      this.value = val; // 选中的关键词显示到搜索框</span><br><span class="line">      const res = await this.getListFn();</span><br><span class="line">      console.log(res);</span><br><span class="line">      this.resultList = res.data.result.songs;</span><br><span class="line"><span class="addition">+        this.loading = false; // 本次数据加载完毕-才能让list加载更多</span></span><br><span class="line">    },</span><br><span class="line">    async inputFn() {</span><br><span class="line"><span class="addition">+       this.finished = false // 输入框关键字改变-可能有新数据(不一定加载完成了)</span></span><br><span class="line">      // 输入框值改变</span><br><span class="line">      if (this.value.length <span class="comment">=== 0) {</span></span><br><span class="line">        // 搜索关键词如果没有, 就把搜索结果清空阻止网络请求发送(提前return)</span><br><span class="line">        this.resultList = [];</span><br><span class="line">        return;</span><br><span class="line">      }</span><br><span class="line">      const res = await this.getListFn();</span><br><span class="line">      console.log(res);</span><br><span class="line">      </span><br><span class="line"><span class="addition">+      // 如果搜索结果响应数据没有songs字段-无数据</span></span><br><span class="line"><span class="addition">+      if (res.data.result.songs === undefined) {</span></span><br><span class="line"><span class="addition">+        this.resultList = [];</span></span><br><span class="line"><span class="addition">+        return;</span></span><br><span class="line"><span class="addition">+      }</span></span><br><span class="line">      this.resultList = res.data.result.songs;</span><br><span class="line"><span class="addition">+        this.loading = false;</span></span><br><span class="line">    },</span><br><span class="line">    async onLoad() {</span><br><span class="line">      // 触底事件(要加载下一页的数据咯), 内部会自动把loading改为true</span><br><span class="line">      this.page++;</span><br><span class="line">      const res = await this.getListFn();</span><br><span class="line"><span class="addition">+        if (res.data.result.songs === undefined) { // 没有更多数据了</span></span><br><span class="line"><span class="addition">+          this.finished = true; // 全部加载完成(list不会在触发onload方法)</span></span><br><span class="line"><span class="addition">+          this.loading = false; // 本次加载完成</span></span><br><span class="line"><span class="addition">+          return;</span></span><br><span class="line"><span class="addition">+        }</span></span><br><span class="line">      this.resultList = [...this.resultList, ...res.data.result.songs];</span><br><span class="line"><span class="addition">+      this.loading = false; // 数据加载完毕-保证下一次还能触发onload</span></span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 在3个函数 上和下, 设置finished还未完成, 最后要把loading改成false, 判断songs字段, 对这里的值要非常熟悉才可以</p>
</blockquote>
<h3 id="1-16-网易云音乐-输入框-防抖"><a href="#1-16-网易云音乐-输入框-防抖" class="headerlink" title="1.16 网易云音乐-输入框-防抖"></a>1.16 网易云音乐-输入框-防抖</h3><blockquote>
<p>目标: 输入框触发频率过高</p>
</blockquote>
<p>输入框输入”asdfghjkl”</p>
<p>​    接着快速的删除</p>
<p>​    每次改变-马上发送网络请求</p>
<p>​    网络请求异步耗时 – 数据回来后还是铺设到页面上</p>
<p>解决:</p>
<p>​    引入防抖功能</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">inputFn</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="comment">// 目标: 输入框改变-逻辑代码-慢点执行</span></span><br><span class="line">    <span class="comment">// 解决: 防抖</span></span><br><span class="line">    <span class="comment">// 概念: 计时n秒, 最后执行一次, 如果再次触发, 重新计时</span></span><br><span class="line">    <span class="comment">// 效果: 用户在n秒内不触发这个事件了, 才会开始执行逻辑代码</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.timer) <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timer);</span><br><span class="line">    <span class="built_in">this</span>.timer = <span class="built_in">setTimeout</span>(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">        <span class="built_in">this</span>.finished = <span class="literal">false</span>; <span class="comment">// 输入框关键字改变-可能有新数据(不一定加载完成了)</span></span><br><span class="line">        <span class="comment">// 输入框值改变</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.value.length === <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">// 搜索关键词如果没有, 就把搜索结果清空阻止网络请求发送(提前return)</span></span><br><span class="line">            <span class="built_in">this</span>.resultList = [];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.getListFn();</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="comment">// 如果搜索结果响应数据没有songs字段-无数据</span></span><br><span class="line">        <span class="keyword">if</span> (res.data.result.songs === <span class="literal">undefined</span>) {</span><br><span class="line">            <span class="built_in">this</span>.resultList = [];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">this</span>.resultList = res.data.result.songs;</span><br><span class="line">        <span class="built_in">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">    }, <span class="number">900</span>);</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 降低函数执行频率</p>
</blockquote>
<h3 id="1-17-网易云音乐-页码bug修复"><a href="#1-17-网易云音乐-页码bug修复" class="headerlink" title="1.17 网易云音乐-页码bug修复"></a>1.17 网易云音乐-页码bug修复</h3><blockquote>
<p>目标: 第一个关键词page已经+到了10, 再第二个关键词应该从1开始</p>
</blockquote>
<p>加载更多时, page已经往后计数了</p>
<p>重新获取时, page不是从第一页获取的</p>
<p>点击搜索/输入框搜索时, 把page改回1</p>
<p>代码如下:</p>
<figure class="highlight diff"><table><tbody><tr><td class="code"><pre><span class="line"> async fn(val) {</span><br><span class="line">      // 点击热搜关键词</span><br><span class="line"><span class="addition">+      this.page = 1; // 点击重新获取第一页数据</span></span><br><span class="line">      this.finished = false; // 点击新关键词-可能有新的数据</span><br><span class="line">      this.value = val; // 选中的关键词显示到搜索框</span><br><span class="line">      const res = await this.getListFn();</span><br><span class="line">      console.log(res);</span><br><span class="line">      this.resultList = res.data.result.songs;</span><br><span class="line">      this.loading = false; // 本次数据加载完毕-才能让list加载更多</span><br><span class="line"> },</span><br><span class="line"> async inputFn() {</span><br><span class="line">      // 目标: 输入框改变-逻辑代码-慢点执行</span><br><span class="line">      // 解决: 防抖</span><br><span class="line">      // 概念: 计时n秒, 最后执行一次, 如果再次触发, 重新计时</span><br><span class="line">      // 效果: 用户在n秒内不触发这个事件了, 才会开始执行逻辑代码</span><br><span class="line">      if (this.timer) clearTimeout(this.timer);</span><br><span class="line">      this.timer = setTimeout(async () =&gt; {</span><br><span class="line"><span class="addition">+        this.page = 1; // 点击重新获取第一页数据</span></span><br><span class="line">        this.finished = false; // 输入框关键字改变-可能有新数据(不一定加载完成了)</span><br><span class="line">        // 输入框值改变</span><br><span class="line">        if (this.value.length <span class="comment">=== 0) {</span></span><br><span class="line">          // 搜索关键词如果没有, 就把搜索结果清空阻止网络请求发送(提前return)</span><br><span class="line">          this.resultList = [];</span><br><span class="line">          return;</span><br><span class="line">        }</span><br><span class="line">        const res = await this.getListFn();</span><br><span class="line">        console.log(res);</span><br><span class="line">        // 如果搜索结果响应数据没有songs字段-无数据</span><br><span class="line">        if (res.data.result.songs <span class="comment">=== undefined) {</span></span><br><span class="line">          this.resultList = [];</span><br><span class="line">          return;</span><br><span class="line">        }</span><br><span class="line">        this.resultList = res.data.result.songs;</span><br><span class="line">        this.loading = false;</span><br><span class="line">      }, 900);</span><br><span class="line"> },</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 切换时, 让page页面回到1</p>
</blockquote>
<h3 id="1-18-网易云音乐-Layout边距优化"><a href="#1-18-网易云音乐-Layout边距优化" class="headerlink" title="1.18 网易云音乐-Layout边距优化"></a>1.18 网易云音乐-Layout边距优化</h3><blockquote>
<p>目标: 上下导航会盖住中间内容</p>
</blockquote>
<p>我们的头部导航和底部导航挡住了中间内容</p>
<p>给中间路由页面设置上下内边距即可</p>
<p>在Layout/index.vue中</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 中间内容区域 - 容器样式(留好上下导航所占位置) */</span></span><br><span class="line"><span class="selector-class">.main</span> {</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">46px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="1-19-网易云音乐-SongItem封装"><a href="#1-19-网易云音乐-SongItem封装" class="headerlink" title="1.19 网易云音乐-SongItem封装"></a>1.19 网易云音乐-SongItem封装</h3><blockquote>
<p>目标: 把首页和搜索结果的歌曲cell封装起来</p>
</blockquote>
<p><img src="/2021/05/20/vue%E5%BA%94%E7%94%A81-%E7%94%A8vant%E5%92%8Cnode%E5%AE%9E%E7%8E%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%A1%88%E4%BE%8B/image-20210512144538038.png" alt="image-20210512144538038"></p>
<p>创建src/components/SongItem.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;van-cell center :title="name" :label="author + ' - ' + name"&gt;</span><br><span class="line">    &lt;template #right-icon&gt;</span><br><span class="line">      &lt;van-icon name="play-circle-o" size="0.6rem"/&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/van-cell&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  props: {</span><br><span class="line">    name: String, // 歌名</span><br><span class="line">    author: String, // 歌手</span><br><span class="line">    id: Number, // 歌曲id (标记这首歌曲-为将来跳转播放页做准备)</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* 给单元格设置底部边框 */</span><br><span class="line">.van-cell {</span><br><span class="line">  border-bottom: 1px solid lightgray;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>Home/index.vue - 重构</p>
<p>==注意: author字段不同==</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;SongItem v-for="obj in songList"</span><br><span class="line">    :key="obj.id"</span><br><span class="line">    :name="obj.name"</span><br><span class="line">    :author="obj.song.artists[0].name"</span><br><span class="line">    :id="obj.id"</span><br><span class="line">&gt;&lt;/SongItem&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>Search/index.vue - 重构</p>
<p>==注意: author字段不同==</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;SongItem</span><br><span class="line">          v-for="obj in resultList"</span><br><span class="line">          :key="obj.id"</span><br><span class="line">          :name="obj.name"</span><br><span class="line">          :author="obj.ar[0].name"</span><br><span class="line">          :id="obj.id"</span><br><span class="line">&gt;&lt;/SongItem&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 遇到重复标签要封装</p>
</blockquote>
<h3 id="1-20-网易云音乐-播放音乐"><a href="#1-20-网易云音乐-播放音乐" class="headerlink" title="1.20 网易云音乐-播放音乐"></a>1.20 网易云音乐-播放音乐</h3><blockquote>
<p>目标: 从预习资料拿到播放的api和页面, 配置好路由规则</p>
</blockquote>
<p>==时间关系,这个页面不用写, 直接用, 注释在备课代码里写好了==</p>
<p>组件SongItem里 – 点击事件</p>
<p>api/Play.js – 提前准备好 – 接口方法</p>
<p>跳转到Play页面 – 把歌曲id带过进去</p>
<p>在SongItem.vue - 点击播放字体图标</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">methods: {</span><br><span class="line">    <span class="function"><span class="title">playFn</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">this</span>.$router.push({</span><br><span class="line">            <span class="attr">path</span>: <span class="string">'/play'</span>,</span><br><span class="line">            <span class="attr">query</span>: {</span><br><span class="line">                <span class="attr">id</span>: <span class="built_in">this</span>.id <span class="comment">// 歌曲id, 通过路由跳转传递过去</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/05/20/vue%E5%BA%94%E7%94%A81-%E7%94%A8vant%E5%92%8Cnode%E5%AE%9E%E7%8E%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%A1%88%E4%BE%8B/image-20210512144906051.png" alt="image-20210512144906051"></p>
<blockquote>
<p>总结: 准备好播放页, 点击播放传歌曲id过去, 到播放页-再请求响应数据和歌曲地址用audio标签播放</p>
</blockquote>
<h3 id="1-21-网易云音乐-vant适配"><a href="#1-21-网易云音乐-vant适配" class="headerlink" title="1.21 网易云音乐-vant适配"></a>1.21 网易云音乐-vant适配</h3><blockquote>
<p>目标: 切换不同机型, ==刷新后==看看标签大小适配吗</p>
</blockquote>
<ul>
<li>postcss – 配合webpack翻译css代码</li>
<li>postcss-pxtorem – 配合webpack, 自动把px转成rem</li>
<li>新建postcss.config.js – 设置相关配置</li>
<li>重启服务器, 再次观察Vant组件是否适配</li>
</ul>
<ol>
<li><p>下载postcss和==<a href="mailto:postcss-pxtorem@5.1.1">postcss-pxtorem@5.1.1</a>==</p>
<p>postcss作用: 是对css代码做降级处理</p>
<p>postcss-pxtorem: 自动把所有代码里的css样式的px, 自动转rem</p>
</li>
<li><p>src/新建postcss.config.js</p>
</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: {</span><br><span class="line">    <span class="string">'postcss-pxtorem'</span>: {</span><br><span class="line">      <span class="comment">// 能够把所有元素的px单位转成Rem</span></span><br><span class="line">      <span class="comment">// rootValue: 转换px的基准值。</span></span><br><span class="line">      <span class="comment">// 例如一个元素宽是75px，则换成rem之后就是2rem。</span></span><br><span class="line">      <span class="attr">rootValue</span>: <span class="number">37.5</span>,</span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">'*'</span>]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>==以iphone6为基准, 37.5px为基准值换算rem==</p>
<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ul>
<li><input disabled="" type="checkbox"> 掌握vant组件库的使用 - 找组件, 引组件, 用组件</li>
<li><input disabled="" type="checkbox"> 能够对vant组件自带样式进行覆盖自定义</li>
<li><input disabled="" type="checkbox"> 遇到重复的标签, 自己也封装了一个复用的组件</li>
<li><input disabled="" type="checkbox"> 掌握查询文档和使用每个属性的方式</li>
</ul>
<h2 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h2><p>把课上的案例-从0再来一遍, 为下阶段移动端项目铺垫</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue应用</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础3-vue组件_组件通信_todo案例</title>
    <url>/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="知识点自测"><a href="#知识点自测" class="headerlink" title="知识点自测"></a>知识点自测</h2><ul>
<li><input disabled="" type="checkbox"> this指向</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = {</span><br><span class="line">    <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="comment">// this指向此函数的调用者</span></span><br><span class="line">    },</span><br><span class="line">    fn () {</span><br><span class="line">        <span class="comment">// this指向当前函数的调用者 (如果都是在vue里, this指向的都是vue实例对象)</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">fn</span>: <span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="comment">// this指向外层函数作用域this的值</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">obj.fn();</span><br><span class="line"></span><br><span class="line">axios().then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">    <span class="comment">// 这里的this的值是多少哦?</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><input disabled="" type="checkbox"> =作用</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = a; </span><br><span class="line">b = <span class="number">20</span>; <span class="comment">// 基础类型, 单纯的值的赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = {<span class="attr">name</span>: <span class="string">"哈哈"</span>};</span><br><span class="line"><span class="keyword">let</span> b = a; <span class="comment">// a变量的值是引用类型, a里保存的是对象在堆的内存地址, 所以b和a指向同一个对象 (引用类型=是内存地址的赋值)</span></span><br><span class="line">b.name = <span class="string">"刘总"</span>;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="今日学习目标"><a href="#今日学习目标" class="headerlink" title="今日学习目标"></a>今日学习目标</h2><ol>
<li>能够理解vue组件概念和作用</li>
<li>能够掌握封装组件能力</li>
<li>能够使用组件之间通信</li>
<li>能够完成todo案例</li>
</ol>
<h2 id="1-vue组件"><a href="#1-vue组件" class="headerlink" title="1. vue组件"></a>1. vue组件</h2><h3 id="1-0-为什么用组件"><a href="#1-0-为什么用组件" class="headerlink" title="1.0_为什么用组件"></a>1.0_为什么用组件</h3><p>以前做过一个折叠面板</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210115092834016.png" alt="image-20210115092834016"></p>
<p>需求: 现在想要多个收起展开的部分</p>
<p>方案1: 复制代码</p>
<ul>
<li>代码重复 冗余</li>
<li>不利于维护</li>
</ul>
<ol>
<li>案例用less写的样式, 所以下载</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn add less less-loader@5.0.0 -D</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>模板标签 - 在这个基础上, 把==要复用的多复制几份==(讲解不好的地方引出解决方案)</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div class="title"&gt;</span><br><span class="line">        &lt;h4&gt;芙蓉楼送辛渐&lt;/h4&gt;</span><br><span class="line">        &lt;span class="btn" @click="isShow = !isShow"&gt;</span><br><span class="line">          {{ isShow ? '收起' : '展开' }}</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="container" v-show="isShow"&gt;</span><br><span class="line">        &lt;p&gt;寒雨连江夜入吴, &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;平明送客楚山孤。&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;洛阳亲友如相问，&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;一片冰心在玉壶。&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      isShow: false</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less"&gt;</span><br><span class="line">body {</span><br><span class="line">  background-color: #ccc;</span><br><span class="line">  #app {</span><br><span class="line">    width: 400px;</span><br><span class="line">    margin: 20px auto;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border: 4px solid blueviolet;</span><br><span class="line">    border-radius: 1em;</span><br><span class="line">    box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.5);</span><br><span class="line">    padding: 1em 2em 2em;</span><br><span class="line">    h3 {</span><br><span class="line">      text-align: center;</span><br><span class="line">    }</span><br><span class="line">    .title {</span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: space-between;</span><br><span class="line">      align-items: center;</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      padding: 0 1em;</span><br><span class="line">    }</span><br><span class="line">    .title h4 {</span><br><span class="line">      line-height: 2;</span><br><span class="line">      margin: 0;</span><br><span class="line">    }</span><br><span class="line">    .container {</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      padding: 0 1em;</span><br><span class="line">    }</span><br><span class="line">    .btn {</span><br><span class="line">      /* 鼠标改成手的形状 */</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li><p>上面复制3份, 发现变化一起变化</p>
<p>解决方案: 不同的部分, 用不同的isShow变量</p>
</li>
</ol>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>案例：折叠面板<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>芙蓉楼送辛渐<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn"</span> @<span class="attr">click</span>=<span class="string">"isShow = !isShow"</span>&gt;</span></span><br><span class="line">          {{ isShow ? '收起' : '展开' }}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>寒雨连江夜入吴, <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>平明送客楚山孤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>洛阳亲友如相问，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>一片冰心在玉壶。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>芙蓉楼送辛渐<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn"</span> @<span class="attr">click</span>=<span class="string">"isShow1 = !isShow1"</span>&gt;</span></span><br><span class="line">          {{ isShow1 ? '收起' : '展开' }}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">v-show</span>=<span class="string">"isShow1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>寒雨连江夜入吴, <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>平明送客楚山孤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>洛阳亲友如相问，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>一片冰心在玉壶。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>芙蓉楼送辛渐<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn"</span> @<span class="attr">click</span>=<span class="string">"isShow2 = !isShow2"</span>&gt;</span></span><br><span class="line">          {{ isShow2 ? '收起' : '展开' }}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">v-show</span>=<span class="string">"isShow2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>寒雨连江夜入吴, <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>平明送客楚山孤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>洛阳亲友如相问，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>一片冰心在玉壶。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">isShow</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">isShow1</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">isShow2</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#app</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: <span class="number">4px</span> solid blueviolet;</span></span><br><span class="line"><span class="css">    <span class="attribute">border-radius</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">2em</span> <span class="number">2em</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">h3</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">    <span class="selector-class">.title</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">    <span class="selector-class">.title</span> <span class="selector-tag">h4</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">line-height</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">    <span class="selector-class">.btn</span> {</span></span><br><span class="line"><span class="css">      <span class="comment">/* 鼠标改成手的形状 */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 代码非常的冗余和重复吧? 解决方案呢? 就是采用我们的组件化开发的方式, 往下看</p>
</blockquote>
<h3 id="1-1-vue组件-概念"><a href="#1-1-vue组件-概念" class="headerlink" title="1.1_vue组件_概念"></a>1.1_vue组件_概念</h3><blockquote>
<p>组件是可复用的 Vue 实例, 封装标签, 样式和JS代码</p>
</blockquote>
<p><strong>组件化</strong> ：封装的思想，把页面上 <code>可重用的部分</code> 封装为 <code>组件</code>，从而方便项目的 开发 和 维护</p>
<p><strong>一个页面， 可以拆分成一个个组件，一个组件就是一个整体, 每个组件可以有自己独立的 结构 样式 和 行为(html, css和js)</strong></p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210216114452712.png" alt="image-20210216114452712"></p>
<h3 id="1-2-vue组件-基础使用"><a href="#1-2-vue组件-基础使用" class="headerlink" title="1.2_vue组件_基础使用"></a>1.2_vue组件_基础使用</h3><blockquote>
<p>目标: 每个组件都是一个独立的个体, 代码里体现为一个独立的.vue文件</p>
</blockquote>
<p>口诀: 哪部分标签复用, 就把哪部分封装到组件内</p>
<p>==(重要): 组件内template只能有一个根标签==</p>
<p>==(重要): 组件内data必须是一个函数, 独立作用域==</p>
<p>步骤:</p>
<ol>
<li>创建组件 components/Pannel.vue</li>
</ol>
<blockquote>
<p>封装标签+样式+js - 组件都是独立的, 为了复用</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class="title"&gt;</span><br><span class="line">      &lt;h4&gt;芙蓉楼送辛渐&lt;/h4&gt;</span><br><span class="line">      &lt;span class="btn" @click="isShow = !isShow"&gt;</span><br><span class="line">        {{ isShow ? "收起" : "展开" }}</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="container" v-show="isShow"&gt;</span><br><span class="line">      &lt;p&gt;寒雨连江夜入吴,&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;平明送客楚山孤。&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;洛阳亲友如相问，&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;一片冰心在玉壶。&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      isShow: false,</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.title {</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  padding: 0 1em;</span><br><span class="line">}</span><br><span class="line">.title h4 {</span><br><span class="line">  line-height: 2;</span><br><span class="line">  margin: 0;</span><br><span class="line">}</span><br><span class="line">.container {</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  padding: 0 1em;</span><br><span class="line">}</span><br><span class="line">.btn {</span><br><span class="line">  /* 鼠标改成手的形状 */</span><br><span class="line">  cursor: pointer;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>注册组件: 创建后需要注册后再使用</li>
</ol>
<blockquote>
<h3 id="全局-注册使用"><a href="#全局-注册使用" class="headerlink" title="全局 - 注册使用"></a>全局 - 注册使用</h3></blockquote>
<p>全局入口在main.js, 在new Vue之上注册</p>
<p>语法:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> 组件对象 <span class="keyword">from</span> <span class="string">'vue文件路径'</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">"组件名"</span>, 组件对象)</span><br></pre></td></tr></tbody></table></figure>

<p>main.js - 立即演示</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 目标: 全局注册 (一处定义到处使用)</span></span><br><span class="line"><span class="comment">// 1. 创建组件 - 文件名.vue</span></span><br><span class="line"><span class="comment">// 2. 引入组件</span></span><br><span class="line"><span class="keyword">import</span> Pannel <span class="keyword">from</span> <span class="string">'./components/Pannel'</span></span><br><span class="line"><span class="comment">// 3. 全局 - 注册组件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  语法: </span></span><br><span class="line"><span class="comment">  Vue.component("组件名", 组件对象)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Vue.component(<span class="string">"PannelG"</span>, Pannel)</span><br></pre></td></tr></tbody></table></figure>

<p>全局注册PannelG组件名后, 就可以当做标签在任意Vue文件中template里用</p>
<p>单双标签都可以或者小写加-形式, 运行后, 会把这个自定义标签当做组件解析, 使用==组件里封装的标签替换到这个位置==</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;PannelG&gt;&lt;/PannelG&gt;</span><br><span class="line">&lt;PannelG/&gt;</span><br><span class="line">&lt;pannel-g&gt;&lt;/pannel-g&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<h3 id="局部-注册使用"><a href="#局部-注册使用" class="headerlink" title="局部 - 注册使用"></a>局部 - 注册使用</h3></blockquote>
<p>语法:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 组件对象 <span class="keyword">from</span> <span class="string">'vue文件路径'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">components</span>: {</span><br><span class="line">        <span class="string">"组件名"</span>: 组件对象</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>任意vue文件中中引入, 注册, 使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 4. 组件名当做标签使用 --&gt;</span><br><span class="line">    &lt;!-- &lt;组件名&gt;&lt;/组件名&gt; --&gt;</span><br><span class="line">    &lt;PannelG&gt;&lt;/PannelG&gt;</span><br><span class="line">    &lt;PannelL&gt;&lt;/PannelL&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 局部注册 (用的多)</span><br><span class="line">// 1. 创建组件 - 文件名.vue</span><br><span class="line">// 2. 引入组件</span><br><span class="line">import Pannel from './components/Pannel_1'</span><br><span class="line">export default {</span><br><span class="line">  // 3. 局部 - 注册组件</span><br><span class="line">  /*</span><br><span class="line">    语法: </span><br><span class="line">    components: {</span><br><span class="line">      "组件名": 组件对象</span><br><span class="line">    }</span><br><span class="line">  */</span><br><span class="line">  components: {</span><br><span class="line">    PannelL: Pannel</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>组件使用总结:</p>
<ol>
<li>(创建)封装html+css+vue到独立的.vue文件中</li>
<li>(引入注册)组件文件 =&gt; 得到组件配置对象</li>
<li>(使用)当前页面当做标签使用</li>
</ol>
<h3 id="1-3-vue组件-scoped作用"><a href="#1-3-vue组件-scoped作用" class="headerlink" title="1.3_vue组件-scoped作用"></a>1.3_vue组件-scoped作用</h3><blockquote>
<p>目的: 解决多个组件样式名相同, 冲突问题</p>
</blockquote>
<p>需求: div标签名选择器, 设置背景色</p>
<p>问题: 发现组件里的div和外面的div都生效了</p>
<p>解决: 给Pannel.vue组件里style标签上加scoped属性即可</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>在style上加入scoped属性, 就会在此组件的标签上加上一个随机生成的data-v开头的属性</p>
<p>而且必须是当前组件的元素, 才会有这个自定义属性, 才会被这个样式作用到</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210216122749906.png" alt="image-20210216122749906"></p>
<blockquote>
<p>总结: style上加scoped, 组件内的样式只在当前vue组件生效</p>
</blockquote>
<h2 id="2-vue组件通信"><a href="#2-vue组件通信" class="headerlink" title="2. vue组件通信"></a>2. vue组件通信</h2><p>因为每个组件的变量和值都是独立的</p>
<p>组件通信先暂时关注父传子, 子传父</p>
<p>父: 使用其他组件的vue文件</p>
<p>子: 被引入的组件(嵌入)</p>
<p>例如: App.vue(父)  MyProduct.vue(子)</p>
<h3 id="2-0-vue组件通信-父向子-props"><a href="#2-0-vue组件通信-父向子-props" class="headerlink" title="2.0_vue组件通信_父向子-props"></a>2.0_vue组件通信_父向子-props</h3><blockquote>
<p>目的: 从外面给组件内传值, 先学会语法, 练习中在看使用场景</p>
</blockquote>
<p>需求: 封装一个商品组件MyProduct.vue - 外部传入具体要显示的数据, 如下图所示</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210305201956669.png" alt="image-20210305201956669"></p>
<p>步骤:</p>
<ol>
<li><p>创建组件components/MyProduct.vue - 复制下面标签</p>
</li>
<li><p>组件内在props定义变量, 用于接收外部传入的值</p>
</li>
<li><p>App.vue中引入注册组件, 使用时, 传入具体数据给组件显示</p>
</li>
</ol>
<p>components/MyProduct.vue - 准备标签</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-product"&gt;</span><br><span class="line">    &lt;h3&gt;标题: {{ title }}&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;价格: {{ price }}元&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;{{ intro }}&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  props: ['title', 'price', 'intro']</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product {</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue中使用并传入数据</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">      目标: 父(App.vue) -&gt; 子(MyProduct.vue) 分别传值进入</span><br><span class="line">      需求: 每次组件显示不同的数据信息</span><br><span class="line">      步骤(口诀):</span><br><span class="line">        1. 子组件 - props - 变量 (准备接收)</span><br><span class="line">        2. 父组件 - 传值进去</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;Product title="好吃的口水鸡" price="50" intro="开业大酬宾, 全场8折"&gt;&lt;/Product&gt;</span><br><span class="line">    &lt;Product title="好可爱的可爱多" price="20" intro="老板不在家, 全场1折"&gt;&lt;/Product&gt;</span><br><span class="line">    &lt;Product title="好贵的北京烤鸭" price="290" :intro="str"&gt;&lt;/Product&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 1. 创建组件 (.vue文件)</span><br><span class="line">// 2. 引入组件</span><br><span class="line">import Product from './components/MyProduct'</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      str: "好贵啊, 快来啊, 好吃"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  // 3. 注册组件</span><br><span class="line">  components: {</span><br><span class="line">    // Product: Product // key和value变量名同名 - 简写</span><br><span class="line">    Product</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 组件封装复用的标签和样式, 而具体数据要靠外面传入</p>
</blockquote>
<h3 id="2-1-vue组件通信-父向子-配合循环"><a href="#2-1-vue组件通信-父向子-配合循环" class="headerlink" title="2.1_vue组件通信_父向子-配合循环"></a>2.1_vue组件通信_父向子-配合循环</h3><blockquote>
<p>目的: 把数据循环分别传入给组件内显示</p>
</blockquote>
<p>数据</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">list: [</span><br><span class="line">    { <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">proname</span>: <span class="string">"超级好吃的棒棒糖"</span>, <span class="attr">proprice</span>: <span class="number">18.8</span>, <span class="attr">info</span>: <span class="string">'开业大酬宾, 全场8折'</span> },</span><br><span class="line">    { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">proname</span>: <span class="string">"超级好吃的大鸡腿"</span>, <span class="attr">proprice</span>: <span class="number">34.2</span>, <span class="attr">info</span>: <span class="string">'好吃不腻, 快来买啊'</span> },</span><br><span class="line">    { <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">proname</span>: <span class="string">"超级无敌的冰激凌"</span>, <span class="attr">proprice</span>: <span class="number">14.2</span>, <span class="attr">info</span>: <span class="string">'炎热的夏天, 来个冰激凌了'</span> },</span><br><span class="line">],</span><br></pre></td></tr></tbody></table></figure>

<p>正确代码(==不可复制==)`</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyProduct v-for="obj in list" :key="obj.id"</span><br><span class="line">    :title="obj.proname"</span><br><span class="line">    :price="obj.proprice"</span><br><span class="line">    :intro="obj.info"</span><br><span class="line">    &gt;&lt;/MyProduct&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 循环使用组件-分别传入数据</span><br><span class="line">// 1. 创建组件</span><br><span class="line">// 2. 引入组件</span><br><span class="line">import MyProduct from './components/MyProduct'</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      list: [</span><br><span class="line">        {</span><br><span class="line">          id: 1,</span><br><span class="line">          proname: "超级好吃的棒棒糖",</span><br><span class="line">          proprice: 18.8,</span><br><span class="line">          info: "开业大酬宾, 全场8折",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          id: 2,</span><br><span class="line">          proname: "超级好吃的大鸡腿",</span><br><span class="line">          proprice: 34.2,</span><br><span class="line">          info: "好吃不腻, 快来买啊",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          id: 3,</span><br><span class="line">          proname: "超级无敌的冰激凌",</span><br><span class="line">          proprice: 14.2,</span><br><span class="line">          info: "炎热的夏天, 来个冰激凌了",</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  // 3. 注册组件</span><br><span class="line">  components: {</span><br><span class="line">    // MyProduct: MyProduct</span><br><span class="line">    MyProduct</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3></blockquote>
<p>在vue中需要遵循单向数据流原则</p>
<ol>
<li>父组件的数据发生了改变，子组件会自动跟着变</li>
<li>子组件不能直接修改父组件传递过来的props  props是只读的</li>
</ol>
<p>==父组件传给子组件的是一个对象，子组件修改对象的属性，是不会报错的，对象是引用类型, 互相更新==</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210423161646951.png" alt="image-20210423161646951"></p>
<blockquote>
<p>总结: props的值不能重新赋值, 对象引用关系属性值改变, 互相影响</p>
</blockquote>
<h3 id="2-2-vue组件通信-单向数据流"><a href="#2-2-vue组件通信-单向数据流" class="headerlink" title="2.2_vue组件通信_单向数据流"></a>2.2_vue组件通信_单向数据流</h3><blockquote>
<p>目标: props变量本身是只读不能重新赋值</p>
</blockquote>
<p>目标：从==父到子==的数据流向,叫==单向数据流==</p>
<p>原因: 子组件修改, 不通知父级, 造成数据不一致性</p>
<p>如果第一个MyProduct.vue内自己修改商品价格为5.5, 但是App.vue里原来还记着18.8 - 数据 不一致了</p>
<p>所以: Vue规定==props==里的变量, ==本身是只读==的</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210511143218215.png" alt="image-20210511143218215"></p>
<blockquote>
<p>总结: 所以props变量本身是不能重新赋值的</p>
</blockquote>
<p>问题:  那我怎么才能修改子组件接收到的值呢? - 其实要影响父亲, 然后数据响应式来影响儿子们</p>
<h3 id="2-3-vue组件通信-子向父"><a href="#2-3-vue组件通信-子向父" class="headerlink" title="2.3_vue组件通信_子向父"></a>2.3_vue组件通信_子向父</h3><blockquote>
<p>目标: 从子组件把值传出来给外面使用</p>
</blockquote>
<p>需求: 课上例子, 砍价功能, 子组件点击实现随机砍价-1功能</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210307134253897.png" alt="image-20210307134253897"></p>
<p>语法:</p>
<ul>
<li>父: @自定义事件名=”父methods函数”</li>
<li>子: this.$emit(“自定义事件名”, 传值) - 执行父methods里函数代码</li>
</ul>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210217102551882.png" alt="image-20210217102551882"></p>
<p>components/MyProduct_sub.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-product"&gt;</span><br><span class="line">    &lt;h3&gt;标题: {{ title }}&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;价格: {{ price }}元&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;{{ intro }}&lt;/p&gt;</span><br><span class="line">    &lt;button @click="subFn"&gt;宝刀-砍1元&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import eventBus from '../EventBus'</span><br><span class="line">export default {</span><br><span class="line">  props: ['index', 'title', 'price', 'intro'],</span><br><span class="line">  methods: {</span><br><span class="line">    subFn(){</span><br><span class="line">      this.$emit('subprice', this.index, 1) // 子向父</span><br><span class="line">      eventBus.$emit("send", this.index, 1) // 跨组件</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product {</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 目标: 子传父 --&gt;</span><br><span class="line">    &lt;!-- 1. 父组件, @自定义事件名="父methods函数" --&gt;</span><br><span class="line">    &lt;MyProduct v-for="(obj, ind) in list" :key="obj.id"</span><br><span class="line">    :title="obj.proname"</span><br><span class="line">    :price="obj.proprice"</span><br><span class="line">    :intro="obj.info"</span><br><span class="line">    :index="ind"</span><br><span class="line">    @subprice="fn"</span><br><span class="line">    &gt;&lt;/MyProduct&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import MyProduct from './components/MyProduct_sub'</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      list: [</span><br><span class="line">        {</span><br><span class="line">          id: 1,</span><br><span class="line">          proname: "超级好吃的棒棒糖",</span><br><span class="line">          proprice: 18.8,</span><br><span class="line">          info: "开业大酬宾, 全场8折",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          id: 2,</span><br><span class="line">          proname: "超级好吃的大鸡腿",</span><br><span class="line">          proprice: 34.2,</span><br><span class="line">          info: "好吃不腻, 快来买啊",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          id: 3,</span><br><span class="line">          proname: "超级无敌的冰激凌",</span><br><span class="line">          proprice: 14.2,</span><br><span class="line">          info: "炎热的夏天, 来个冰激凌了",</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    MyProduct</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    fn(inde, price){</span><br><span class="line">      // 逻辑代码</span><br><span class="line">      this.list[inde].proprice &gt; 1 &amp;&amp; (this.list[inde].proprice = (this.list[inde].proprice - price).toFixed(2))</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 父自定义事件和方法, 等待子组件触发事件给方法传值</p>
</blockquote>
<h3 id="2-4-阶段小结"><a href="#2-4-阶段小结" class="headerlink" title="2.4_阶段小结"></a>2.4_阶段小结</h3><blockquote>
<p>目标: 总结父子组件关系-通信技术口诀</p>
</blockquote>
<p>组件是什么?</p>
<ul>
<li>是一个vue实例, 封装标签, 样式和JS代码</li>
</ul>
<p>组件好处?</p>
<ul>
<li>便于复用, 易于扩展</li>
</ul>
<p>组件通信哪几种, 具体如何实现?</p>
<ul>
<li><p>父 -&gt; 子</p>
</li>
<li><p>父 &lt;- 子</p>
</li>
</ul>
<h3 id="2-5-vue组件通信-EventBus"><a href="#2-5-vue组件通信-EventBus" class="headerlink" title="2.5_vue组件通信-EventBus"></a>2.5_vue组件通信-EventBus</h3><blockquote>
<p>目标: 常用于跨组件通信时使用</p>
</blockquote>
<p>两个组件的关系非常的复杂，通过父子组件通讯是非常麻烦的。这时候可以使用通用的组件通讯方案：事件总线（event-bus)</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210416122123301.png" alt="image-20210416122123301"></p>
<p>核心语法</p>
<p>EventBus/index.js- 定义事件总线bus对象</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">// 导出空白vue对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue()</span><br></pre></td></tr></tbody></table></figure>

<p>List.vue注册事件 - 等待接收要砍价的值 (==直接复制==) - 准备兄弟页面</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class="my-product"&gt;</span><br><span class="line">      &lt;li v-for="(item, index) in arr" :key="index"&gt;</span><br><span class="line">          &lt;span&gt;{{ item.proname }}&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;{{ item.proprice }}&lt;/span&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  props: ['arr'],</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product {</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>components/MyProduct_sub.vue(==带学生主要写触发eventBus身上事件==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my-product"&gt;</span><br><span class="line">    &lt;h3&gt;标题: {{ title }}&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;价格: {{ price }}元&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;{{ intro }}&lt;/p&gt;</span><br><span class="line">    &lt;button @click="subFn"&gt;宝刀-砍1元&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import eventBus from '../EventBus'</span><br><span class="line">export default {</span><br><span class="line">  props: ['index', 'title', 'price', 'intro'],</span><br><span class="line">  methods: {</span><br><span class="line">    subFn(){</span><br><span class="line">      this.$emit('subprice', this.index, 1) // 子向父</span><br><span class="line">      eventBus.$emit("send", this.index, 1) // 跨组件</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product {</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>List.vue正确代码(==EventBus接收方==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class="my-product"&gt;</span><br><span class="line">    &lt;li v-for="(item, index) in arr" :key="index"&gt;</span><br><span class="line">      &lt;span&gt;{{ item.proname }}&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;{{ item.proprice }}&lt;/span&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 跨组件传值</span><br><span class="line">// 1. 引入空白vue对象(EventBus)</span><br><span class="line">// 2. 接收方 - $on监听事件</span><br><span class="line">import eventBus from "../EventBus";</span><br><span class="line">export default {</span><br><span class="line">  props: ["arr"],</span><br><span class="line">  // 3. 组件创建完毕, 监听send事件</span><br><span class="line">  created() {</span><br><span class="line">    eventBus.$on("send", (index, price) =&gt; {</span><br><span class="line">      this.arr[index].proprice &gt; 1 &amp;&amp;</span><br><span class="line">        (this.arr[index].proprice = (this.arr[index].proprice - price).toFixed(2));</span><br><span class="line">    });</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product {</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 空的Vue对象, 只负责$on注册事件, $emit触发事件, 一定要确保$on先执行</p>
</blockquote>
<h2 id="3-todo案例"><a href="#3-todo案例" class="headerlink" title="3. todo案例"></a>3. todo案例</h2><p>完整效果演示</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86_%E9%93%BA%E5%A2%9E%E5%88%A0.gif" alt="品牌管理_铺增删"></p>
<h3 id="3-0-todo案例-创建工程和组件"><a href="#3-0-todo案例-创建工程和组件" class="headerlink" title="3.0_todo案例-创建工程和组件"></a>3.0_todo案例-创建工程和组件</h3><blockquote>
<p>目标: 新建工程, 准备好所需的一切</p>
</blockquote>
<ul>
<li>需求1: 创建新工程</li>
<li>需求2: 分组件创建 – 准备标签和样式(从.md笔记复制)</li>
</ul>
<p>分析：</p>
<p>​    ①：初始化todo工程</p>
<p>​    ②：创建３个组件和里面代码(在预习资料.md复制)</p>
<p>​    ③：把styles的样式文件准备好(从预习资料复制)</p>
<p>​    ④:  App.vue引入注册使用, 最外层容器类名todoapp</p>
<p>预先准备: 把styles的样式文件准备好(从预习资料复制), 在App.vue引入使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 1.0 样式引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./styles/base.css"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./styles/index.css"</span></span><br></pre></td></tr></tbody></table></figure>

<p>根据需求: 我们定义3个组件准备复用</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210423162040577.png" alt="image-20210423162040577"></p>
<p>components/TodoHeader.vue - 复制标签和类名</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;header class="header"&gt;</span><br><span class="line">    &lt;h1&gt;todos&lt;/h1&gt;</span><br><span class="line">    &lt;input id="toggle-all" class="toggle-all" type="checkbox" &gt;</span><br><span class="line">    &lt;label for="toggle-all"&gt;&lt;/label&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      class="new-todo"</span><br><span class="line">      placeholder="输入任务名称-回车确认"</span><br><span class="line">      autofocus</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line"> </span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>components/TodoMain.vue - 复制标签和类名</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class="todo-list"&gt;</span><br><span class="line">    &lt;!-- completed: 完成的类名 --&gt;</span><br><span class="line">    &lt;li class="completed" &gt;</span><br><span class="line">      &lt;div class="view"&gt;</span><br><span class="line">        &lt;input class="toggle" type="checkbox" /&gt;</span><br><span class="line">        &lt;label&gt;任务名&lt;/label&gt;</span><br><span class="line">        &lt;button class="destroy"&gt;&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>components/TodoFooter.vue - 复制标签和类名</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;footer class="footer"&gt;</span><br><span class="line">    &lt;span class="todo-count"&gt;剩余&lt;strong&gt;数量值&lt;/strong&gt;&lt;/span&gt;</span><br><span class="line">    &lt;ul class="filters"&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a class="selected" href="javascript:;" &gt;全部&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a href="javascript:;"&gt;未完成&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a href="javascript:;" &gt;已完成&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button class="clear-completed" &gt;清除已完成&lt;/button&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue中引入和使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;section class="todoapp"&gt;</span><br><span class="line">    &lt;!-- 除了驼峰, 还可以使用-转换链接 --&gt;</span><br><span class="line">    &lt;TodoHeader&gt;&lt;/TodoHeader&gt;</span><br><span class="line">    &lt;TodoMain&gt;&lt;/TodoMain&gt;</span><br><span class="line">    &lt;TodoFooter&gt;&lt;/TodoFooter&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 1.0 样式引入</span><br><span class="line">import "./styles/base.css"</span><br><span class="line">import "./styles/index.css"</span><br><span class="line">    </span><br><span class="line">import TodoHeader from "./components/TodoHeader";</span><br><span class="line">import TodoMain from "./components/TodoMain";</span><br><span class="line">import TodoFooter from "./components/TodoFooter";</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  components: {</span><br><span class="line">    TodoHeader,</span><br><span class="line">    TodoMain,</span><br><span class="line">    TodoFooter,</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-1-todo案例-铺设待办任务"><a href="#3-1-todo案例-铺设待办任务" class="headerlink" title="3.1_todo案例-铺设待办任务"></a>3.1_todo案例-铺设待办任务</h3><blockquote>
<p>目的: 把待办任务, 展示到页面TodoMain.vue组件上</p>
</blockquote>
<ul>
<li>需求1: 把待办任务, 展示到页面TodoMain.vue组件上</li>
<li>需求2: 关联选中状态, 设置相关样式</li>
</ul>
<p>分析：</p>
<p>​    ①: App.vue – 准备数组传入TodoMain.vue内</p>
<p>​    ②: v-for循环展示数据</p>
<p>​    ③: v-model绑定复选框选中状态</p>
<p>​    ④: 根据选中状态, 设置完成划线样式</p>
<p>App.vue</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"> &lt;TodoMain :arr=<span class="string">"showArr"</span>&gt;&lt;/TodoMain&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">list</span>: [</span><br><span class="line">        { <span class="attr">id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">"吃饭"</span>, <span class="attr">isDone</span>: <span class="literal">true</span> },</span><br><span class="line">        { <span class="attr">id</span>: <span class="number">201</span>, <span class="attr">name</span>: <span class="string">"睡觉"</span>, <span class="attr">isDone</span>: <span class="literal">false</span> },</span><br><span class="line">        { <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">"打豆豆"</span>, <span class="attr">isDone</span>: <span class="literal">true</span> },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<p>TodoMain.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class="todo-list"&gt;</span><br><span class="line">    &lt;!-- 2.2 循环任务-关联选中状态-铺设数据 --&gt;</span><br><span class="line">    &lt;!-- completed: 完成的类名 --&gt;</span><br><span class="line">    &lt;li :class="{completed: obj.isDone}" v-for="(obj, index) in arr" :key='obj.id'&gt;</span><br><span class="line">      &lt;div class="view"&gt;</span><br><span class="line">        &lt;input class="toggle" type="checkbox" v-model="obj.isDone"/&gt;</span><br><span class="line">        &lt;label&gt;{{ obj.name }}&lt;/label&gt;</span><br><span class="line">        &lt;!-- 4.0 注册点击事件 --&gt;</span><br><span class="line">        &lt;button @click="delFn(index)" class="destroy"&gt;&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  props: ["list"]</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-2-todo案例-添加任务"><a href="#3-2-todo案例-添加任务" class="headerlink" title="3.2_todo案例-添加任务"></a>3.2_todo案例-添加任务</h3><blockquote>
<p>目标: 在顶部输入框输入要完成的任务名, 敲击回车, 完成新增功能</p>
</blockquote>
<ul>
<li>需求: 输入任务敲击回车, 新增待办任务</li>
</ul>
<p>分析：</p>
<p>​    ①: TodoHeader.vue – 输入框 – 键盘事件 – 回车按键</p>
<p>​    ②: 子传父, 把待办任务 – App.vue中 – 加入数组list里</p>
<p>​    ③: 原数组改变, 所有用到的地方都会更新</p>
<p>​    ④: 输入框为空, 提示用户必须输入内容</p>
<p>TodoHeader.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;header class="header"&gt;</span><br><span class="line">    &lt;h1&gt;todos&lt;/h1&gt;</span><br><span class="line">    &lt;input id="toggle-all" class="toggle-all" type="checkbox" v-model="isAll"&gt;</span><br><span class="line">    &lt;label for="toggle-all"&gt;&lt;/label&gt;</span><br><span class="line">    &lt;!-- 3.0 键盘事件-回车按键</span><br><span class="line">         3.1 输入框 - v-model获取值</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      class="new-todo"</span><br><span class="line">      placeholder="输入任务名称-回车确认"</span><br><span class="line">      autofocus</span><br><span class="line">      @keydown.enter="downFn"</span><br><span class="line">      v-model="task"</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 3. 目标 - 新增任务</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      task: ""</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    downFn(){</span><br><span class="line">      if (this.task.trim().length === 0) {</span><br><span class="line">        alert("任务名不能为空");</span><br><span class="line">        return;</span><br><span class="line">      }</span><br><span class="line">      // 3.2(重要) - 当前任务名字要加到list数组里</span><br><span class="line">      // 子传父技术</span><br><span class="line">      this.$emit("create", this.task)</span><br><span class="line">      this.task = ""</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;TodoHeader @create=<span class="string">"createFn"</span>&gt;&lt;/TodoHeader&gt;</span><br><span class="line"></span><br><span class="line">methods: {</span><br><span class="line">   <span class="function"><span class="title">createFn</span>(<span class="params">taskName</span>)</span>{ <span class="comment">// 添加任务</span></span><br><span class="line">      <span class="comment">// 3.3 push到数组里</span></span><br><span class="line">      <span class="keyword">let</span> id = <span class="built_in">this</span>.list.length == <span class="number">0</span> ? <span class="number">100</span> : <span class="built_in">this</span>.list[<span class="built_in">this</span>.list.length - <span class="number">1</span>].id + <span class="number">1</span></span><br><span class="line">      <span class="built_in">this</span>.list.push({</span><br><span class="line">        <span class="attr">id</span>: id,</span><br><span class="line">        <span class="attr">name</span>: taskName,</span><br><span class="line">        <span class="attr">isDone</span>: <span class="literal">false</span></span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-3-todo案例-删除任务"><a href="#3-3-todo案例-删除任务" class="headerlink" title="3.3_todo案例-删除任务"></a>3.3_todo案例-删除任务</h3><blockquote>
<p>目标: 实现点x, 删除任务功能</p>
</blockquote>
<ul>
<li>需求: 点击任务后的x, 删除当前这条任务</li>
</ul>
<p>分析：</p>
<p>​    ①: x标签 – 点击事件 – 传入id区分</p>
<p>​    ②: 子传父, 把id传回– App.vue中 – 删除数组list里某个对应的对象</p>
<p>​    ③: 原数组改变, 所有用到的地方都会更新</p>
<p>App.vue - 传入自定义事件等待接收要被删除的序号</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;TodoMain :arr=<span class="string">"showArr"</span> @del=<span class="string">"deleteFn"</span>&gt;&lt;/TodoMain&gt;</span><br><span class="line"></span><br><span class="line">methods: {</span><br><span class="line">    <span class="function"><span class="title">deleteFn</span>(<span class="params">theId</span>)</span>{ <span class="comment">// 删除任务</span></span><br><span class="line">      <span class="keyword">let</span> index = <span class="built_in">this</span>.list.findIndex(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id === theId)</span><br><span class="line">      <span class="built_in">this</span>.list.splice(index, <span class="number">1</span>)</span><br><span class="line">    },</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<p>TodoMain.vue - 把id传回去实现删除(想好数据在哪里, 就在哪里删除)</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- <span class="number">4.0</span> 注册点击事件 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span> @<span class="attr">click</span>=<span class="string">"delFn(obj.id)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">methods: {</span><br><span class="line">     <span class="function"><span class="title">delFn</span>(<span class="params">id</span>)</span>{</span><br><span class="line">      <span class="comment">// 4.1 子传父</span></span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">'del'</span>, id)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-4-todo案例-底部统计"><a href="#3-4-todo案例-底部统计" class="headerlink" title="3.4_todo案例-底部统计"></a>3.4_todo案例-底部统计</h3><blockquote>
<p>目的: 显示现在任务的总数</p>
</blockquote>
<ul>
<li>需求: 统计当前任务的条数</li>
</ul>
<p>分析：</p>
<p>​    ①: App.vue中 – 数组list – 传给TodoFooter.vue</p>
<p>​    ②: 直接在标签上显示 / 定义计算属性用于显示都可以</p>
<p>​    ③: 原数组只要改变, 所有用到此数组的地方都会更新</p>
<p>TodoFooter.vue - 接收list统计直接显示</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;footer class="footer"&gt;</span><br><span class="line">    &lt;span class="todo-count"&gt;剩余&lt;strong&gt;{{ count }}&lt;/strong&gt;&lt;/span&gt;</span><br><span class="line">    &lt;ul class="filters"&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a class="selected" href="javascript:;"&gt;全部&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a href="javascript:;"&gt;未完成&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a href="javascript:;"&gt;已完成&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button class="clear-completed"&gt;清除已完成&lt;/button&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  // 5.0 props定义</span><br><span class="line">  props: ['farr'],</span><br><span class="line">  // 5.1 计算属性 - 任务数量</span><br><span class="line">  computed: {</span><br><span class="line">    count(){</span><br><span class="line">      return this.farr.length</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue - 传入数据</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;TodoFooter :farr="showArr"&gt;&lt;/TodoFooter&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-5-todo案例-数据切换"><a href="#3-5-todo案例-数据切换" class="headerlink" title="3.5_todo案例-数据切换"></a>3.5_todo案例-数据切换</h3><blockquote>
<p>目的: 点击底部切换数据</p>
</blockquote>
<ul>
<li>需求1: 点击底部切换 – 点谁谁有边框</li>
<li>需求2: 对应切换不同数据显示</li>
</ul>
<p>分析：</p>
<p>​    ①: TodoFooter.vue – 定义isSel – 值为all, yes, no其中一种</p>
<p>​    ②: 多个class分别判断谁应该有类名selected</p>
<p>​    ③: 点击修改isSel的值</p>
<p>​    ④: 子传父, 把类型isSel传到App.vue</p>
<p>​    ⑤: 定义计算属性showArr, 决定从list里显示哪些数据给TodoMain.vue和TodoFooter.vue</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;TodoFooter :farr="showArr" @changeType="typeFn"&gt;&lt;/TodoFooter&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default{</span><br><span class="line">       data(){</span><br><span class="line">            return {</span><br><span class="line">              // ...其他省略</span><br><span class="line">              getSel: "all" // 默认显示全部</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">            // ...其他省略</span><br><span class="line">            typeFn(str){ // 'all' 'yes' 'no' // 修改类型</span><br><span class="line">              this.getSel = str</span><br><span class="line">            },</span><br><span class="line">        },</span><br><span class="line">        // 6.5 定义showArr数组 - 通过list配合条件筛选而来</span><br><span class="line">          computed: {</span><br><span class="line">            showArr(){</span><br><span class="line">              if (this.getSel === 'yes') { // 显示已完成</span><br><span class="line">                return this.list.filter(obj =&gt; obj.isDone === true)</span><br><span class="line">              } else if (this.getSel === 'no') { // 显示未完成</span><br><span class="line">                return this.list.filter(obj =&gt; obj.isDone === false)</span><br><span class="line">              } else {</span><br><span class="line">                return this.list // 全部显示</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>TodoFooter.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;footer class="footer"&gt;</span><br><span class="line">    &lt;span class="todo-count"&gt;剩余&lt;strong&gt;{{ count }}&lt;/strong&gt;&lt;/span&gt;</span><br><span class="line">    &lt;ul class="filters" @click="fn"&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;!-- 6.1 判断谁应该有高亮样式: 动态class</span><br><span class="line">            6.2 用户点击要切换isSel里保存的值</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;a :class="{selected: isSel === 'all'}" href="javascript:;" @click="isSel='all'"&gt;全部&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a :class="{selected: isSel === 'no'}" href="javascript:;" @click="isSel='no'"&gt;未完成&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a :class="{selected: isSel === 'yes'}" href="javascript:;" @click="isSel='yes'"&gt;已完成&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;!-- 7. 目标: 清除已完成 --&gt;</span><br><span class="line">    &lt;!-- 7.0 点击事件 --&gt;</span><br><span class="line">    &lt;button class="clear-completed" &gt;清除已完成&lt;/button&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 5. 目标: 数量统计</span><br><span class="line">export default {</span><br><span class="line">  // 5.0 props定义</span><br><span class="line">  props: ['farr'],</span><br><span class="line">  // 5.1 计算属性 - 任务数量</span><br><span class="line">  computed: {</span><br><span class="line">    count(){</span><br><span class="line">      return this.farr.length</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  // 6. 目标: 点谁谁亮</span><br><span class="line">  // 6.0 变量isSel</span><br><span class="line">  data(){</span><br><span class="line">    return {</span><br><span class="line">      isSel: 'all' // 全部:'all', 已完成'yes', 未完成'no'</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    fn(){ // 切换筛选条件</span><br><span class="line">      // 6.3 子 -&gt; 父 把类型字符串传给App.vue </span><br><span class="line">      this.$emit("changeType", this.isSel)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-6-todo案例-清空已完成"><a href="#3-6-todo案例-清空已完成" class="headerlink" title="3.6_todo案例-清空已完成"></a>3.6_todo案例-清空已完成</h3><blockquote>
<p>目的: 点击右下角按钮- 把已经完成的任务清空了</p>
</blockquote>
<ul>
<li>需求: 点击右下角链接标签, 清除已完成任务 </li>
</ul>
<p>分析：</p>
<p>​    ①: 清空标签 – 点击事件</p>
<p>​    ②: 子传父 – App.vue – 一个清空方法</p>
<p>​    ③: 过滤未完成的覆盖list数组 (不考虑恢复)</p>
<p>App.vue - 先传入一个自定义事件-因为得接收TodoFooter.vue里的点击事件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;TodoFooter :farr="showArr" @changeType="typeFn" @clear="clearFun"&gt;&lt;/TodoFooter&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: {</span><br><span class="line">        // ...省略其他</span><br><span class="line">        clearFun(){ // 清除已完成</span><br><span class="line">          this.list = this.list.filter(obj =&gt; obj.isDone == false)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>TodoFooter.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 7. 目标: 清除已完成 --&gt;</span><br><span class="line">&lt;!-- 7.0 点击事件 --&gt;</span><br><span class="line">&lt;button class="clear-completed" @click="clearFn"&gt;清除已完成&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	methods: {</span><br><span class="line">        clearFn(){ // 清空已完成任务</span><br><span class="line">          // 7.1 触发App.vue里事件对应clearFun方法</span><br><span class="line">          this.$emit('clear')</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-7-todo案例-数据缓存"><a href="#3-7-todo案例-数据缓存" class="headerlink" title="3.7_todo案例-数据缓存"></a>3.7_todo案例-数据缓存</h3><blockquote>
<p>目的: 新增/修改状态/删除 后, 马上把数据同步到浏览器本地存储</p>
</blockquote>
<ul>
<li>需求: 无论如何变化 – 都保证刷新后数据还在</li>
</ul>
<p>分析：</p>
<p>​    ①: App.vue – 侦听list数组改变 – 深度</p>
<p>​    ②: 覆盖式存入到本地 – 注意本地只能存入JSON字符串</p>
<p>​    ③: 刷新页面 – list应该默认从本地取值 – 要考虑无数据情况空数组</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        data(){</span><br><span class="line">            return {</span><br><span class="line">                // 8.1 默认从本地取值</span><br><span class="line">                list: JSON.parse(localStorage.getItem('todoList')) || [],</span><br><span class="line">                // 6.4 先中转接收类型字符串</span><br><span class="line">                getSel: "all" // 默认显示全部</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        // 8. 目标: 数据缓存</span><br><span class="line">        watch: {</span><br><span class="line">            list: {</span><br><span class="line">                deep: true,</span><br><span class="line">                handler(){</span><br><span class="line">                    // 8.0 只要list变化 - 覆盖式保存到localStorage里</span><br><span class="line">                    localStorage.setItem('todoList', JSON.stringify(this.list))</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-8-todo案例-全选功能"><a href="#3-8-todo案例-全选功能" class="headerlink" title="3.8_todo案例-全选功能"></a>3.8_todo案例-全选功能</h3><blockquote>
<p>目标: 点击左上角v号, 可以设置一键完成, 再点一次取消全选</p>
</blockquote>
<ul>
<li>需求1: 点击全选 – 小选框受到影响</li>
<li>需求2: 小选框都选中(手选) – 全选自动选中状态</li>
</ul>
<p>分析：</p>
<p>​    ①: TodoHeader.vue – 计算属性 - isAll</p>
<p>​    ②: App.vue – 传入数组list – 在isAll的set里影响小选框</p>
<p>​    ③: isAll的get里统计小选框最后状态, 影响isAll – 影响全选状态</p>
<p>​    ④: 考虑无数据情况空数组 – 全选不应该勾选</p>
<p>提示: 就是遍历所有的对象, 修改他们的完成状态属性的值</p>
<p>TodoHeader.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 9. 目标: 全选状态</span><br><span class="line">9.0 v-model关联全选状态</span><br><span class="line">页面变化(勾选true, 未勾选false) -&gt; v-model -&gt; isAll变量</span><br><span class="line">--&gt;</span><br><span class="line">&lt;input id="toggle-all" class="toggle-all" type="checkbox" v-model="isAll"&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        // ...其他省略</span><br><span class="line">        // 9.1 定义计算属性</span><br><span class="line">        computed: {</span><br><span class="line">            isAll: {</span><br><span class="line">                set(checked){ // 只有true / false</span><br><span class="line">                    // 9.3 影响数组里每个小选框绑定的isDone属性</span><br><span class="line">                    this.arr.forEach(obj =&gt; obj.isDone = checked)</span><br><span class="line">                },</span><br><span class="line">                get(){</span><br><span class="line">                    // 9.4 小选框统计状态 -&gt; 全选框</span><br><span class="line">                    // 9.5 如果没有数据, 直接返回false-不要让全选勾选状态</span><br><span class="line">                    return this.arr.length !== 0 &amp;&amp; this.arr.every(obj =&gt; obj.isDone === true)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;TodoHeader :arr="list" @create="createFn"&gt;&lt;/TodoHeader&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ul>
<li><input disabled="" type="checkbox"> 组件概念和作用以及创建和使用方式</li>
</ul>
<ul>
<li><input disabled="" type="checkbox"> 掌握组件通信包括父向子, 子向父传值</li>
</ul>
<ul>
<li><input disabled="" type="checkbox"> 熟悉EventBus的使用和原理</li>
</ul>
<ul>
<li><input disabled="" type="checkbox"> 跟随老师的视频完成todo案例的全部功能</li>
</ul>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1-请说下封装-vue-组件的过程"><a href="#1-请说下封装-vue-组件的过程" class="headerlink" title="1. 请说下封装 vue 组件的过程"></a>1. 请说下封装 vue 组件的过程</h3><p>​    首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题。</p>
<ul>
<li><p>分析需求：确定业务需求，把页面中可以复用的结构，样式以及功能，单独抽离成一个组件，实现复用</p>
</li>
<li><p>具体步骤：Vue.component 或者在new Vue配置项components中, 定义组件名, 可以在props中接受给组件传的参数和值，子组件修改好数据后，想把数据传递给父组件。可以采用$emit方法。</p>
</li>
</ul>
<h3 id="2-Vue组件如何进行传值的"><a href="#2-Vue组件如何进行传值的" class="headerlink" title="2. Vue组件如何进行传值的"></a>2. Vue组件如何进行传值的</h3><p>父向子 -&gt; props定义变量 -&gt; 父在使用组件用属性给props变量传值</p>
<p>子向父 -&gt; $emit触发父的事件 -&gt; 父在使用组件用@自定义事件名=父的方法 (子把值带出来)</p>
<h3 id="3-Vue-组件-data-为什么必须是函数"><a href="#3-Vue-组件-data-为什么必须是函数" class="headerlink" title="3. Vue 组件 data 为什么必须是函数"></a>3. Vue 组件 data 为什么必须是函数</h3><p>每个组件都是 Vue 的实例, 为了独立作用域, 不让变量污染别人的变量</p>
<h3 id="4-讲一下组件的命名规范"><a href="#4-讲一下组件的命名规范" class="headerlink" title="4. 讲一下组件的命名规范"></a>4. 讲一下组件的命名规范</h3><p>​    给组件命名有两种方式(在Vue.Component/components时)，一种是使用链式命名”my-component”，一种是使用大驼峰命名”MyComponent”，</p>
<p>​    因为要遵循W3C规范中的自定义组件名 (字母全小写且必须包含一个连字符)，避免和当前以及未来的 HTML 元素相冲突</p>
<h2 id="附加练习-1-喜欢小狗狗吗"><a href="#附加练习-1-喜欢小狗狗吗" class="headerlink" title="附加练习_1.喜欢小狗狗吗"></a>附加练习_1.喜欢小狗狗吗</h2><blockquote>
<p>目标: 封装Dog组件, 用来复用显示图片和标题的</p>
</blockquote>
<p>效果:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210115103545558.png" alt="image-20210115103545558"></p>
<hr>
<p>正确答案(==先不要看==)</p>
<p>components/practise/Dog1.vue</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">"https://scpic.chinaz.net/files/pic/pic9/202003/zzpic23514.jpg"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个孤独可怜的狗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {};</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.my_div</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.my_div</span> <span class="selector-tag">img</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>在App.vue中使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Dog&gt;&lt;/Dog&gt;</span><br><span class="line">    &lt;Dog/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Dog from '@/components/practise/Dog1'</span><br><span class="line">export default {</span><br><span class="line">  components: {</span><br><span class="line">    Dog</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>总结: 重复部分封装成组件, 然后注册使用</p>
</blockquote>
<h2 id="附加练习-2-点击文字变色"><a href="#附加练习-2-点击文字变色" class="headerlink" title="附加练习_2.点击文字变色"></a>附加练习_2.点击文字变色</h2><blockquote>
<p>目标: 修改Dog组件, 实现组件内点击变色</p>
</blockquote>
<p>提示: 文字在组件内, 所以事件和方法都该在组件内-独立</p>
<p>图示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/10.3.1_%E7%BB%84%E4%BB%B6_%E4%BA%8B%E4%BB%B6%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8.gif" alt="10.3.1_组件_事件变量使用"></p>
<p>正确代码(==先不要看==)</p>
<p>components/practise/Dog2.vue</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">"https://scpic.chinaz.net/files/pic/pic9/202003/zzpic23514.jpg"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"{backgroundColor: colorStr}"</span> @<span class="attr">click</span>=<span class="string">"btn"</span>&gt;</span>这是一个孤独可怜的狗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">colorStr</span>: <span class="string">""</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">btn</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.colorStr = <span class="string">`rgb(<span class="subst">${<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>)}</span>, <span class="subst">${<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>)}</span>, <span class="subst">${<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>)}</span>)`</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">};</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.my_div</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.my_div</span> <span class="selector-tag">img</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="附加练习-3-卖狗啦"><a href="#附加练习-3-卖狗啦" class="headerlink" title="附加练习_3.卖狗啦"></a>附加练习_3.卖狗啦</h2><blockquote>
<p>目标: 把数据循环用组件显示铺设</p>
</blockquote>
<p>数据:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">dogImgUrl</span>:</span><br><span class="line">        <span class="string">"http://nwzimg.wezhan.cn/contents/sitefiles2029/10146688/images/21129958.jpg"</span>,</span><br><span class="line">        <span class="attr">dogName</span>: <span class="string">"博美"</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">dogImgUrl</span>:</span><br><span class="line">        <span class="string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1224576619,1307855467&amp;fm=26&amp;gp=0.jpg"</span>,</span><br><span class="line">        <span class="attr">dogName</span>: <span class="string">"泰迪"</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">dogImgUrl</span>:</span><br><span class="line">        <span class="string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2967740259,1518632757&amp;fm=26&amp;gp=0.jpg"</span>,</span><br><span class="line">        <span class="attr">dogName</span>: <span class="string">"金毛"</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">dogImgUrl</span>:</span><br><span class="line">        <span class="string">"https://pic1.zhimg.com/80/v2-7ba4342e6fedb9c5f3726eb0888867da_1440w.jpg?source=1940ef5c"</span>,</span><br><span class="line">        <span class="attr">dogName</span>: <span class="string">"哈士奇"</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">dogImgUrl</span>:</span><br><span class="line">        <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563813435580&amp;di=946902d419c3643e33a0c9113fc8d780&amp;imgtype=0&amp;src=http%3A%2F%2Fvpic.video.qq.com%2F3388556%2Fd0522aynh3x_ori_3.jpg"</span>,</span><br><span class="line">        <span class="attr">dogName</span>: <span class="string">"阿拉斯加"</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">dogImgUrl</span>:</span><br><span class="line">        <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563813454815&amp;di=ecdd2ebf479568453d704dffacdfa12c&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.officedoyen.com%2Fuploads%2Fallimg%2F150408%2F1-15040Q10J5B0.jpg"</span>,</span><br><span class="line">        <span class="attr">dogName</span>: <span class="string">"萨摩耶"</span>,</span><br><span class="line">    },</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<p>图示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210115112811452.png" alt="image-20210115112811452"></p>
<p>正确代码(==不可复制==)</p>
<p>components/practise/Dog3.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my_div"&gt;</span><br><span class="line">    &lt;img :src="imgurl" alt="" /&gt;</span><br><span class="line">    &lt;p :style="{ backgroundColor: colorStr }" @click="btn"&gt;{{ dogname }}&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  props: ["imgurl", "dogname"],</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      colorStr: "",</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    btn() {</span><br><span class="line">      this.colorStr = `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(</span><br><span class="line">        Math.random() * 256</span><br><span class="line">      )}, ${Math.floor(Math.random() * 256)})`;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.my_div {</span><br><span class="line">  width: 200px;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  text-align: center;</span><br><span class="line">  float: left;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.my_div img {</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 200px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue引入使用把数据循环传给组件显示</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Dog v-for="(obj, index) in arr"</span><br><span class="line">    :key="index"</span><br><span class="line">    :imgurl="obj.dogImgUrl"</span><br><span class="line">    :dogname="obj.dogName"</span><br><span class="line">    &gt;&lt;/Dog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Dog from '@/components/practise/Dog3'</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      // 1. 准备数据</span><br><span class="line">      arr: [</span><br><span class="line">        {</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            "http://nwzimg.wezhan.cn/contents/sitefiles2029/10146688/images/21129958.jpg",</span><br><span class="line">          dogName: "博美",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            "https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1224576619,1307855467&amp;fm=26&amp;gp=0.jpg",</span><br><span class="line">          dogName: "泰迪",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            "https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2967740259,1518632757&amp;fm=26&amp;gp=0.jpg",</span><br><span class="line">          dogName: "金毛",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            "https://pic1.zhimg.com/80/v2-7ba4342e6fedb9c5f3726eb0888867da_1440w.jpg?source=1940ef5c",</span><br><span class="line">          dogName: "哈士奇",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            "https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563813435580&amp;di=946902d419c3643e33a0c9113fc8d780&amp;imgtype=0&amp;src=http%3A%2F%2Fvpic.video.qq.com%2F3388556%2Fd0522aynh3x_ori_3.jpg",</span><br><span class="line">          dogName: "阿拉斯加",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            "https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563813454815&amp;di=ecdd2ebf479568453d704dffacdfa12c&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.officedoyen.com%2Fuploads%2Fallimg%2F150408%2F1-15040Q10J5B0.jpg",</span><br><span class="line">          dogName: "萨摩耶",</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    Dog</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="附加练习-4-选择喜欢的狗"><a href="#附加练习-4-选择喜欢的狗" class="headerlink" title="附加练习_4.选择喜欢的狗"></a>附加练习_4.选择喜欢的狗</h2><blockquote>
<p>目标: 用户点击狗狗的名字, 在右侧列表显示一次名字</p>
</blockquote>
<p>效果:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/11.5_%E5%96%9C%E6%AC%A2%E7%9A%84%E7%8B%97%E7%8B%97.gif" alt="11.5_喜欢的狗狗"></p>
<p>正确代码(==不可复制==)</p>
<p>components/practise/Dog4.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="my_div"&gt;</span><br><span class="line">    &lt;img :src="imgurl" alt="" /&gt;</span><br><span class="line">    &lt;p :style="{ backgroundColor: colorStr }" @click="btn"&gt;{{ dogname }}&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  props: ["imgurl", "dogname"],</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      colorStr: "",</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    btn() {</span><br><span class="line">      this.colorStr = `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(</span><br><span class="line">        Math.random() * 256</span><br><span class="line">      )}, ${Math.floor(Math.random() * 256)})`;</span><br><span class="line"></span><br><span class="line">      // 补充: 触发父级事件</span><br><span class="line">      this.$emit("love", this.dogname);</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.my_div {</span><br><span class="line">  width: 200px;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  text-align: center;</span><br><span class="line">  float: left;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.my_div img {</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 200px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Dog</span><br><span class="line">      v-for="(obj, index) in arr"</span><br><span class="line">      :key="index"</span><br><span class="line">      :imgurl="obj.dogImgUrl"</span><br><span class="line">      :dogname="obj.dogName"</span><br><span class="line">      @love="fn"</span><br><span class="line">    &gt;&lt;/Dog&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;p&gt;显示喜欢的狗:&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for="(item, index) in loveArr" :key="index"&gt;{{ item }}&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Dog from "@/components/practise/Dog4";</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      // 1. 准备数据</span><br><span class="line">      arr: [</span><br><span class="line">        {</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            "http://nwzimg.wezhan.cn/contents/sitefiles2029/10146688/images/21129958.jpg",</span><br><span class="line">          dogName: "博美",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            "https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1224576619,1307855467&amp;fm=26&amp;gp=0.jpg",</span><br><span class="line">          dogName: "泰迪",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            "https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2967740259,1518632757&amp;fm=26&amp;gp=0.jpg",</span><br><span class="line">          dogName: "金毛",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            "https://pic1.zhimg.com/80/v2-7ba4342e6fedb9c5f3726eb0888867da_1440w.jpg?source=1940ef5c",</span><br><span class="line">          dogName: "哈士奇",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            "https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563813435580&amp;di=946902d419c3643e33a0c9113fc8d780&amp;imgtype=0&amp;src=http%3A%2F%2Fvpic.video.qq.com%2F3388556%2Fd0522aynh3x_ori_3.jpg",</span><br><span class="line">          dogName: "阿拉斯加",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            "https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563813454815&amp;di=ecdd2ebf479568453d704dffacdfa12c&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.officedoyen.com%2Fuploads%2Fallimg%2F150408%2F1-15040Q10J5B0.jpg",</span><br><span class="line">          dogName: "萨摩耶",</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">      loveArr: []</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    Dog,</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    fn(dogName) {</span><br><span class="line">      this.loveArr.push(dogName)</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style &gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="附加练习-5-卖完了"><a href="#附加练习-5-卖完了" class="headerlink" title="附加练习_5.卖完了"></a>附加练习_5.卖完了</h2><blockquote>
<p>目标: 完成图示的卖完了效果</p>
</blockquote>
<p>需求: </p>
<ul>
<li>如果为0了后面显示卖光了!!!</li>
<li>如果库存有值, 后面就不显示卖光了!!!</li>
<li>如果库存有值, 累计商品总数量</li>
</ul>
<p>要求: 一行是一个组件进行复用, 这里要求必须用table&gt;tr (也就是封装tr组件)</p>
<p>组件使用注意: html正常解析, table&gt;tr或者select&gt;option, 虽然vue渲染页面可以自定义, 但是还需要遵循浏览器的标签关系</p>
<ul>
<li>table&gt;tr中不能直接使用组件, 需要在tr的is属性指定组件名</li>
<li>select&gt;option 也不能封装options组件, 需要在option的is属性指定组件名</li>
</ul>
<p>效果演示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/11.7_%E8%AF%BE%E4%B8%8A%E7%BB%83%E4%B9%A0.gif" alt="11.7_课上练习"></p>
<p>vue实例data里的数组如下</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">goodsArr: [</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">goodsName</span>: <span class="string">"Watermelon"</span></span><br><span class="line">    }, {</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">goodsName</span>: <span class="string">"Banana"</span></span><br><span class="line">    }, {</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">goodsName</span>: <span class="string">"Orange"</span></span><br><span class="line">    }, {</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">goodsName</span>: <span class="string">"Pineapple"</span></span><br><span class="line">    }, {</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">goodsName</span>: <span class="string">"Strawberry"</span></span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<p>正确代码(不可复制)</p>
<p>components/practise/MyTr.vue</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"obj['count']"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ obj["goodsName"] }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"obj['count'] == 0"</span>&gt;</span>卖光了!!!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 传入对象有风险, 但是如果是一对一关系可以传入对象-直接修改对象里的值影响外部效果</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: [<span class="string">"obj"</span>]</span></span><br><span class="line"><span class="javascript">};</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>App.vue使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">      &lt;!-- 2. 使用tr组件, 传入需要的数据 --&gt;</span><br><span class="line">      &lt;tr</span><br><span class="line">        is="myTr"</span><br><span class="line">        v-for="(item, index) in goodsArr"</span><br><span class="line">        :key="index"</span><br><span class="line">        :obj="item"</span><br><span class="line">        :index="index"</span><br><span class="line">      &gt;&lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;p&gt;All Number:{{ sumNumber }}&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyTr from '@/components/practise/MyTr'</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      goodsArr: [</span><br><span class="line">        {</span><br><span class="line">          count: 0,</span><br><span class="line">          goodsName: "Watermelon",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          count: 0,</span><br><span class="line">          goodsName: "Banana",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          count: 0,</span><br><span class="line">          goodsName: "Orange",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          count: 0,</span><br><span class="line">          goodsName: "Pineapple",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          count: 0,</span><br><span class="line">          goodsName: "Strawberry",</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    MyTr</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    sumNumber(){</span><br><span class="line">      return this.goodsArr.reduce((sum, obj) =&gt; sum += obj.count * 1, 0)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="附加练习-6-买点好吃的"><a href="#附加练习-6-买点好吃的" class="headerlink" title="附加练习_6.买点好吃的"></a>附加练习_6.买点好吃的</h2><blockquote>
<p>目标: 商品列表显示一下, 然后封装组件实现增加减少功能并在最后统计总价</p>
</blockquote>
<p>要求: 商品名, 增加 数量, 减少这一条封装成组件使用</p>
<p>效果演示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/11.6_%E8%AF%BE%E4%B8%8A%E7%BB%83%E4%B9%A0.gif" alt="11.6_课上练习"></p>
<p>数据:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"shopName"</span>: <span class="string">"可比克薯片"</span>,</span><br><span class="line">        <span class="string">"price"</span>: <span class="number">5.5</span>,</span><br><span class="line">        <span class="string">"count"</span>: <span class="number">0</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"shopName"</span>: <span class="string">"草莓酱"</span>,</span><br><span class="line">        <span class="string">"price"</span>: <span class="number">3.5</span>,</span><br><span class="line">        <span class="string">"count"</span>: <span class="number">0</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"shopName"</span>: <span class="string">"红烧肉"</span>,</span><br><span class="line">        <span class="string">"price"</span>: <span class="number">55</span>,</span><br><span class="line">        <span class="string">"count"</span>: <span class="number">0</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"shopName"</span>: <span class="string">"方便面"</span>,</span><br><span class="line">        <span class="string">"price"</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="string">"count"</span>: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<p>正确代码(==不可复制==)</p>
<p>components/practise/Food.vue</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ goodsname }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add(ind)"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span> {{ count }} <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sec(ind)"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: [<span class="string">'goodsname'</span>, <span class="string">'ind'</span>, <span class="string">'count'</span>], <span class="comment">// 商品名,索引,数量</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">add</span>(<span class="params">ind</span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">'addE'</span>, ind)</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">sec</span>(<span class="params">ind</span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">"secE"</span>, ind)</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">};</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;商品清单如下:&lt;/p&gt;</span><br><span class="line">    &lt;div v-for="(obj, index) in shopData" :key="index"&gt;</span><br><span class="line">      {{ obj.shopName }} -- {{ obj.price }}元/份</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;请选择购买数量:&lt;/p&gt;</span><br><span class="line">    &lt;Food</span><br><span class="line">      v-for="(obj, index) in shopData"</span><br><span class="line">      :key="index + ' '"</span><br><span class="line">      :goodsname="obj.shopName"</span><br><span class="line">      :ind="index"</span><br><span class="line">      :count="obj.count"</span><br><span class="line">      @addE="addFn"</span><br><span class="line">      @secE="secFn"</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/Food&gt;</span><br><span class="line">    &lt;p&gt;总价为: {{ allPrice }}&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Food from "@/components/practise/Food";</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      // 商品数据</span><br><span class="line">      shopData: [</span><br><span class="line">        {</span><br><span class="line">          shopName: "可比克薯片",</span><br><span class="line">          price: 5.5,</span><br><span class="line">          count: 0,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          shopName: "草莓酱",</span><br><span class="line">          price: 3.5,</span><br><span class="line">          count: 0,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          shopName: "红烧肉",</span><br><span class="line">          price: 55,</span><br><span class="line">          count: 0,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          shopName: "方便面",</span><br><span class="line">          price: 12,</span><br><span class="line">          count: 0,</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    Food,</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    addFn(ind){</span><br><span class="line">      this.shopData[ind].count++</span><br><span class="line">    },</span><br><span class="line">    secFn(ind){</span><br><span class="line">      this.shopData[ind].count &gt; 0 &amp;&amp; this.shopData[ind].count--</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    allPrice(){</span><br><span class="line">      return this.shopData.reduce((sum, obj) =&gt; sum += obj.count * obj.price, 0)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h2><p>==课上练习和案例主要==</p>
<h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><p>目的: 把一行tr封装成一个组件, 然后v-for循环复用传值</p>
<blockquote>
<p>提示: 对象类型传入到子组件, 内部修改也会相应外部这个对象 (对象是引用关系哦)</p>
</blockquote>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/image-20210115195904519.png" alt="image-20210115195904519"></p>
<p>不带vue代码的标签结构(==可以复制==)接着写</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;table</span><br><span class="line">      border="1"</span><br><span class="line">      width="700"</span><br><span class="line">      style="border-collapse: collapse"</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;caption&gt;</span><br><span class="line">        购物车</span><br><span class="line">      &lt;/caption&gt;</span><br><span class="line">      &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;th&gt;</span><br><span class="line">            &lt;input type="checkbox" /&gt; &lt;span&gt;全选&lt;/span&gt;</span><br><span class="line">          &lt;/th&gt;</span><br><span class="line">          &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;数量&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;总价&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/thead&gt;</span><br><span class="line">      &lt;tbody&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;/tbody&gt;</span><br><span class="line">      &lt;tfoot&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;合计:&lt;/td&gt;</span><br><span class="line">          &lt;td colspan="5"&gt;</span><br><span class="line">            </span><br><span class="line">          &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/tfoot&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      goodList: [</span><br><span class="line">        {</span><br><span class="line">          name: "诸葛亮",</span><br><span class="line">          price: 1000,</span><br><span class="line">          num: 1,</span><br><span class="line">          checked: false,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "蔡文姬",</span><br><span class="line">          price: 1500,</span><br><span class="line">          num: 1,</span><br><span class="line">          checked: false,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "妲己",</span><br><span class="line">          price: 2000,</span><br><span class="line">          num: 1,</span><br><span class="line">          checked: false,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "鲁班",</span><br><span class="line">          price: 2200,</span><br><span class="line">          num: 1,</span><br><span class="line">          checked: false,</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="做数学题"><a href="#做数学题" class="headerlink" title="做数学题"></a>做数学题</h3><p>目的: 随机产生数学题, 输入答案提交后, 在下面对应序号显示结果</p>
<blockquote>
<p>数字输入框按钮是一个组件, 下面每个序号和提示是一个组件</p>
</blockquote>
<p>图示:</p>
<p><img src="/2021/05/14/vue%E5%9F%BA%E7%A1%803-vue%E7%BB%84%E4%BB%B6_%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1_todo%E6%A1%88%E4%BE%8B/Day04_%E4%BD%9C%E4%B8%9A_%E6%95%B0%E5%AD%A6%E9%A2%98.gif" alt="Day04_作业_数学题"></p>
<p>Subject.vue - 题目一行组件 (样式和标签)(==可以复制接着写==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="subject"&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;+&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;=&lt;/span&gt;</span><br><span class="line">    &lt;input type="number" /&gt;</span><br><span class="line">    &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.subject {</span><br><span class="line">  margin: 5px;</span><br><span class="line">  padding: 5px;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">}</span><br><span class="line">.subject span {</span><br><span class="line">  display: inline-block;</span><br><span class="line">  text-align: center;</span><br><span class="line">  width: 20px;</span><br><span class="line">}</span><br><span class="line">.subject input {</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 20px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>Flag.vue - 下面结果一条的组件 (复制标签和样式)(==可以复制==)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;span &gt;1: 未完成&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.right {</span><br><span class="line">  color: green;</span><br><span class="line">}</span><br><span class="line">.error {</span><br><span class="line">  color: red;</span><br><span class="line">}</span><br><span class="line">.undo {</span><br><span class="line">  color: #ccc;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>App.vue - 复制标签和样式</p>
<p>无vue代码的标签(==可以复制==)</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">subject</span> &gt;</span><span class="tag">&lt;/<span class="name">subject</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">flag</span>&gt;</span><span class="tag">&lt;/<span class="name">flag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">};</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="css">  <span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue应用2-vue移动端-仿头条demo</title>
    <url>/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、项目初始化"><a href="#一、项目初始化" class="headerlink" title="一、项目初始化"></a>一、项目初始化</h1><blockquote>
<p>目标</p>
<ul>
<li>能使用 Vue CLI 创建项目</li>
<li>了解 Vant 组件库的导入方式</li>
<li>掌握制作使用字体图标的方式</li>
<li>掌握如何在 Vue 项目中处理 REM 适配</li>
<li>理解 axios 请求模块的封装</li>
</ul>
</blockquote>
<h2 id="使用-Vue-CLI-创建项目"><a href="#使用-Vue-CLI-创建项目" class="headerlink" title="使用 Vue CLI 创建项目"></a>使用 Vue CLI 创建项目</h2><blockquote>
<p>如果你还没有安装 VueCLI，请执行下面的命令安装或是升级：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">npm install --global @vue/cli</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<p>在命令行中输入以下命令创建 Vue 项目：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">vue create toutiao-m</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">Vue CLI v4.2.3</span><br><span class="line">? Please pick a preset:</span><br><span class="line">  default (babel, eslint)</span><br><span class="line">&gt; Manually select features</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>default：默认勾选 babel、eslint，回车之后直接进入装包</p>
<p>manually：自定义勾选特性配置，选择完毕之后，才会进入装包</p>
<p>选择第 2 种：手动选择特性，支持更多自定义选项</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project:</span><br><span class="line"> (*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> (*) Router</span><br><span class="line"> (*) Vuex</span><br><span class="line"> (*) CSS Pre-processors</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">(*) Linter / Formatter</span></span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>分别选择：<br>Babel：es6 转 es5<br>Router：路由<br>Vuex：数据容器，存储共享数据<br>CSS Pre-processors：CSS 预处理器，后面会提示你选择 less、sass、stylus 等<br>Linter / Formatter：代码格式校验</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n) n</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>是否使用 history 路由模式，这里输入 n 不使用</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default):</span><br><span class="line">  Sass/SCSS (with dart-sass)</span><br><span class="line">  Sass/SCSS (with node-sass)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Less</span></span><br><span class="line">  Stylus</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>选择 CSS 预处理器，这里选择我们熟悉的 Less</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">? Pick a linter / formatter config:</span><br><span class="line">  ESLint with error prevention only</span><br><span class="line">  ESLint + Airbnb config</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ESLint + Standard config</span></span><br><span class="line">  ESLint + Prettier</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>选择校验工具，这里选择 ESLint + <a href="https://standardjs.com/">Standard config</a></p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">? Pick additional lint features:</span><br><span class="line"> (*) Lint on save</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">(*) Lint and fix on commit</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>选择在什么时机下触发代码格式校验：</p>
<ul>
<li>Lint on save：每当保存文件的时候</li>
<li>Lint and fix on commit：每当执行 <code>git commit</code> 提交的时候</li>
</ul>
</blockquote>
<p>这里建议两个都选上，更严谨。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> In dedicated config files</span></span><br><span class="line">  In package.json</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>Babel、ESLint 等工具会有一些额外的配置文件，这里的意思是问你将这些工具相关的配置文件写到哪里：</p>
<ul>
<li>In dedicated config files：分别保存到单独的配置文件</li>
<li>In package.json：保存到 package.json 文件中</li>
</ul>
</blockquote>
<p>这里建议选择第 1 个，保存到单独的配置文件，这样方便我们做自定义配置。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">? Save this as a preset for future projects? (y/N) N</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>这里里是问你是否需要将刚才选择的一系列配置保存起来，然后它可以帮你记住上面的一系列选择，以便下次直接重用。</p>
</blockquote>
<blockquote>
<p>这里根据自己需要输入 y 或者 n，我这里输入 n 不需要。</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">✨  Creating project in C:\Users\LPZ\Desktop\topline-m-fe89\topline-m-89.</span><br><span class="line">�  Initializing git repository...</span><br><span class="line">⚙  Installing CLI plugins. This might take a while...</span><br><span class="line"></span><br><span class="line">[          ........] - extract:object-keys: sill extract json5@2.1.1</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>向导配置结束，开始装包。<br>安装包的时间可能较长，请耐心等待……</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">⚓  Running completion hooks...</span><br><span class="line"></span><br><span class="line">�  Generating README.md...</span><br><span class="line"></span><br><span class="line">�  Successfully created project topline-m-89.</span><br><span class="line">�  Get started with the following commands:</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"> $</span><span class="bash"> <span class="built_in">cd</span> topline-m</span></span><br><span class="line"><span class="meta"> $</span><span class="bash"> npm run serve</span></span><br></pre></td></tr></tbody></table></figure>
<p>安装结束，命令提示你项目创建成功，按照命令行的提示在终端中分别输入：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入你的项目目录</span></span><br><span class="line">cd toutiao-webapp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动开发服务</span></span><br><span class="line">npm run serve</span><br></pre></td></tr></tbody></table></figure>




<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">DONE  Compiled successfully in 7527ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> App running at:</span><br><span class="line"> - Local:   http://localhost:8080/</span><br><span class="line"> - Network: http://192.168.10.216:8080/</span><br><span class="line"></span><br><span class="line"> Note that the development build is not optimized.</span><br><span class="line"> To create a production build, run npm run build.</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>启动成功，命令行中输出项目的 http 访问地址。<br>打开浏览器，输入其中任何一个地址进行访问。</p>
</blockquote>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1582010300149-9932febe-2625-4ee7-986f-9190ab449fec.png" alt="image.png"></p>
<p>如果能看到该页面，恭喜你，项目创建成功了。</p>
<h2 id="加入-Git-版本管理"><a href="#加入-Git-版本管理" class="headerlink" title="加入 Git 版本管理"></a>加入 Git 版本管理</h2><p>几个好处：</p>
<ul>
<li>代码备份</li>
<li>多人协作</li>
<li>历史记录</li>
<li>…</li>
</ul>
<p>（1）创建远程仓库</p>
<ul>
<li><a href="https://github.com/lipengzhou">GitHub</a></li>
<li><a href="https://gitee.com/">码云</a></li>
<li><a href="https://coding.net/">Coding</a></li>
<li>…</li>
</ul>
<p>（2）将本地仓库推到线上</p>
<p>如果没有本地仓库。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建本地仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文件添加到暂存区</span></span><br><span class="line">git add 文件</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交历史记录</span></span><br><span class="line">git commit "提交日志"</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加远端仓库地址</span></span><br><span class="line">git remote add origin 你的远程仓库地址</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送提交</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></tbody></table></figure>

<p>如果已有本地仓库（Vue CLI 已经帮我们初始化好了）。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加远端仓库地址</span></span><br><span class="line">git remote add origin 你的远程仓库地址</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送提交</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></tbody></table></figure>

<p>如果之后项目代码有了变动需要提交：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git add</span><br><span class="line">git commit</span><br><span class="line">git push</span><br></pre></td></tr></tbody></table></figure>

<h2 id="调整初始目录结构"><a href="#调整初始目录结构" class="headerlink" title="调整初始目录结构"></a>调整初始目录结构</h2><p>默认生成的目录结构不满足我们的开发需求，所以这里需要做一些自定义改动。</p>
<p>这里主要就是下面的两个工作：</p>
<ul>
<li>删除初始化的默认文件</li>
<li>新增调整我们需要的目录结构</li>
</ul>
<p>1、将 <code>App.vue</code> 修改为</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>黑马头条<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'App'</span></span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>2、将 <code>router/index.js</code> 修改为</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter({</span><br><span class="line">  routes</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>3、删除</p>
<ul>
<li>src/views/About.vue</li>
<li>src/views/Home.vue</li>
<li>src/components/HelloWorld.vue</li>
<li>src/assets/logo.png</li>
</ul>
<p>4、创建以下几个目录</p>
<ul>
<li>src/api 目录<ul>
<li>存储接口封装</li>
</ul>
</li>
<li>src/utils 目录<ul>
<li>存储一些工具模块</li>
</ul>
</li>
<li>src/styles 目录<ul>
<li>index.less 文件，存储全局样式</li>
<li>在 <code>main.js</code> 中加载全局样式 <code>import './styles/index.less'</code></li>
</ul>
</li>
</ul>
<p>调整之后的目录结构如下。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">.                                 </span><br><span class="line">├── README.md                     </span><br><span class="line">├── babel.config.js               </span><br><span class="line">├── package-lock.json             </span><br><span class="line">├── package.json                  </span><br><span class="line">├── public                        </span><br><span class="line">│   ├── favicon.ico               </span><br><span class="line">│   └── index.html                </span><br><span class="line">└── src                           </span><br><span class="line">    ├── api</span><br><span class="line">    ├── App.vue                   </span><br><span class="line">    ├── assets                    </span><br><span class="line">    ├── components                </span><br><span class="line">    ├── main.js                   </span><br><span class="line">    ├── router</span><br><span class="line">    ├── utils</span><br><span class="line">    ├── styles</span><br><span class="line">    ├── store                     </span><br><span class="line">    └── views</span><br></pre></td></tr></tbody></table></figure>



<h2 id="导入图标素材"><a href="#导入图标素材" class="headerlink" title="导入图标素材"></a>导入图标素材</h2><p>设计师为我们单独提供了设计稿中的图标，为了方便使用，我们在这里把它制作为字体图标。</p>
<p>制作字体图标的工具有很多，在这里我们推荐大家使用：<a href="https://www.iconfont.cn/%E3%80%82">https://www.iconfont.cn/。</a></p>
<p>一、注册账户</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200325004756766.png" alt="image-20200325004756766"></p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200325004912687.png" alt="image-20200325004912687"></p>
<blockquote>
<p>直接选择第三方登录即可</p>
</blockquote>
<p>二、创建项目</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200325005117323.png" alt="image-20200325005117323"></p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200325005648620.png" alt="image-20200325005648620"></p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200325010034390.png" alt="image-20200325010034390"></p>
<p>三、上传图标到项目</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200325010119980.png" alt="image-20200325010119980"></p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200325010201945.png" alt="image-20200325010201945"></p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200325010254398.png" alt="image-20200325010254398"></p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200325010413448.png" alt="image-20200325010413448"></p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200325010439802.png" alt="image-20200325010439802"></p>
<p>四、生成链接</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200325010505302.png" alt="image-20200325010505302"></p>
<p>五、配置到项目中使用</p>
<p>一种方式是<a href="https://cn.vuejs.org/v2/cookbook/editable-svg-icons.html">将 SVG 图标 包装为 Vue 组件来使用</a>。</p>
<p>一种方式是将 SVG 制作为字体图标来使用：</p>
<h2 id="引入-Vant-组件库"><a href="#引入-Vant-组件库" class="headerlink" title="引入 Vant 组件库"></a>引入 Vant 组件库</h2><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1582010382780-c25b1af8-ce6d-438e-a6d5-009cd426b927.png" alt="image.png" style="zoom:25%;">



<p>Vant 是有赞商城前端开发团队开发的一个基于 Vue.js 的移动端组件库，它提供了非常丰富的移动端功能组件，简单易用。</p>
<ul>
<li><a href="https://youzan.github.io/vant/#/zh-CN/">官方文档</a></li>
<li><a href="https://github.com/youzan/vant">GitHub 仓库</a></li>
</ul>
<p>下面是在 Vant 官网中列出的一些优点：</p>
<ul>
<li>60+ 高质量组件</li>
<li>90% 单元测试覆盖率</li>
<li>完善的中英文文档和示例</li>
<li>支持按需引入</li>
<li>支持主题定制</li>
<li>支持国际化</li>
<li>支持 TS</li>
<li>支持 SSR</li>
</ul>
<p>在我们的项目中主要使用 Vant 作为核心组件库，下面我们根据<a href="https://youzan.github.io/vant/#/zh-CN/quickstart#yin-ru-zu-jian">官方文档</a>将 Vant 导入项目中。</p>
<p>将 Vant 引入项目一共有四种方式：</p>
<ul>
<li><p>方式一：自动按需引入组件</p>
<ul>
<li>和方式二一样，都是按需引入，但是加载更方便一些（需要额外配置插件）</li>
<li>优点：打包体积小</li>
<li>缺点：每个组件在使用之前都需要手动加载注册</li>
</ul>
</li>
<li><p>方式二：手动按需引入组件</p>
<ul>
<li>在不使用插件的情况下，可以手动引入需要的组件</li>
<li>优点：打包体积小</li>
<li>缺点：每个组件在使用之前都需要手动加载注册</li>
</ul>
</li>
<li><p>方式三：导入所有组件</p>
<ul>
<li>Vant 支持一次性导入所有组件，引入所有组件会增加代码包体积，因此不推荐这种做法</li>
<li>优点：导入一次，使用所有</li>
<li>缺点：打包体积大</li>
</ul>
</li>
<li><p>方式四：通过 CDN 引入</p>
<ul>
<li>使用 Vant 最简单的方法是直接在 html 文件中引入 CDN 链接，之后你可以通过全局变量<code>vant</code>访问到所有组件。</li>
<li>优点：适合一些演示、示例项目，一个 html 文件就可以跑起来</li>
<li>缺点：不适合在模块化系统中使用</li>
</ul>
</li>
</ul>
<p>这里建议为了前期开发的便利性我们选择方式三：导入所有组件，在最后做打包优化的时候根据需求配置按需加载以降低打包体积大小。</p>
<p>1、安装 Vant</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm i vant</span><br></pre></td></tr></tbody></table></figure>

<p>2、在 <code>main.js</code> 中加载注册 Vant 组件</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vant <span class="keyword">from</span> <span class="string">'vant'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'vant/lib/index.css'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vant)</span><br></pre></td></tr></tbody></table></figure>

<p>3、查阅文档使用组件</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1582017539392-6c48b63f-8e8b-4ef2-b4fa-ddeb059cec04.png" alt="image.png"></p>
<blockquote>
<p>Vant 的文档非常清晰，左侧是组件目录导航，中间是效果代码，右边是效果预览。</p>
</blockquote>
<p>例如我们在根组件使用 Vant 中的组件：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">"default"</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">"info"</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">"warning"</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">"danger"</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"单元格"</span> <span class="attr">value</span>=<span class="string">"内容"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"单元格"</span> <span class="attr">value</span>=<span class="string">"内容"</span> <span class="attr">label</span>=<span class="string">"描述信息"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200227231037762.png" alt="image-20200227231037762" style="zoom:50%;">

<blockquote>
<p>如果在页面中能够正常的看到下面的效果，则说明 Vant 导入成功了。</p>
</blockquote>
<h2 id="移动端-REM-适配"><a href="#移动端-REM-适配" class="headerlink" title="移动端 REM 适配"></a>移动端 REM 适配</h2><p>Vant 中的样式默认使用 <code>px</code> 作为单位，如果需要使用 <code>rem</code> 单位，推荐使用以下两个工具：</p>
<ul>
<li><a href="https://github.com/cuth/postcss-pxtorem">postcss-pxtorem</a> 是一款 postcss 插件，用于将单位转化为 rem</li>
<li><a href="https://github.com/amfe/lib-flexible">lib-flexible</a> 用于设置 rem 基准值</li>
</ul>
<p>下面我们分别将这两个工具配置到项目中完成 REM 适配。</p>
<p><strong>一、使用 <a href="https://github.com/amfe/lib-flexible">lib-flexible</a> 动态设置 REM 基准值（html 标签的字体大小）</strong></p>
<p>1、安装</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yarn add amfe-flexible</span></span><br><span class="line">npm i amfe-flexible</span><br></pre></td></tr></tbody></table></figure>

<p>2、然后在 <code>main.js</code> 中加载执行该模块</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'amfe-flexible'</span></span><br></pre></td></tr></tbody></table></figure>

<p>最后测试：在浏览器中切换不同的手机设备尺寸，观察 html 标签 <code>font-size</code> 的变化。</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1582034718723-500ef407-af66-4770-8fdd-33d0fc3ef9ed.png" alt="image.png"></p>
<blockquote>
<p>例如在 iPhone 6/7/8 设备下，html 标签字体大小为 37.5 px</p>
</blockquote>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1582034950176-868d5875-3496-45d3-8a61-e556e1cc1f90.png" alt="image.png"></p>
<blockquote>
<p>例如在 iPhone 6/7/8 Plus 设备下，html 标签字体大小为 41.4 px</p>
</blockquote>
<p><strong>二、使用 <a href="https://github.com/cuth/postcss-pxtorem">postcss-pxtorem</a> 将 <code>px</code> 转为 <code>rem</code></strong></p>
<p>1、安装</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yarn add -D postcss-pxtorem</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -D 是 --save-dev 的简写</span></span><br><span class="line">npm install postcss-pxtorem -D</span><br></pre></td></tr></tbody></table></figure>

<p>2、然后在<strong>项目根目录</strong>中创建 <code>.postcssrc.js</code> 文件</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: {</span><br><span class="line">    <span class="string">'autoprefixer'</span>: {</span><br><span class="line">      <span class="attr">browsers</span>: [<span class="string">'Android &gt;= 4.0'</span>, <span class="string">'iOS &gt;= 8'</span>]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">'postcss-pxtorem'</span>: {</span><br><span class="line">      <span class="attr">rootValue</span>: <span class="number">37.5</span>,</span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">'*'</span>]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>3、<strong>配置完毕，重新启动服务</strong></p>
<p>最后测试：<strong>刷新浏览器页面</strong>，审查元素的样式查看是否已将 <code>px</code> 转换为 <code>rem</code>。</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1582035408807-1adb02e6-4576-48b6-8fb9-b3a0c57ead0d.png" alt="image.png"></p>
<blockquote>
<p>这是没有配置转换之前的。</p>
</blockquote>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1582035305177-d13c0a83-65bf-4fe5-a509-83bbb3bbf627.png" alt="image.png"></p>
<blockquote>
<p>这是转换之后的，可以看到 px 都被转换为了 rem。</p>
</blockquote>
<p><strong>需要注意的是：</strong></p>
<ul>
<li>该插件**不能转换行内样式中的 <code>px</code>**，例如 <code>&lt;div style="width: 200px;"&gt;&lt;/div&gt;</code></li>
</ul>
<h2 id="关于-postcssrc-js-配置文件"><a href="#关于-postcssrc-js-配置文件" class="headerlink" title="关于 .postcssrc.js 配置文件"></a>关于 <code>.postcssrc.js</code> 配置文件</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: {</span><br><span class="line">    <span class="string">'autoprefixer'</span>: {</span><br><span class="line">      <span class="attr">browsers</span>: [<span class="string">'Android &gt;= 4.0'</span>, <span class="string">'iOS &gt;= 8'</span>]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">'postcss-pxtorem'</span>: {</span><br><span class="line">      <span class="attr">rootValue</span>: <span class="number">37.5</span>,</span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">'*'</span>]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><code>.postcssrc.js</code> 是 PostCSS 的配置文件。</p>
<p>（1）PostCSS 介绍</p>
<p><a href="https://postcss.org/">PostCSS</a> 是一个处理 CSS 的处理工具，本身功能比较单一，它主要负责解析 CSS 代码，再交由插件来进行处理，它的插件体系非常强大，所能进行的操作是多种多样的，例如：</p>
<ul>
<li><a href="https://github.com/postcss/autoprefixer">Autoprefixer</a> 插件可以实现自动添加浏览器相关的声明前缀</li>
<li><a href="https://github.com/csstools/postcss-preset-env">PostCSS Preset Env</a> 插件可以让你使用更新的 CSS 语法特性并实现向下兼容</li>
<li><a href="https://github.com/cuth/postcss-pxtorem">postcss-pxtorem</a> 可以实现将 px 转换为 rem</li>
<li>…</li>
</ul>
<p>目前 PostCSS 已经有 <a href="https://github.com/postcss/postcss/blob/master/docs/plugins.md">200 多个功能各异的插件</a>。开发人员也可以根据项目的需要，开发出自己的 PostCSS 插件。</p>
<p>PostCSS 一般不单独使用，而是与已有的构建工具进行集成。</p>
<p><a href="https://cli.vuejs.org/zh/guide/css.html#postcss">Vue CLI 默认集成了 PostCSS</a>，并且默认开启了 <a href="https://github.com/postcss/autoprefixer">autoprefixer</a> 插件。</p>
<blockquote>
<p>Vue CLI 内部使用了 PostCSS。</p>
<p>你可以通过 <code>.postcssrc</code> 或任何 <a href="https://github.com/michael-ciniawsky/postcss-load-config">postcss-load-config</a> 支持的配置源来配置 PostCSS。也可以通过 <code>vue.config.js</code> 中的 <code>css.loaderOptions.postcss</code> 配置 <a href="https://github.com/postcss/postcss-loader">postcss-loader</a>。</p>
<p>我们默认开启了 <a href="https://github.com/postcss/autoprefixer">autoprefixer</a>。如果要配置目标浏览器，可使用 <code>package.json</code> 的 <a href="https://cli.vuejs.org/zh/guide/browser-compatibility.html#browserslist">browserslist</a> 字段。</p>
</blockquote>
<p>（2）Autoprefixer 插件的配置</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200319104557718.png" alt="image-20200319104557718"></p>
<p><a href="https://github.com/postcss/autoprefixer">autoprefixer</a> 是一个自动添加浏览器前缀的 PostCss 插件，<code>browsers</code> 用来配置兼容的浏览器版本信息，但是写在这里的话会引起编译器警告。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Replace Autoprefixer browsers option to Browserslist config.</span><br><span class="line">Use browserslist key in package.json or .browserslistrc file.</span><br><span class="line"></span><br><span class="line">Using browsers option can cause errors. Browserslist config</span><br><span class="line">can be used for Babel, Autoprefixer, postcss-normalize and other tools.</span><br><span class="line"></span><br><span class="line">If you really need to use option, rename it to overrideBrowserslist.</span><br><span class="line"></span><br><span class="line">Learn more at:</span><br><span class="line">https://github.com/browserslist/browserslist#readme</span><br><span class="line">https://twitter.com/browserslist</span><br></pre></td></tr></tbody></table></figure>

<p>警告意思就是说你应该将 <code>browsers</code> 选项写到 <code>package.json</code> 或 <code>.browserlistrc</code> 文件中。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[Android]</span><br><span class="line">&gt;= 4.0</span><br><span class="line"></span><br><span class="line">[iOS]</span><br><span class="line">&gt;= 8</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>具体语法请<a href="https://github.com/browserslist/browserslist">参考这里</a>。</p>
</blockquote>
<p>（3）postcss-pxtorem 插件的配置</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200319105610557.png" alt="image-20200319105610557"></p>
<ul>
<li><code>rootValue</code>：表示根元素字体大小，它会根据根元素大小进行单位转换</li>
<li><code>propList</code> 用来设定可以从 px 转为 rem 的属性<ul>
<li>例如 <code>*</code> 就是所有属性都要转换，<code>width</code> 就是仅转换 <code>width</code> 属性</li>
</ul>
</li>
</ul>
<p><code>rootValue</code> 应该如何设置呢？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">如果你使用的是基于 lib-flexable 的 REM 适配方案，则应该设置为你的设计稿的十分之一。</span><br><span class="line">例如设计稿是 750 宽，则应该设置为 75。</span><br></pre></td></tr></tbody></table></figure>



<p>大多数设计稿的原型都是以 iphone6 为原型，iphone6 设备的宽是 750，我们的设计稿也是这样。</p>
<p>但是 Vant 建议设置为 37.5，为什么呢？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">因为 Vant 是基于 375 写的，所以如果你设置为 75 的话，Vant 的样式就小了一半。</span><br></pre></td></tr></tbody></table></figure>

<p>所以如果设置为 <code>37.5</code> 的话，Vant 的样式是没有问题的，但是我们在测量设计稿的时候都必须除2才能使用，否则就会变得很大。</p>
<p>这样做其实也没有问题，但是有没有更好的办法呢？我就想实现测量多少写多少（不用换算）。于是聪明的你就想，可以不可以这样来做？</p>
<ul>
<li>如果是 Vant 的样式，就把 <code>rootValue</code> 设置为 37.5 来转换</li>
<li>如果是我们的样式，就按照 75 的 <code>rootValue</code> 来转换</li>
</ul>
<p>通过<a href="https://github.com/cuth/postcss-pxtorem#options">查阅文档</a>我们可以看到 <code>rootValue</code> 支持两种参数类型：</p>
<ul>
<li>数字：固定值</li>
<li>函数：动态计算返回<ul>
<li>postcss-pxtorem 处理每个 CSS 文件的时候都会来调用这个函数</li>
<li>它会把被处理的 CSS 文件相关的信息通过参数传递给该函数</li>
</ul>
</li>
</ul>
<p>所以我们修改配置如下：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PostCSS 配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="comment">// 配置要使用的 PostCSS 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: {</span><br><span class="line">    <span class="comment">// 配置使用 autoprefixer 插件</span></span><br><span class="line">    <span class="comment">// 作用：生成浏览器 CSS 样式规则前缀</span></span><br><span class="line">    <span class="comment">// VueCLI 内部已经配置了 autoprefixer 插件</span></span><br><span class="line">    <span class="comment">// 所以又配置了一次，所以产生冲突了</span></span><br><span class="line">    <span class="comment">// 'autoprefixer': { // autoprefixer 插件的配置</span></span><br><span class="line">    <span class="comment">//   // 配置要兼容到的环境信息</span></span><br><span class="line">    <span class="comment">//   browsers: ['Android &gt;= 4.0', 'iOS &gt;= 8']</span></span><br><span class="line">    <span class="comment">// },</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置使用 postcss-pxtorem 插件</span></span><br><span class="line">    <span class="comment">// 作用：把 px 转为 rem</span></span><br><span class="line">    <span class="string">'postcss-pxtorem'</span>: {</span><br><span class="line">      rootValue ({ file }) {</span><br><span class="line">        <span class="keyword">return</span> file.indexOf(<span class="string">'vant'</span>) !== -<span class="number">1</span> ? <span class="number">37.5</span> : <span class="number">75</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">'*'</span>]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>配置完毕，把服务重启一下，最后测试，very good。</p>
<h2 id="封装请求模块"><a href="#封装请求模块" class="headerlink" title="封装请求模块"></a>封装请求模块</h2><p>和之前项目一样，这里我们还是使用 <a href="https://github.com/axios/axios">axios</a> 作为我们项目中的请求库，为了方便使用，我们把它封装为一个请求模块，在需要的时候直接加载即可。</p>
<p>1、安装 axios</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></tbody></table></figure>

<p>2、创建 <code>src/utils/request.js</code></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装 axios 请求模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.create({</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">"http://ttapi.research.itcast.cn/"</span> <span class="comment">// 基础路径</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></tbody></table></figure>

<p>3、如何使用</p>
<ul>
<li>方式一（简单方便，但是不利于接口维护）：我们可以把请求对象挂载到 <code>Vue.prototype</code> 原型对象中，然后在组件中通过 <code>this.xxx</code> 直接访问</li>
<li>方式二（推荐）：我们把每一个请求都封装成每个独立的功能函数，在需要的时候加载调用，这种做法更便于接口的管理和维护</li>
</ul>
<p>在我们的项目中建议使用方式二，更推荐（在随后的业务功能中我们就能学到）。</p>
<h1 id="二、登录注册"><a href="#二、登录注册" class="headerlink" title="二、登录注册"></a>二、登录注册</h1><blockquote>
<p>目标</p>
<ul>
<li>能实现登录页面的布局</li>
<li>能实现基本登录功能</li>
<li>能掌握 Vant 中 Toast 提示组件的使用</li>
<li>能理解 API 请求模块的封装</li>
<li>能理解发送验证码的实现思路</li>
<li>能理解 Vant Form 实现表单验证的使用</li>
</ul>
</blockquote>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200228161041266.png" alt="image-20200228161041266" style="zoom:50%;">

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="创建组件并配置路由"><a href="#创建组件并配置路由" class="headerlink" title="创建组件并配置路由"></a>创建组件并配置路由</h3><p>1、创建 <code>src/views/login/index.vue</code> 并写入以下内容</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-container"</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'LoginPage'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>2、然后在 <code>src/router/index.js</code> 中配置登录页的路由表</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">path</span>: <span class="string">'/login'</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'login'</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/login'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p>最后，访问 <code>/login</code> 查看是否能访问到登录页面。</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200229115109026.png" alt="image-20200229115109026" style="zoom:50%;">


<h3 id="布局结构"><a href="#布局结构" class="headerlink" title="布局结构"></a>布局结构</h3><p>这里主要使用到三个 Vant 组件：</p>
<ul>
<li><a href="https://youzan.github.io/vant/#/zh-CN/nav-bar">NavBar 导航栏</a></li>
<li><a href="https://youzan.github.io/vant/#/zh-CN/form">Form 表单</a><ul>
<li><a href="https://youzan.github.io/vant/#/zh-CN/field">Field 输入框</a></li>
<li><a href="https://youzan.github.io/vant/#/zh-CN/button">Button 按钮</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>一个经验：使用组件库中的现有组件快速布局，再慢慢调整细节，效率更高（刚开始可能会感觉有点麻烦，越用越熟，慢慢的就有了自己的思想）。</p>
</blockquote>
<h3 id="布局样式"><a href="#布局样式" class="headerlink" title="布局样式"></a>布局样式</h3><blockquote>
<p>写样式的原则：将公共样式写到全局（<code>src/styles/index.less</code>），将局部样式写到组件内部。</p>
</blockquote>
<p>1、<code>src/styles/index.less</code></p>
<figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f7f9</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page-nav-bar</span> {</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3296fa</span>;</span><br><span class="line">  <span class="selector-class">.van-nav-bar__title</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、<code>src/views/login/index.vue</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span> <span class="attr">class</span>=<span class="string">"page-nav-bar"</span> <span class="attr">title</span>=<span class="string">"登录"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /导航栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 登录表单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-form</span> @<span class="attr">submit</span>=<span class="string">"onSubmit"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"用户名"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">"请输入手机号"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"left-icon"</span> <span class="attr">class</span>=<span class="string">"toutiao toutiao-shouji"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-field</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"验证码"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">"请输入验证码"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"left-icon"</span> <span class="attr">class</span>=<span class="string">"toutiao toutiao-yanzhengma"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">class</span>=<span class="string">"send-sms-btn"</span> <span class="attr">round</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">type</span>=<span class="string">"default"</span>&gt;</span>发送验证码<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-field</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-btn-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">class</span>=<span class="string">"login-btn"</span> <span class="attr">block</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">native-type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">          登录</span><br><span class="line">        <span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /登录表单 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'LoginIndex'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">    onSubmit (values) {</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'submit'</span>, values)</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.login-container</span> {</span></span><br><span class="line"><span class="css">  <span class="selector-class">.toutiao</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">37px</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.send-sms-btn</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">152px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">46px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">46px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#ededed</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.login-btn-wrap</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">53px</span> <span class="number">33px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.login-btn</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: <span class="number">#6db4fb</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="实现基本登录功能"><a href="#实现基本登录功能" class="headerlink" title="实现基本登录功能"></a>实现基本登录功能</h2><p>思路：</p>
<ul>
<li>注册点击登录的事件</li>
<li>获取表单数据（根据接口要求使用 v-model 绑定）</li>
<li>表单验证</li>
<li>发请求提交</li>
<li>根据请求结果做下一步处理</li>
</ul>
<p><strong>一、根据接口要求绑定获取表单数据</strong></p>
<p>1、在登录页面组件的实例选项 data 中添加 <code>user</code> 数据字段</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">...</span><br><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">user</span>: {</span><br><span class="line">      <span class="attr">mobile</span>: <span class="string">''</span>,</span><br><span class="line">      <span class="attr">code</span>: <span class="string">''</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、在表单中使用 <code>v-model</code> 绑定对应数据</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- van-cell-group 仅仅是提供了一个上下外边框，能看到包裹的区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"user.mobile"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">required</span></span></span><br><span class="line"><span class="tag">    <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"手机号"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">"请输入手机号"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"user.code"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"number"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"验证码"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">"请输入验证码"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">required</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>最后测试。</p>
<blockquote>
<p>一个小技巧：使用 VueDevtools 调试工具查看是否绑定成功。</p>
</blockquote>
<p><strong>二、请求登录</strong></p>
<p>1、创建 <code>src/api/user.js</code> 封装请求方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户相关的请求模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">"@/utils/request"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function"><span class="params">data</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/authorizations'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、给登录按钮注册点击事件</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onLogin () {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> login(<span class="built_in">this</span>.user)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'登录成功'</span>, res)</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="keyword">if</span> (err.response.status === <span class="number">400</span>) {</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'登录失败'</span>, err)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>最后测试。</p>
<h2 id="登录状态提示"><a href="#登录状态提示" class="headerlink" title="登录状态提示"></a>登录状态提示</h2><p>Vant 中内置了<a href="https://youzan.github.io/vant/#/zh-CN/toast">Toast 轻提示</a>组件，可以实现移动端常见的提示效果。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 简单文字提示</span></span><br><span class="line">Toast(<span class="string">"提示内容"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// loading 转圈圈提示</span></span><br><span class="line">Toast.loading({</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">0</span>, <span class="comment">// 持续展示 toast</span></span><br><span class="line">  <span class="attr">message</span>: <span class="string">"加载中..."</span>,</span><br><span class="line">  <span class="attr">forbidClick</span>: <span class="literal">true</span> <span class="comment">// 是否禁止背景点击</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功提示</span></span><br><span class="line">Ttoast.success(<span class="string">"成功文案"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 失败提示</span></span><br><span class="line">Toast.fail(<span class="string">"失败文案"</span>);</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>提示：在组件中可以直接通过 <code>this.$toast</code> 调用。</p>
</blockquote>
<p>另外需要注意的是：Toast 默认采用单例模式，即同一时间只会存在一个 Toast，如果需要在同一时间弹出多个 Toast，可以参考下面的示例</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">Toast.allowMultiple();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toast1 = Toast(<span class="string">'第一个 Toast'</span>);</span><br><span class="line"><span class="keyword">const</span> toast2 = Toast.success(<span class="string">'第二个 Toast'</span>);</span><br><span class="line"></span><br><span class="line">toast1.clear();</span><br><span class="line">toast2.clear();</span><br></pre></td></tr></tbody></table></figure>

<p>下面是为我们的登录功能增加 toast 交互提示。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onLogin () {</span><br><span class="line">  <span class="comment">// 开始转圈圈</span></span><br><span class="line">  <span class="built_in">this</span>.$toast.loading({</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">0</span>, <span class="comment">// 持续时间，0表示持续展示不停止</span></span><br><span class="line">    <span class="attr">forbidClick</span>: <span class="literal">true</span>, <span class="comment">// 是否禁止背景点击</span></span><br><span class="line">    <span class="attr">message</span>: <span class="string">'登录中...'</span> <span class="comment">// 提示消息</span></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> request({</span><br><span class="line">      <span class="attr">method</span>: <span class="string">'POST'</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">'/app/v1_0/authorizations'</span>,</span><br><span class="line">      <span class="attr">data</span>: <span class="built_in">this</span>.user</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'登录成功'</span>, res)</span><br><span class="line">    <span class="comment">// 提示 success 或者 fail 的时候，会先把其它的 toast 先清除</span></span><br><span class="line">    <span class="built_in">this</span>.$toast.success(<span class="string">'登录成功'</span>)</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'登录失败'</span>, err)</span><br><span class="line">    <span class="built_in">this</span>.$toast.fail(<span class="string">'登录失败，手机号或验证码错误'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>假如请求非常快的话就看不到 loading 效果了，这里可以手动将调试工具中的网络设置为慢速网络。</p>
<p>测试结束，再把网络设置恢复为 <code>Online</code> 正常网络。</p>
<h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><blockquote>
<p>参考文档：<a href="https://youzan.github.io/vant/#/zh-CN/form#xiao-yan-gui-ze">Form 表单验证</a></p>
</blockquote>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span> <span class="attr">class</span>=<span class="string">"page-nav-bar"</span> <span class="attr">title</span>=<span class="string">"登录"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /导航栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 登录表单 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      表单验证：</span></span><br><span class="line"><span class="comment">        1、给 van-field 组件配置 rules 验证规则</span></span><br><span class="line"><span class="comment">          参考文档：https://youzan.github.io/vant/#/zh-CN/form#rule-shu-ju-jie-gou</span></span><br><span class="line"><span class="comment">        2、当表单提交的时候会自动触发表单验证</span></span><br><span class="line"><span class="comment">           如果验证通过，会触发 submit 事件</span></span><br><span class="line"><span class="comment">           如果验证失败，不会触发 submit</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-form</span> @<span class="attr">submit</span>=<span class="string">"onSubmit"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"user.mobile"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"手机号"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">"请输入手机号"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:rules</span>=<span class="string">"userFormRules.mobile"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"number"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxlength</span>=<span class="string">"11"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"left-icon"</span> <span class="attr">class</span>=<span class="string">"toutiao toutiao-shouji"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-field</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"user.code"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"验证码"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">"请输入验证码"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:rules</span>=<span class="string">"userFormRules.code"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"number"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxlength</span>=<span class="string">"6"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"left-icon"</span> <span class="attr">class</span>=<span class="string">"toutiao toutiao-yanzhengma"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">class</span>=<span class="string">"send-sms-btn"</span> <span class="attr">round</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">type</span>=<span class="string">"default"</span>&gt;</span>发送验证码<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-field</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-btn-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">class</span>=<span class="string">"login-btn"</span> <span class="attr">block</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">native-type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">          登录</span><br><span class="line">        <span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /登录表单 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> { login } <span class="keyword">from</span> <span class="string">'@/api/user'</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'LoginIndex'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">user</span>: {</span></span><br><span class="line"><span class="javascript">        <span class="attr">mobile</span>: <span class="string">''</span>, <span class="comment">// 手机号</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">code</span>: <span class="string">''</span> <span class="comment">// 验证码</span></span></span><br><span class="line"><span class="javascript">      },</span></span><br><span class="line"><span class="javascript">      <span class="attr">userFormRules</span>: {</span></span><br><span class="line"><span class="javascript">        <span class="attr">mobile</span>: [{</span></span><br><span class="line"><span class="javascript">          <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">message</span>: <span class="string">'手机号不能为空'</span></span></span><br><span class="line"><span class="javascript">        }, {</span></span><br><span class="line"><span class="javascript">          <span class="attr">pattern</span>: <span class="regexp">/^1[3|5|7|8]\d{9}$/</span>,</span></span><br><span class="line"><span class="javascript">          message: <span class="string">'手机号格式错误'</span></span></span><br><span class="line"><span class="javascript">        }],</span></span><br><span class="line"><span class="javascript">        <span class="attr">code</span>: [{</span></span><br><span class="line"><span class="javascript">          <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">message</span>: <span class="string">'验证码不能为空'</span></span></span><br><span class="line"><span class="javascript">        }, {</span></span><br><span class="line"><span class="javascript">          <span class="attr">pattern</span>: <span class="regexp">/^\d{6}$/</span>,</span></span><br><span class="line"><span class="javascript">          message: <span class="string">'验证码格式错误'</span></span></span><br><span class="line"><span class="javascript">        }]</span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> onSubmit () {</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1. 获取表单数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> user = <span class="built_in">this</span>.user</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// <span class="doctag">TODO:</span> 2. 表单验证</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3. 提交表单请求登录</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$toast.loading({</span></span><br><span class="line"><span class="javascript">        <span class="attr">message</span>: <span class="string">'登录中...'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">forbidClick</span>: <span class="literal">true</span>, <span class="comment">// 禁用背景点击</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">duration</span>: <span class="number">0</span> <span class="comment">// 持续时间，默认 2000，0 表示持续展示不关闭</span></span></span><br><span class="line"><span class="javascript">      })</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">try</span> {</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> res = <span class="keyword">await</span> login(user)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'登录成功'</span>, res)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$toast.success(<span class="string">'登录成功'</span>)</span></span><br><span class="line"><span class="javascript">      } <span class="keyword">catch</span> (err) {</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (err.response.status === <span class="number">400</span>) {</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$toast.fail(<span class="string">'手机号或验证码错误'</span>)</span></span><br><span class="line"><span class="javascript">        } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$toast.fail(<span class="string">'登录失败，请稍后重试'</span>)</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 4. 根据请求响应结果处理后续操作</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.login-container</span> {</span></span><br><span class="line"><span class="css">  <span class="selector-class">.toutiao</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">37px</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.send-sms-btn</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">152px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">46px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">46px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#ededed</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.login-btn-wrap</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">53px</span> <span class="number">33px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.login-btn</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: <span class="number">#6db4fb</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h2 id="验证码处理"><a href="#验证码处理" class="headerlink" title="验证码处理"></a>验证码处理</h2><h3 id="验证手机号"><a href="#验证手机号" class="headerlink" title="验证手机号"></a>验证手机号</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onSendSms () {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'onSendSms'</span>)</span><br><span class="line">  <span class="comment">// 1. 校验手机号</span></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.$refs.loginForm.validate(<span class="string">'mobile'</span>)</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'验证失败'</span>, err)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 验证通过，显示倒计时</span></span><br><span class="line">  <span class="comment">// 3. 请求发送验证码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h3 id="使用倒计时组件"><a href="#使用倒计时组件" class="headerlink" title="使用倒计时组件"></a>使用倒计时组件</h3><p>1、在 data 中添加数据用来控制倒计时的显示和隐藏</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">isCountDownShow</span>: <span class="literal">false</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、使用倒计时组件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"user.code"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">"请输入验证码"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-mima"</span> <span class="attr">slot</span>=<span class="string">"left-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-count-down</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">"isCountDownShow"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:time</span>=<span class="string">"1000 * 5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">format</span>=<span class="string">"ss s"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">finish</span>=<span class="string">"isCountDownShow = false"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">round</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"onSendSmsCode"</span></span></span><br><span class="line"><span class="tag">  &gt;</span>发送验证码<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-field</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="发送验证码"><a href="#发送验证码" class="headerlink" title="发送验证码"></a>发送验证码</h3><p>1、在 <code>api/user.js</code> 中添加封装数据接口</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getSmsCode = <span class="function"><span class="params">mobile</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/app/v1_0/sms/codes/<span class="subst">${mobile}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、给发送验证码按钮注册点击事件</p>
<p>3、发送处理</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onSendSms () {</span><br><span class="line">  <span class="comment">// 1. 校验手机号</span></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.$refs.loginForm.validate(<span class="string">'mobile'</span>)</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'验证失败'</span>, err)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 验证通过，显示倒计时</span></span><br><span class="line">  <span class="built_in">this</span>.isCountDownShow = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 请求发送验证码</span></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">await</span> sendSms(<span class="built_in">this</span>.user.mobile)</span><br><span class="line">    <span class="built_in">this</span>.$toast(<span class="string">'发送成功'</span>)</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="comment">// 发送失败，关闭倒计时</span></span><br><span class="line">    <span class="built_in">this</span>.isCountDownShow = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (err.response.status === <span class="number">429</span>) {</span><br><span class="line">      <span class="built_in">this</span>.$toast(<span class="string">'发送太频繁了，请稍后重试'</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="built_in">this</span>.$toast(<span class="string">'发送失败，请稍后重试'</span>)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="处理用户-Token"><a href="#处理用户-Token" class="headerlink" title="处理用户 Token"></a>处理用户 Token</h2><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200329121650635.png" alt="image-20200329121650635">

<p>Token 是用户登录成功之后服务端返回的一个身份令牌，在项目中的多个业务中需要使用到：</p>
<ul>
<li>访问需要授权的 API 接口</li>
<li>校验页面的访问权限</li>
<li>…</li>
</ul>
<p>但是我们只有在第一次用户登录成功之后才能拿到 Token。</p>
<p>所以为了能在其它模块中获取到 Token 数据，我们需要把它存储到一个公共的位置，方便随时取用。</p>
<p>往哪儿存？</p>
<ul>
<li>本地存储<ul>
<li>获取麻烦</li>
<li>数据不是响应式</li>
</ul>
</li>
<li>Vuex 容器（推荐）<ul>
<li>获取方便</li>
<li>响应式的</li>
</ul>
</li>
</ul>
<p>使用容器存储 Token 的思路：</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200109192157006.png" alt="image-20200109192157006"></p>
<ul>
<li>登录成功，将 Token 存储到 Vuex 容器中<ul>
<li>获取方便</li>
<li>响应式</li>
</ul>
</li>
<li>为了持久化，还需要把 Token 放到本地存储<ul>
<li>持久化</li>
</ul>
</li>
</ul>
<p>下面是具体实现。</p>
<p>1、在 <code>src/store/index.js</code> 中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">  <span class="attr">state</span>: {</span><br><span class="line">    <span class="comment">// 用户的登录状态信息</span></span><br><span class="line">    <span class="attr">user</span>: <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'TOUTIAO_USER'</span>))</span><br><span class="line">    <span class="comment">// user: null</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">mutations</span>: {</span><br><span class="line">    setUser (state, user) {</span><br><span class="line">      state.user = user</span><br><span class="line">      <span class="built_in">window</span>.localStorage.setItem(<span class="string">'TOUTIAO_USER'</span>, <span class="built_in">JSON</span>.stringify(user))</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">actions</span>: {</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">modules</span>: {</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>2、登录成功以后将后端返回的 token 相关数据存储到容器中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onLogin () {</span><br><span class="line">  <span class="comment">// const loginToast = this.$toast.loading({</span></span><br><span class="line">  <span class="built_in">this</span>.$toast.loading({</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">0</span>, <span class="comment">// 持续时间，0表示持续展示不停止</span></span><br><span class="line">    <span class="attr">forbidClick</span>: <span class="literal">true</span>, <span class="comment">// 是否禁止背景点击</span></span><br><span class="line">    <span class="attr">message</span>: <span class="string">'登录中...'</span> <span class="comment">// 提示消息</span></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> login(<span class="built_in">this</span>.user)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// res.data.data =&gt; { token: 'xxx', refresh_token: 'xxx' }</span></span><br><span class="line">+    <span class="built_in">this</span>.$store.commit(<span class="string">'setUser'</span>, res.data.data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提示 success 或者 fail 的时候，会先把其它的 toast 先清除</span></span><br><span class="line">    <span class="built_in">this</span>.$toast.success(<span class="string">'登录成功'</span>)</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'登录失败'</span>, err)</span><br><span class="line">    <span class="built_in">this</span>.$toast.fail(<span class="string">'登录失败，手机号或验证码错误'</span>)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 停止 loading，它会把当前页面中所有的 toast 都给清除</span></span><br><span class="line">  <span class="comment">// loginToast.clear()</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="优化封装本地存储操作模块"><a href="#优化封装本地存储操作模块" class="headerlink" title="优化封装本地存储操作模块"></a>优化封装本地存储操作模块</h2><p>创建 <code>src/utils/storage.js</code> 模块。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getItem = <span class="function"><span class="params">name</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">window</span>.localStorage.getItem(name)</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setItem = <span class="function">(<span class="params">name, value</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span>) {</span><br><span class="line">    value = <span class="built_in">JSON</span>.stringify(value)</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">window</span>.localStorage.setItem(name, value)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> removeItem = <span class="function"><span class="params">name</span> =&gt;</span> {</span><br><span class="line">  <span class="built_in">window</span>.localStorage.removeItem(name)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="关于-Token-过期问题"><a href="#关于-Token-过期问题" class="headerlink" title="关于 Token 过期问题"></a>关于 Token 过期问题</h2><p>登录成功之后后端会返回两个 Token：</p>
<ul>
<li><code>token</code>：访问令牌，有效期2小时</li>
<li><code>refresh_token</code>：刷新令牌，有效期14天，用于访问令牌过期之后重新获取新的访问令牌</li>
</ul>
<p>我们的项目接口中设定的 <code>Token</code> 有效期是 <code>2 小时</code>，超过有效期服务端会返回 <code>401</code> 表示 Token 无效或过期了。</p>
<p>为什么过期时间这么短？</p>
<ul>
<li>为了安全，例如 Token 被别人盗用</li>
</ul>
<p>过期了怎么办？</p>
<ul>
<li><del>让用户重新登录</del>，用户体验太差了</li>
<li>使用 <code>refresh_token</code> 解决 <code>token</code> 过期</li>
</ul>
<p>如何使用 <code>refresh_token</code> 解决 <code>token</code> 过期？</p>
<blockquote>
<p>到课程的后面我们开发的业务功能丰富起来之后，再给大家讲解 Token 过期处理。</p>
<p>大家需要注意的是<strong>在学习测试的时候如果收到 401 响应码，请重新登录再测试</strong>。</p>
</blockquote>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/v2-8f29f24dd291ddf46abda5d5ab7bec6c_720w.jpg" alt="img"></p>
<p>概述：服务器生成token的过程中，会有两个时间，一个是token失效时间，一个是token刷新时间，刷新时间肯定比失效时间长，当用户的 <code>token</code> 过期时，你可以拿着过期的token去换取新的token，来保持用户的登陆状态，当然你这个过期token的过期时间必须在刷新时间之内，如果超出了刷新时间，那么返回的依旧是 401。</p>
<p>处理流程：</p>
<ol>
<li>在axios的拦截器中加入token刷新逻辑</li>
<li>当用户token过期时，去向服务器请求新的 token</li>
<li>把旧的token替换为新的token</li>
<li>然后继续用户当前的请求</li>
</ol>
<p>在请求的响应拦截器中统一处理 token 过期：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装 axios 请求模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">import</span> jsonBig <span class="keyword">from</span> <span class="string">"json-bigint"</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"@/store"</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"@/router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios.create 方法：复制一个 axios</span></span><br><span class="line"><span class="keyword">const</span> request = axios.create({</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">"http://ttapi.research.itcast.cn/"</span> <span class="comment">// 基础路径</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置处理后端返回数据中超出 js 安全整数范围问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">request.defaults.transformResponse = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      <span class="keyword">return</span> jsonBig.parse(data);</span><br><span class="line">    } <span class="keyword">catch</span> (err) {</span><br><span class="line">      <span class="keyword">return</span> {};</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">request.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> user = store.state.user;</span><br><span class="line">    <span class="keyword">if</span> (user) {</span><br><span class="line">      config.headers.Authorization = <span class="string">`Bearer <span class="subst">${user.token}</span>`</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>{</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  }</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">request.interceptors.response.use(</span><br><span class="line">  <span class="comment">// 响应成功进入第1个函数</span></span><br><span class="line">  <span class="comment">// 该函数的参数是响应对象</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>{</span><br><span class="line">    <span class="comment">// Any status code that lie within the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 响应失败进入第2个函数，该函数的参数是错误对象</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>{</span><br><span class="line">    <span class="comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="comment">// 如果响应码是 401 ，则请求获取新的 token</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应拦截器中的 error 就是那个响应的错误对象</span></span><br><span class="line">    <span class="built_in">console</span>.dir(error);</span><br><span class="line">    <span class="keyword">if</span> (error.response &amp;&amp; error.response.status === <span class="number">401</span>) {</span><br><span class="line">      <span class="comment">// 校验是否有 refresh_token</span></span><br><span class="line">      <span class="keyword">const</span> user = store.state.user;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!user || !user.refresh_token) {</span><br><span class="line">        router.push(<span class="string">"/login"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代码不要往后执行了</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果有refresh_token，则请求获取新的 token</span></span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> axios({</span><br><span class="line">          <span class="attr">method</span>: <span class="string">"PUT"</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">"http://ttapi.research.itcast.cn/app/v1_0/authorizations"</span>,</span><br><span class="line">          <span class="attr">headers</span>: {</span><br><span class="line">            <span class="attr">Authorization</span>: <span class="string">`Bearer <span class="subst">${user.refresh_token}</span>`</span></span><br><span class="line">          }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果获取成功，则把新的 token 更新到容器中</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"刷新 token  成功"</span>, res);</span><br><span class="line">        store.commit(<span class="string">"setUser"</span>, {</span><br><span class="line">          <span class="attr">token</span>: res.data.data.token, <span class="comment">// 最新获取的可用 token</span></span><br><span class="line">          <span class="attr">refresh_token</span>: user.refresh_token <span class="comment">// 还是原来的 refresh_token</span></span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把之前失败的用户请求继续发出去</span></span><br><span class="line">        <span class="comment">// config 是一个对象，其中包含本次失败请求相关的那些配置信息，例如 url、method 都有</span></span><br><span class="line">        <span class="comment">// return 把 request 的请求结果继续返回给发请求的具体位置</span></span><br><span class="line">        <span class="keyword">return</span> request(error.config);</span><br><span class="line">      } <span class="keyword">catch</span> (err) {</span><br><span class="line">        <span class="comment">// 如果获取失败，直接跳转 登录页</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"请求刷线 token 失败"</span>, err);</span><br><span class="line">        router.push(<span class="string">"/login"</span>);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  }</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="三、个人中心"><a href="#三、个人中心" class="headerlink" title="三、个人中心"></a>三、个人中心</h1><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1566431827166.png" width="250">

<h2 id="TabBar-处理"><a href="#TabBar-处理" class="headerlink" title="TabBar 处理"></a>TabBar 处理</h2><p>通过分析页面，我们可以看到，首页、问答、视频、我的 都使用的是同一个底部标签栏，我们没必要在每个页面中都写一个，所以为了通用方便，我们可以使用 Vue Router 的嵌套路由来处理。</p>
<ul>
<li>父路由：一个空页面，包含一个 tabbar，中间留子路由出口</li>
<li>子路由<ul>
<li>首页</li>
<li>问答</li>
<li>视频</li>
<li>我的</li>
</ul>
</li>
</ul>
<p>一、创建 tabbar 组件并配置路由</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200109153050432.png" alt="image-20200109153050432" width="250">

<p>这里主要使用到的 Vant 组件：</p>
<ul>
<li><a href="https://youzan.github.io/vant/#/zh-CN/tabbar">Tabbar 标签栏</a></li>
</ul>
<p>1、创建 <code>src/views/layout/index.vue</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout-container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子路由出口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /子路由出口 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 标签导航栏 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      route: 开启路由模式</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-tabbar</span> <span class="attr">class</span>=<span class="string">"layout-tabbar"</span> <span class="attr">route</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-tabbar-item</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"icon"</span> <span class="attr">class</span>=<span class="string">"toutiao toutiao-shouye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-tabbar-item</span> <span class="attr">to</span>=<span class="string">"/qa"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"icon"</span> <span class="attr">class</span>=<span class="string">"toutiao toutiao-wenda"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>问答<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-tabbar-item</span> <span class="attr">to</span>=<span class="string">"/video"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"icon"</span> <span class="attr">class</span>=<span class="string">"toutiao toutiao-shipin"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-tabbar-item</span> <span class="attr">to</span>=<span class="string">"/my"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"icon"</span> <span class="attr">class</span>=<span class="string">"toutiao toutiao-wode"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-tabbar</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /标签导航栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'LayoutIndex'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.layout-container</span> {</span></span><br><span class="line"><span class="css">  <span class="selector-class">.layout-tabbar</span> {</span></span><br><span class="line"><span class="css">    <span class="selector-tag">i</span><span class="selector-class">.toutiao</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">    <span class="selector-tag">span</span><span class="selector-class">.text</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>2、然后将 layout 组件配置到一级路由</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/layout'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>访问 <code>/</code> 测试。</p>
<p>二、分别创建首页、问答、视频、我的页面组件</p>
<p>首页组件：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-container"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'HomePage'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p>问答组件：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"qa-container"</span>&gt;</span>问答<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'QaPage'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p>视频组件：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video-container"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'VideoPage'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p>我的组件：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-container"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'MyPage'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p>二、将四个主页面配置为 tab-bar 的子路由</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'tab-bar'</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/tab-bar'</span>),</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">path</span>: <span class="string">''</span>, <span class="comment">// 默认子路由</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">'home'</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/home'</span>)</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">path</span>: <span class="string">'qa'</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">'qa'</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/qa'</span>)</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">path</span>: <span class="string">'video'</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">'video'</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/video'</span>)</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">path</span>: <span class="string">'my'</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">'my'</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/my'</span>)</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>最后测试。</p>
<h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><h3 id="未登录头部状态"><a href="#未登录头部状态" class="headerlink" title="未登录头部状态"></a>未登录头部状态</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"mobile-img"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">"~@/assets/mobile.png"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"$router.push('/login')"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid-nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"消息通知"</span> <span class="attr">is-link</span> <span class="attr">url</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"实名认证"</span> <span class="attr">is-link</span> <span class="attr">url</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"用户反馈"</span> <span class="attr">is-link</span> <span class="attr">url</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"小智同学"</span> <span class="attr">is-link</span> <span class="attr">url</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"系统设置"</span> <span class="attr">is-link</span> <span class="attr">url</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'MyIndex'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.my-container</span> {</span></span><br><span class="line"><span class="css">  &gt; <span class="selector-class">.header</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">361px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"~@/assets/banner.png"</span>) no-repeat;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.mobile-img</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">132px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">132px</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="已登录头部"><a href="#已登录头部" class="headerlink" title="已登录头部"></a>已登录头部</h3><h3 id="宫格导航"><a href="#宫格导航" class="headerlink" title="宫格导航"></a>宫格导航</h3><h3 id="单元格导航"><a href="#单元格导航" class="headerlink" title="单元格导航"></a>单元格导航</h3><h2 id="处理已登录和未登录的页面展示"><a href="#处理已登录和未登录的页面展示" class="headerlink" title="处理已登录和未登录的页面展示"></a>处理已登录和未登录的页面展示</h2><ul>
<li>未登录，展示登录按钮</li>
<li>已登录，展示登录用户信息</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 已登录：用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"$store.state.user"</span> <span class="attr">class</span>=<span class="string">"user-info-wrap"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /已登录：用户信息 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 未登录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"not-login"</span> @<span class="attr">click</span>=<span class="string">"$router.push('/login')"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /未登录 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 退出 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-cell-group</span> <span class="attr">v-if</span>=<span class="string">"$store.state.user"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /退出 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>



<h2 id="用户退出"><a href="#用户退出" class="headerlink" title="用户退出"></a>用户退出</h2><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/用户退出-1578559616164.gif" alt="用户退出" width="250">

<p>1、给退出按钮注册点击事件</p>
<p>2、退出处理</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">onLogout () {</span><br><span class="line">  <span class="comment">// 退出提示</span></span><br><span class="line">  <span class="comment">// 在组件中需要使用 this.$dialog 来调用弹框组件</span></span><br><span class="line">  <span class="built_in">this</span>.$dialog.confirm({</span><br><span class="line">    <span class="attr">title</span>: <span class="string">'确认退出吗？'</span></span><br><span class="line">  }).then(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">// on confirm</span></span><br><span class="line">    <span class="comment">// 确认退出：清除登录状态（容器中的 user + 本地存储中的 user）</span></span><br><span class="line">    <span class="built_in">this</span>.$store.commit(<span class="string">'setUser'</span>, <span class="literal">null</span>)</span><br><span class="line">  }).catch(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">// on cancel</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'取消执行这里'</span>)</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>最后测试。</p>
<h2 id="展示登录用户信息"><a href="#展示登录用户信息" class="headerlink" title="展示登录用户信息"></a>展示登录用户信息</h2><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200109133717775.png" alt="image-20200109133717775" width="250">

<p>步骤：</p>
<ul>
<li>封装接口</li>
<li>请求获取数据</li>
<li>模板绑定</li>
</ul>
<p>1、在 <code>api/user.js</code> 中添加封装数据接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户自己的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getUserInfo = <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/user'</span>,</span><br><span class="line">    <span class="comment">// 发送请求头数据</span></span><br><span class="line">    <span class="attr">headers</span>: {</span><br><span class="line">      <span class="comment">// 注意：该接口需要授权才能访问</span></span><br><span class="line">      <span class="comment">//       token的数据格式：Bearer token数据，注意 Bearer 后面有个空格</span></span><br><span class="line">      <span class="attr">Authorization</span>: <span class="string">`Bearer <span class="subst">${store.state.user.token}</span>`</span></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>2、在 <code>views/my/index.vue</code> 请求加载数据</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">+ <span class="keyword">import</span> { getUserInfo } <span class="keyword">from</span> <span class="string">'@/api/user'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'MyPage'</span>,</span><br><span class="line">  <span class="attr">components</span>: {},</span><br><span class="line">  <span class="attr">props</span>: {},</span><br><span class="line">  data () {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">+      userInfo: {} <span class="comment">// 用户信息</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">computed</span>: {},</span><br><span class="line">  <span class="attr">watch</span>: {},</span><br><span class="line">+++  created () {</span><br><span class="line">    <span class="comment">// 初始化的时候，如果用户登录了，我才请求获取当前登录用户的信息</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.$store.state.user) {</span><br><span class="line">      <span class="built_in">this</span>.loadUser()</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted () {},</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">+++    <span class="keyword">async</span> loadUser () {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">const</span> { data } = <span class="keyword">await</span> getUserInfo()</span><br><span class="line">        <span class="built_in">this</span>.user = data.data</span><br><span class="line">      } <span class="keyword">catch</span> (err) {</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">        <span class="built_in">this</span>.$toast(<span class="string">'获取数据失败'</span>)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>3、模板绑定</p>
<h2 id="优化设置-Token"><a href="#优化设置-Token" class="headerlink" title="优化设置 Token"></a>优化设置 Token</h2><p>项目中的接口除了登录之外大多数都需要提供 token 才有访问权限。</p>
<p>通过接口文档可以看到，后端接口要求我们将 token 放到请求头 <code>Header</code> 中并以下面的格式发送。</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200301214857543.png" alt="image-20200301214857543"></p>
<blockquote>
<p>字段名称：<code>Authorization</code></p>
<p>字段值：<code>Bearer token</code>，注意 <code>Bearer</code> 和 <code>token</code> 之间有一个空格</p>
</blockquote>
<p>方式一：在每次请求的时候手动添加（麻烦）。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">axios({</span><br><span class="line">  <span class="attr">method</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">headers</span>: {</span><br><span class="line">    <span class="attr">Authorization</span>: <span class="string">"Bearer token"</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>方式二：使用请求拦截器统一添加（推荐，更方便）。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">  participant A as 发起请求</span><br><span class="line">  participant B as 请求拦截器</span><br><span class="line">  participant C as 服务端</span><br><span class="line">  A--&gt;&gt;B: http://xxx</span><br><span class="line">  Note right of B: 设置 token</span><br><span class="line">  B-&gt;&gt;C: 请求发出</span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></tbody></table></figure>

<p>在 <code>src/utils/request.js</code> 中添加拦截器统一设置 token：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.create({</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">'http://ttapi.research.itcast.cn/'</span> <span class="comment">// 接口的基准路径</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line"><span class="comment">// Add a request interceptor</span></span><br><span class="line">request.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>{</span><br><span class="line">  <span class="comment">// Do something before request is sent</span></span><br><span class="line">  <span class="comment">// config ：本次请求的配置对象</span></span><br><span class="line">  <span class="comment">// config 里面有一个属性：headers</span></span><br><span class="line">  <span class="keyword">const</span> { user } = store.state</span><br><span class="line">  <span class="keyword">if</span> (user &amp;&amp; user.token) {</span><br><span class="line">    config.headers.Authorization = <span class="string">`Bearer <span class="subst">${user.token}</span>`</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">}, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>{</span><br><span class="line">  <span class="comment">// Do something with request error</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h1 id="四、首页—文章列表"><a href="#四、首页—文章列表" class="headerlink" title="四、首页—文章列表"></a>四、首页—文章列表</h1><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1566539328996.png" width="250">

<h2 id="页面布局-1"><a href="#页面布局-1" class="headerlink" title="页面布局"></a>页面布局</h2><h3 id="头部导航栏"><a href="#头部导航栏" class="headerlink" title="头部导航栏"></a>头部导航栏</h3><p>1、使用导航栏组件</p>
<p>2、在导航栏组件中插入按钮</p>
<ul>
<li>文本</li>
<li>图标</li>
</ul>
<p>3、样式调整</p>
<ul>
<li>宽高</li>
<li>背景色</li>
<li>边框</li>
<li>文本大小</li>
<li>图标大小</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span> <span class="attr">class</span>=<span class="string">"page-nav-bar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"search-btn"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">slot</span>=<span class="string">"title"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"info"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">round</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">"search"</span></span></span><br><span class="line"><span class="tag">      &gt;</span>搜索<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-nav-bar</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /导航栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'HomeIndex'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.home-container</span> {</span></span><br><span class="line"><span class="css">  <span class="selector-class">.van-nav-bar__title</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">max-width</span>: unset;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.search-btn</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">555px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">64px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#5babfb</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.van-icon</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h2 id="频道列表"><a href="#频道列表" class="headerlink" title="频道列表"></a>频道列表</h2><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200305195458197.png" alt="image-20200305195458197" style="zoom: 80%;">

<h3 id="使用-Tab-标签页组件"><a href="#使用-Tab-标签页组件" class="headerlink" title="使用 Tab 标签页组件"></a>使用 Tab 标签页组件</h3><p>参考：<a href="https://youzan.github.io/vant/#/zh-CN/tab">Tab 标签页组件</a></p>
<h3 id="样式调整"><a href="#样式调整" class="headerlink" title="样式调整"></a>样式调整</h3><p>（1）基础样式调整</p>
<ul>
<li>标签项<ul>
<li>右边框</li>
<li>下边框</li>
<li>宽高</li>
<li>文字大小</li>
<li>文字颜色</li>
</ul>
</li>
<li>底部条<ul>
<li>宽高</li>
<li>颜色</li>
<li>位置</li>
</ul>
</li>
</ul>
<p>（2）处理汉堡按钮</p>
<p>1、使用插槽插入内容</p>
<p>2、样式调整</p>
<ul>
<li>定位</li>
<li>内容居中</li>
<li>宽高</li>
<li>背景色、透明度</li>
<li>字体图标大小</li>
</ul>
<p>3、使用伪元素设置渐变边框</p>
<ul>
<li>定位</li>
<li>宽高</li>
<li>背景图</li>
<li>背景图填充模式</li>
</ul>
<p>4、添加占位符充当内容区域</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200402215736215.png" alt="image-20200402215736215" style="zoom:50%;">

<p>CSS 样式：</p>
<figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.placeholder</span> {</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">66px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">82px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hamburger-btn</span> {</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">66px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">82px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.902</span>;</span><br><span class="line">  <span class="selector-tag">i</span><span class="selector-class">.toutiao</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">33px</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="selector-tag">&amp;</span>:<span class="selector-tag">before</span> {</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">~@/assets/gradient-gray-line.png</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: contain;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>




<h3 id="展示频道列表"><a href="#展示频道列表" class="headerlink" title="展示频道列表"></a>展示频道列表</h3><p>思路：</p>
<ol>
<li>找数据接口</li>
<li>把接口封装为请求方法</li>
<li>在组件中请求获取数据</li>
<li>模板绑定</li>
</ol>
<p>1、封装数据请求接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户自己的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getUserChannels = <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/user/channels'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、请求获取数据</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200401004107079.png" alt="image-20200401004107079" style="zoom:50%;">

<p>3、模板绑定</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200401004138232.png" alt="image-20200401004138232" style="zoom:50%;">


<h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200311221143472.png" alt="image-20200311221143472" style="zoom: 50%;">

<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>你的思路可能是这样的：</p>
<p>1、找到数据接口</p>
<p>2、封装请求方法</p>
<p>3、在组件中请求获取数据，将数据存储到 data 中</p>
<p>4、模板绑定展示</p>
<p>根据不同的频道加载不同的文章列表，你的思路可能是这样的：</p>
<ul>
<li>有一个 <code>list</code> 数组，用来存储文章列表</li>
<li>查看 <code>a</code> 频道：请求获取数据，让 <code>list = a</code> 频道文章</li>
<li>查看 <code>b</code> 频道：请求获取数据，让 <code>list = b</code> 频道文章</li>
<li>查看 <code>c</code> 频道：请求获取数据，让 <code>list = c</code> 频道文章</li>
<li>…</li>
</ul>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200111124415227.png" alt="image-20200111124415227"></p>
<p>思路没有问题，但是并不是我们想要的效果。</p>
<p>我们想要的效果是：<strong>加载过的数据列表不要重新加载</strong>。</p>
<p>实现思路也非常简单，就是我们准备<strong>多个 list 数组，每个频道对应一个，查看哪个频道就把数据往哪个频道的列表数组中存放，这样的话就不会导致覆盖问题</strong>。</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200111124530323.png" alt="image-20200111124530323"></p>
<p>可是有多少频道就得有多少频道文章数组，我们都一个一个声明的话会非常麻烦，所以这里的建议是利用组件来处理。</p>
<p>具体做法就是：</p>
<ul>
<li>封装一个文章列表组件</li>
<li>然后在频道列表中把文章列表遍历出来</li>
</ul>
<p><strong>因为文章列表组件中请求获取文章列表数据需要频道 id，所以 频道 id 应该作为 props 参数传递给文章列表组件，为了方便，我们直接把频道对象传递给文章列表组件就可以了。</strong></p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200306155328108.png" alt="image-20200306155328108" style="zoom: 67%;">

<p>在文章列表中请求获取对应的列表数据，展示到列表中。</p>
<p>最后把组件在频道列表中遍历出来，就像下面这样。</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200306154805522.png" alt="image-20200306154805522"></p>
<p>1、创建 <code>src/views/home/components/article-list.vue</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-list"</span>&gt;</span>文章列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'ArticleList'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="attr">channel</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p>2、在 <code>home/index.vue</code> 中注册使用</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200305205441485.png" alt="image-20200305205441485" style="zoom:50%;">



<p>3、最后测试。</p>
<p>答疑：</p>
<ul>
<li>为什么标签内容是懒渲染的？<ul>
<li>因为这是 Tab 标签页组件本身支持的默认功能，如果不需要可以通过配置 <code>:lazy-render="false"</code> 来关闭这个效果。</li>
</ul>
</li>
</ul>
<h3 id="使用-List-列表组件"><a href="#使用-List-列表组件" class="headerlink" title="使用 List 列表组件"></a>使用 List 列表组件</h3><p><a href="https://youzan.github.io/vant/#/zh-CN/list">List 列表组件</a>：瀑布流滚动加载，用于展示长列表。</p>
<p>List 组件通过 loading 和 finished 两个变量控制加载状态，<br>当组件初始化或滚动到到底部时，会触发 load 事件并将 loading 设置成 true，此时可以发起异步操作并更新数据，数据更新完毕后，将 loading 设置成 false 即可。<br>若数据已全部加载完毕，则直接将 finished 设置成 true 即可。</p>
<ul>
<li><code>load 事件</code>：<ul>
<li>List 初始化后会触发一次 load 事件，用于加载第一屏的数据。</li>
<li>如果一次请求加载的数据条数较少，导致列表内容无法铺满当前屏幕，List 会继续触发 load 事件，直到内容铺满屏幕或数据全部加载完成。</li>
</ul>
</li>
<li><code>loading 属性</code>：控制加载中的 loading 状态<ul>
<li>非加载中，loading 为 false，此时会根据列表滚动位置判断是否触发 load 事件（列表内容不足一屏幕时，会直接触发）</li>
<li>加载中，loading 为 true，表示正在发送异步请求，此时不会触发 load 事件</li>
</ul>
</li>
<li><code>finished 属性</code>：控制加载结束的状态<ul>
<li>在每次请求完毕后，需要手动将 loading 设置为 false，表示本次加载结束</li>
<li>所有数据加载结束，finished 为 true，此时不会触发 load 事件</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-list"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      List 列表组件：瀑布流滚动加载，用于展示长列表。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      List 组件通过 loading 和 finished 两个变量控制加载状态，</span></span><br><span class="line"><span class="comment">      当组件初始化或滚动到到底部时，会触发 load 事件并将 loading 自动设置成 true，此时可以发起异步操作并更新数据，</span></span><br><span class="line"><span class="comment">      数据更新完毕后，将 loading 设置成 false 即可。</span></span><br><span class="line"><span class="comment">      若数据已全部加载完毕，则直接将 finished 设置成 true 即可。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      - load 事件：</span></span><br><span class="line"><span class="comment">        + List 初始化后会触发一次 load 事件，用于加载第一屏的数据。</span></span><br><span class="line"><span class="comment">        + 如果一次请求加载的数据条数较少，导致列表内容无法铺满当前屏幕，List 会继续触发 load 事件，直到内容铺满屏幕或数据全部加载完成。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      - loading 属性：控制加载中的 loading 状态</span></span><br><span class="line"><span class="comment">        + 非加载中，loading 为 false，此时会根据列表滚动位置判断是否触发 load 事件（列表内容不足一屏幕时，会直接触发）</span></span><br><span class="line"><span class="comment">        + 加载中，loading 为 true，表示正在发送异步请求，此时不会触发 load 事件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      - finished 属性：控制加载结束的状态</span></span><br><span class="line"><span class="comment">        + 在每次请求完毕后，需要手动将 loading 设置为 false，表示本次加载结束</span></span><br><span class="line"><span class="comment">        + 所有数据加载结束，finished 为 true，此时不会触发 load 事件</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-list</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:finished</span>=<span class="string">"finished"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">finished-text</span>=<span class="string">"没有更多了"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">load</span>=<span class="string">"onLoad"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item"</span> <span class="attr">:title</span>=<span class="string">"item"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'ArticleList'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="attr">channel</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">list</span>: [], <span class="comment">// 存储列表数据的数组</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">loading</span>: <span class="literal">false</span>, <span class="comment">// 控制加载中 loading 状态</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">finished</span>: <span class="literal">false</span> <span class="comment">// 控制数据加载结束的状态</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 初始化或滚动到底部的时候会触发调用 onLoad</span></span></span><br><span class="line"><span class="javascript">    onLoad () {</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'onLoad'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1. 请求获取数据</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// setTimeout 仅做示例，真实场景中一般为 ajax 请求</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 把请求结果数据放到 list 数组中</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 0 + 1 = 1</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 1 + 1 = 2</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 2 + 1 = 3</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list.push(<span class="built_in">this</span>.list.length + <span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3. 本次数据加载结束之后要把加载状态设置为结束</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     loading 关闭以后才能触发下一次的加载更多</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.loading = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 4. 判断数据是否全部加载完成</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.list.length &gt;= <span class="number">40</span>) {</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 如果没有数据了，把 finished 设置为 true，之后不再触发加载更多</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.finished = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">      }, <span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="让列表固定定位"><a href="#让列表固定定位" class="headerlink" title="让列表固定定位"></a>让列表固定定位</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">.article-list {</span><br><span class="line">  position: fixed;</span><br><span class="line">  top: 180px;</span><br><span class="line">  bottom: 100px;</span><br><span class="line">  right: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  overflow-y: auto;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h3 id="加载文章列表数据"><a href="#加载文章列表数据" class="headerlink" title="加载文章列表数据"></a>加载文章列表数据</h3><p>实现思路：</p>
<ul>
<li>找到数据接口</li>
<li>封装请求方法</li>
<li>请求获取数据</li>
<li>模板绑定</li>
</ul>
<p>1、创建 <code>src/api/article.js</code> 封装获取文章列表数据的接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章接口模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取频道的文章列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getArticles = <span class="function"><span class="params">params</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_1/articles'</span>,</span><br><span class="line">    params</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>注意：使用接口文档中最下面的 <strong>频道新闻推荐_V1.1</strong></p>
</blockquote>
<p>2、然后在首页文章列表组件 <code>onload</code> 的时候请求加载文章列表</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-list"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        loading 控制上拉加载更多的 loading 状态</span></span><br><span class="line"><span class="comment">        finished 控制数据是否加载结束</span></span><br><span class="line"><span class="comment">        load 事件：当触发上拉加载更多的时候会触发调用 load 事件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        List 初始化后会触发一次 load 事件，用于加载第一屏的数据</span></span><br><span class="line"><span class="comment">        如果一次请求加载的数据条数较少，导致列表内容无法铺满当前屏幕，List 会继续触发 load 事件，直到内容铺满屏幕或数据全部加载完成</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-list</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:finished</span>=<span class="string">"finished"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">finished-text</span>=<span class="string">"没有更多了"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:error.sync</span>=<span class="string">"error"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">error-text</span>=<span class="string">"请求失败，点击重新加载"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">load</span>=<span class="string">"onLoad"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-cell</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">"(article, index) in list"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:title</span>=<span class="string">"article.title"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> { getArticles } <span class="keyword">from</span> <span class="string">'@/api/article'</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'ArticleList'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="attr">channel</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">list</span>: [], <span class="comment">// 文章列表数据</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">loading</span>: <span class="literal">false</span>, <span class="comment">// 上拉加载更多的 loading 状态</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">finished</span>: <span class="literal">false</span>, <span class="comment">// 是否加载结束</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">error</span>: <span class="literal">false</span>, <span class="comment">// 是否加载失败</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">timestamp</span>: <span class="literal">null</span> <span class="comment">// 请求下一页数据的时间戳</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 当触发上拉加载更多的时候调用该函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> onLoad () {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">try</span> {</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 请求获取数据</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> { data } = <span class="keyword">await</span> getArticles({</span></span><br><span class="line"><span class="javascript">          <span class="attr">channel_id</span>: <span class="built_in">this</span>.channel.id, <span class="comment">// 频道 id</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">timestamp</span>: <span class="built_in">this</span>.timestamp || <span class="built_in">Date</span>.now(), <span class="comment">// 时间戳，请求新的推荐数据传当前的时间戳，请求历史推荐传指定的时间戳</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">with_top</span>: <span class="number">1</span> <span class="comment">// 是否包含置顶，进入页面第一次请求时要包含置顶文章，1-包含置顶，0-不包含</span></span></span><br><span class="line"><span class="javascript">        })</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 把数据添加到 list 数组中</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> { results } = data.data</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.list.push(...results)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3. 设置本次加载中 loading 状态结束</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.loading = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 4. 判断数据是否加载结束</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (results.length) {</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 更新获取下一页数据的时间戳</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.timestamp = data.data.pre_timestamp</span></span><br><span class="line"><span class="javascript">        } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 没有数据了，设置加载状态结束，不再触发上拉加载更多了</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.finished = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">      } <span class="keyword">catch</span> (err) {</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(err)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.loading = <span class="literal">false</span> <span class="comment">// 关闭 loading 效果</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.error = <span class="literal">true</span> <span class="comment">// 开启错误提示</span></span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>最后测试。</p>
<h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/展示文章列表-下拉刷新.gif" alt="展示文章列表-下拉刷新" width="250">

<p>这里主要使用到 Vant 中的 <a href="https://youzan.github.io/vant/#/zh-CN/pull-refresh">PullRefresh 下拉刷新</a> 组件。</p>
<p>思路：</p>
<ul>
<li>注册下拉刷新事件（组件）的处理函数</li>
<li>发送请求获取文章列表数据</li>
<li>把获取到的数据添加到当前频道的文章列表的顶部</li>
<li>提示用户刷新成功！</li>
</ul>
<p>下拉刷新时会触发组件的 <code>refresh</code> 事件，在事件的回调函数中可以进行同步或异步操作，操作完成后将 <code>v-model</code> 设置为 <code>false</code>，表示加载完成。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 当触发下拉刷新的时候调用该函数</span></span><br><span class="line"><span class="keyword">async</span> onRefresh () {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 1. 请求获取数据</span></span><br><span class="line">    <span class="keyword">const</span> { data } = <span class="keyword">await</span> getArticles({</span><br><span class="line">      <span class="attr">channel_id</span>: <span class="built_in">this</span>.channel.id, <span class="comment">// 频道 id</span></span><br><span class="line">      <span class="attr">timestamp</span>: <span class="built_in">Date</span>.now(), <span class="comment">// 下拉刷新每次都应该获取最新数据</span></span><br><span class="line">      <span class="attr">with_top</span>: <span class="number">1</span> <span class="comment">// 是否包含置顶，进入页面第一次请求时要包含置顶文章，1-包含置顶，0-不包含</span></span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 将数据追加到列表的顶部</span></span><br><span class="line">    <span class="keyword">const</span> { results } = data.data</span><br><span class="line">    <span class="built_in">this</span>.list.unshift(...results)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 关闭下拉刷新的 loading 状态</span></span><br><span class="line">    <span class="built_in">this</span>.isRefreshLoading = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提示成功</span></span><br><span class="line">    <span class="built_in">this</span>.refreshSuccessText = <span class="string">`刷新成功，更新了<span class="subst">${results.length}</span>条数据`</span></span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">this</span>.isRefreshLoading = <span class="literal">false</span> <span class="comment">// 关闭下拉刷新的 loading 状态</span></span><br><span class="line">    <span class="built_in">this</span>.$toast(<span class="string">'刷新失败'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h2 id="文章列表项"><a href="#文章列表项" class="headerlink" title="文章列表项"></a>文章列表项</h2><h3 id="准备组件"><a href="#准备组件" class="headerlink" title="准备组件"></a>准备组件</h3><p>在我们项目中有好几个页面中都有这个文章列表项内容，如果我们在每个页面中都写一次的话不仅效率低而且维护起来也麻烦。所以最好的办法就是我们把它封装为一个组件，然后在需要使用的组件中加载使用即可。</p>
<p>1、创建 <code>src/components/article-item/index.vue</code> 组件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-item"</span>&gt;</span>文章列表项<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'ArticleItem'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="attr">article</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p>2、在文章列表组件中注册使用文章列表项组件</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200404224728524.png" alt="image-20200404224728524" style="zoom:50%;">

<h3 id="展示列表项内容"><a href="#展示列表项内容" class="headerlink" title="展示列表项内容"></a>展示列表项内容</h3><ul>
<li>使用 Cell 单元格组件</li>
<li>展示标题</li>
<li>展示底部信息</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"article-item"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>{{ article.title }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"article.cover.type === 3"</span> <span class="attr">class</span>=<span class="string">"cover-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"cover-item"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">"(img, index) in article.cover.images"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">            <span class="attr">width</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">height</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:src</span>=<span class="string">"img"</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ article.aut_name }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ article.comm_count }}评论<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ article.pubdate }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">"article.cover.type === 1"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">slot</span>=<span class="string">"default"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">width</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">height</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:src</span>=<span class="string">"article.cover.images[0]"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'ArticleItem'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="attr">article</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="样式调整-1"><a href="#样式调整-1" class="headerlink" title="样式调整"></a>样式调整</h3><ul>
<li>文章标题<ul>
<li>字号</li>
<li>颜色</li>
<li>多行文字省略</li>
</ul>
</li>
<li>单图封面<ul>
<li>封面容器<ul>
<li>去除 flex: 1，固定宽高</li>
<li>左内边距</li>
</ul>
</li>
<li>封面图<ul>
<li>宽高</li>
<li>填充模式：cover</li>
</ul>
</li>
</ul>
</li>
<li>底部文本信息<ul>
<li>字号</li>
<li>颜色</li>
<li>间距</li>
</ul>
</li>
<li>多图封面<ul>
<li>外层容器<ul>
<li>flex 容器</li>
<li>上下外边距</li>
</ul>
</li>
<li>图片容器<ul>
<li>平均分配容器空间：flex: 1;</li>
<li>固定高度</li>
<li>容器项间距</li>
</ul>
</li>
<li>图片<ul>
<li>宽高</li>
<li>填充模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>以下代码仅供参考。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"article-item"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"title van-multi-ellipsis--l2"</span>&gt;</span>{{ article.title }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"article.cover.type === 3"</span> <span class="attr">class</span>=<span class="string">"cover-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"cover-item"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">"(img, index) in article.cover.images"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"cover-item-img"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">fit</span>=<span class="string">"cover"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:src</span>=<span class="string">"img"</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"label-info-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ article.aut_name }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ article.comm_count }}评论<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ article.pubdate }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">"article.cover.type === 1"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">slot</span>=<span class="string">"default"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"right-cover"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fit</span>=<span class="string">"cover"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:src</span>=<span class="string">"article.cover.images[0]"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'ArticleItem'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="attr">article</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.article-item</span> {</span></span><br><span class="line"><span class="css">  <span class="selector-class">.title</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#3a3a3a</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.van-cell__value</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">flex</span>: unset;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">232px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">146px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding-left</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.right-cover</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">232px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">146px</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.label-info-wrap</span> <span class="selector-tag">span</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#b4b4b4</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-right</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.cover-wrap</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.cover-item</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">146px</span>;</span></span><br><span class="line"><span class="css">      &amp;<span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>) {</span></span><br><span class="line"><span class="css">        <span class="attribute">padding-right</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">      <span class="selector-class">.cover-item-img</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">146px</span>;</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h3 id="关于第三方图片资源403问题"><a href="#关于第三方图片资源403问题" class="headerlink" title="关于第三方图片资源403问题"></a>关于第三方图片资源403问题</h3><p>为什么文章列表数据中的好多图片资源请求失败返回 403？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">这是因为我们项目的接口数据是后端通过爬虫抓取的第三方平台内容，而第三方平台对图片资源做了防盗链保护处理。</span><br></pre></td></tr></tbody></table></figure>



<p>第三方平台怎么处理图片资源保护的？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">服务端一般使用 Referer 请求头识别访问来源，然后处理资源访问。</span><br></pre></td></tr></tbody></table></figure>

<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200405134347749.png" alt="image-20200405134347749">



<p>Referer 是什么东西？</p>
<blockquote>
<p>扩展参考：<a href="http://www.ruanyifeng.com/blog/2019/06/http-referer.html">http://www.ruanyifeng.com/blog/2019/06/http-referer.html</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Referer 是 HTTP 请求头的一部分，当浏览器向 Web 服务器发送请求的时候，一般会带上 Referer，它包含了当前请求资源的来源页面的地址。服务端一般使用 Referer 请求头识别访问来源，可能会以此进行统计分析、日志记录以及缓存优化等。</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>需要注意的是 referer 实际上是 “referrer” 误拼写。参见 <a href="https://zh.wikipedia.org/wiki/HTTP_referer">HTTP referer on Wikipedia</a> （HTTP referer 在维基百科上的条目）来获取更详细的信息。</p>
</blockquote>
<p>怎么解决？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">不要发送 referrer ，对方服务端就不知道你从哪来的了，姑且认为是你是自己人吧。</span><br></pre></td></tr></tbody></table></figure>



<p>如何设置不发送 referrer？</p>
<p>用 <code>&lt;a&gt;</code>、<code>&lt;area&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;script&gt;</code> 或者 <code>&lt;link&gt;</code> 元素上的 <code>referrerpolicy</code> 属性为其设置独立的请求策略，例如：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://……"</span> <span class="attr">referrerPolicy</span>=<span class="string">"no-referrer"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>或者直接在 HTMl 页面头中通过 meta 属性全局配置：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"no-referrer"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="处理相对时间"><a href="#处理相对时间" class="headerlink" title="处理相对时间"></a>处理相对时间</h3><p>推荐两个第三方库：</p>
<ul>
<li><a href="https://momentjs.com/">Moment.js</a></li>
<li><a href="https://day.js.org/">Day.js</a></li>
</ul>
<p>两者都是专门用于处理时间的 JavaScript 库，功能差不多，因为 Day.js 的设计就是参考的 Moment.js。但是 Day.js 相比 Moment.js 的包体积要更小一些，因为它采用了插件化的处理方式。</p>
<p><a href="https://day.js.org/zh-CN/">Day.js</a> 是一个轻量的处理时间和日期的 JavaScript 库，和 <a href="https://momentjs.com/">Moment.js</a> 的 API 设计保持完全一样，如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js 。</p>
<ul>
<li><p>Day.js 可以运行在浏览器和 Node.js 中。</p>
</li>
<li><p>🕒 和 Moment.js 相同的 API 和用法</p>
</li>
<li><p>💪 不可变数据 (Immutable)</p>
</li>
<li><p>🔥 支持链式操作 (Chainable)</p>
</li>
<li><p>🌐 国际化 I18n</p>
</li>
<li><p>📦 仅 2kb 大小的微型库</p>
</li>
<li><p>👫 全浏览器兼容</p>
</li>
</ul>
<p>1、安装</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">npm i dayjs</span><br></pre></td></tr></tbody></table></figure>

<p>2、创建 <code>utils/dayjs.js</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">'dayjs'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载中文语言包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'dayjs/locale/zh-cn'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> relativeTime <span class="keyword">from</span> <span class="string">'dayjs/plugin/relativeTime'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置使用处理相对时间的插件</span></span><br><span class="line">dayjs.extend(relativeTime)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置使用中文语言包</span></span><br><span class="line">dayjs.locale(<span class="string">'zh-cn'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局过滤器：处理相对时间</span></span><br><span class="line">Vue.filter(<span class="string">'relativeTime'</span>, <span class="function"><span class="params">value</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> dayjs().to(dayjs(value))</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>3、在 <code>main.js</code> 中加载初始化</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./utils/dayjs'</span></span><br></pre></td></tr></tbody></table></figure>

<p>4、使用</p>
<p>使用过滤器：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ 日期数据 | relativeTime }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="五、首页—频道编辑"><a href="#五、首页—频道编辑" class="headerlink" title="五、首页—频道编辑"></a>五、首页—频道编辑</h1><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1566541118035.png" width="300">





<h2 id="处理页面弹出层"><a href="#处理页面弹出层" class="headerlink" title="处理页面弹出层"></a>处理页面弹出层</h2><p>Vant 中内置了 <a href="https://youzan.github.io/vant/#/zh-CN/popup">Popup 弹出层</a> 组件。</p>
<p>1、在 <code>data</code>中添加一个数据用来控制弹层的显示和隐藏</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">isChannelEditShow</span>: <span class="literal">true</span> <span class="comment">// 这里我们先设置为 true 就能看到弹窗的页面了</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、然后在首页模板中的频道列表后面添加弹出层组件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 频道编辑 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-popup</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"edit-channel-popup"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"isEditChannelShow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">position</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:style</span>=<span class="string">"{ height: '100%' }"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">closeable</span></span></span><br><span class="line"><span class="tag">  <span class="attr">close-icon-position</span>=<span class="string">"top-left"</span></span></span><br><span class="line"><span class="tag">&gt;</span>内容<span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /频道编辑 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.edit-channel-popup</span> {</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>测试查看结果。</p>
<h2 id="创建频道编辑组件"><a href="#创建频道编辑组件" class="headerlink" title="创建频道编辑组件"></a>创建频道编辑组件</h2><p>1、创建 <code>views/home/components/channel-edit.vue</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"channel-edit"</span>&gt;</span>频道编辑<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'ChannelEdit'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>2、在首页中加载注册</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ChannelEdit <span class="keyword">from</span> <span class="string">'./components/channel-edit'</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">components</span>: {</span><br><span class="line">    ...</span><br><span class="line">    ChannelEdit</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<p>3、在弹出层中使用频道编辑组件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 频道编辑 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-popup</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"isChannelEditShow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">position</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">closeable</span></span></span><br><span class="line"><span class="tag">  <span class="attr">close-icon-position</span>=<span class="string">"top-left"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:style</span>=<span class="string">"{ height: '100%' }"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">+  <span class="tag">&lt;<span class="name">channel-edit</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /频道编辑 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>



<h2 id="页面布局-2"><a href="#页面布局-2" class="headerlink" title="页面布局"></a>页面布局</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"channel-edit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"我的频道"</span> <span class="attr">:border</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">"mini"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">round</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"danger"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">plain</span></span></span><br><span class="line"><span class="tag">      &gt;</span>编辑<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-grid</span> <span class="attr">:gutter</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-grid-item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"channel-item"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"value in 8"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">"value"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">text</span>=<span class="string">"文字"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"频道推荐"</span> <span class="attr">:border</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-grid</span> <span class="attr">:gutter</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-grid-item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"channel-item"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"value in 8"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">"value"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">text</span>=<span class="string">"文字"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-grid</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'ChannelEdit'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.channel-edit</span> {</span></span><br><span class="line"><span class="css">  <span class="selector-class">.channel-item</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">86px</span>;</span></span><br><span class="line"><span class="css">    /deep/ <span class="selector-class">.van-grid-item__content</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: <span class="number">#f5f5f6</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.van-grid-item__text</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#222</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h2 id="展示我的频道"><a href="#展示我的频道" class="headerlink" title="展示我的频道"></a>展示我的频道</h2><p>1、在父组件中把 <code>channels</code> 传递给频道编辑组件</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316002816033.png" alt="image-20200316002816033" style="zoom:50%;">



<p>2、在频道编辑组件中声明接收父组件的 <code>userChannels</code> 频道列表数据并遍历展示</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316002911027.png" alt="image-20200316002911027" style="zoom:50%;">

<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316002958971.png" alt="image-20200316002958971" style="zoom:50%;">

<h2 id="展示推荐频道列表"><a href="#展示推荐频道列表" class="headerlink" title="展示推荐频道列表"></a>展示推荐频道列表</h2><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1571040968593.png" alt="1571040968593" style="zoom:50%;">

<p>没有用来获取推荐频道的数据接口，但是我们有获取所有频道列表的数据接口。</p>
<p>所以：<code>所有频道列表 - 我的频道 = 剩余推荐的频道</code>。</p>
<p>实现过程所以一共分为两大步：</p>
<ul>
<li>获取所有频道</li>
<li>基于所有频道和我的频道计算获取剩余的推荐频道</li>
</ul>
<h3 id="获取所有频道"><a href="#获取所有频道" class="headerlink" title="获取所有频道"></a>获取所有频道</h3><p>1、封装数据接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有频道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getAllChannels = <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/channels'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、在编辑频道组件中请求获取所有频道数据</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316021948407.png" alt="image-20200316021948407" style="zoom:50%;">

<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316022017473.png" alt="image-20200316022017473" style="zoom:50%;">

<p>3、在调试工具中测试是否有拿到数据</p>
<h3 id="处理展示推荐频道"><a href="#处理展示推荐频道" class="headerlink" title="处理展示推荐频道"></a>处理展示推荐频道</h3><p>思路：<code>所有频道 - 用户频道 = 推荐频道</code></p>
<p>1、封装计算属性筛选数据</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316022123370.png" alt="image-20200316022123370" style="zoom:50%;">

<ul>
<li>遍历所有频道</li>
<li>对每一个频道都判断：该频道是否属于我的频道</li>
<li>如果不属于我的频道，则收集起来</li>
<li>直到遍历结束，剩下来就是那些剩余的推荐频道</li>
</ul>
<p>2、模板绑定</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316022153646.png" alt="image-20200316022153646" style="zoom:50%;">



<h2 id="添加频道"><a href="#添加频道" class="headerlink" title="添加频道"></a>添加频道</h2><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/频道管理-添加频道.gif" alt="频道管理-添加频道" width="250">

<p>思路：</p>
<ul>
<li>给推荐频道列表中每一项注册点击事件</li>
<li>获取点击的频道项</li>
<li>将频道项添加到我的频道中</li>
<li><del>将当前点击的频道项从推荐频道中移除</del><ul>
<li>不需要删除，因为我们获取数据使用的是计算属性，当我频道发生改变，计算属性重新求值了</li>
</ul>
</li>
</ul>
<p>1、给推荐频道中的频道注册点击事件</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316030501261.png" alt="image-20200316030501261" style="zoom:50%;">

<p>2、在添加频道事件处理函数中</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316030518012.png" alt="image-20200316030518012" style="zoom:50%;">

<p>然后你会神奇的发现点击的那个推荐频道跑到我的频道中了，我们并没有去手动的删除点击的这个推荐频道，但是它没了！主要是因为推荐频道是通过一个计算属性获取的，计算属性中使用了 channels（我的频道）数据，所以只要我的频道中的数据发生变化，那么计算属性就会重新运算获取最新的数据。</p>
<h2 id="编辑频道"><a href="#编辑频道" class="headerlink" title="编辑频道"></a>编辑频道</h2><p>思路：</p>
<ul>
<li>给我的频道中的频道项注册点击事件</li>
<li>在事件处理函数中<ul>
<li>如果是编辑状态，则执行删除频道操作</li>
<li>如果是非编辑状态，则执行切换频道操作</li>
</ul>
</li>
</ul>
<h3 id="处理编辑状态"><a href="#处理编辑状态" class="headerlink" title="处理编辑状态"></a>处理编辑状态</h3><p>1、在 data 中添加数据用来控制编辑状态的显示</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316033317098.png" alt="image-20200316033317098" style="zoom:50%;">

<p>2、在我的频道项中添加删除图标</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316033121847.png" alt="image-20200316033121847" style="zoom:50%;">

<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316033200148.png" alt="image-20200316033200148" style="zoom:50%;">

<p>3、处理点击编辑按钮</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316033239687.png" alt="image-20200316033239687" style="zoom:50%;">





<h3 id="切换频道"><a href="#切换频道" class="headerlink" title="切换频道"></a>切换频道</h3><p>功能需求：在非编辑器状态下切换频道。</p>
<p>1、给我的频道项注册点击事件</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316040309812.png" alt="image-20200316040309812" style="zoom:50%;">

<p>2、处理函数</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316040344551.png" alt="image-20200316040344551" style="zoom:50%;">

<p>3、在父组件中监听处理自定义事件</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316040428331.png" alt="image-20200316040428331" style="zoom:50%;">

<h3 id="让激活频道高亮"><a href="#让激活频道高亮" class="headerlink" title="让激活频道高亮"></a>让激活频道高亮</h3><p>思路：</p>
<ul>
<li>将首页中的激活的标签索引传递给频道编辑组件</li>
<li>在频道编辑组件中遍历我的频道列表的时候判断遍历项的索引是否等于激活的频道标签索引，如果一样则作用一个高亮的 CSS 类名</li>
</ul>
<p>1、将首页组件中的 <code>active</code> 传递到频道编辑组件中</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316004637299.png" alt="image-20200316004637299" style="zoom:50%;">

<p>2、在频道编辑组件中声明 props 接收</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316004657340.png" alt="image-20200316004657340" style="zoom:50%;">

<p>3、判断遍历项，如果 <code>遍历项索引 === active</code>，则给这个频道项设置高亮样式</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316004830847.png" alt="image-20200316004830847" style="zoom:50%;">

<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316004847629.png" alt="image-20200316004847629" style="zoom:50%;">

<h3 id="删除频道"><a href="#删除频道" class="headerlink" title="删除频道"></a>删除频道</h3><p>功能需求：在编辑状态下删除频道。</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316042008623.png" alt="image-20200316042008623" style="zoom:50%;">

<h2 id="频道数据持久化"><a href="#频道数据持久化" class="headerlink" title="频道数据持久化"></a>频道数据持久化</h2><h3 id="业务分析"><a href="#业务分析" class="headerlink" title="业务分析"></a>业务分析</h3><p>频道编辑这个功能，无论用户是否登录用户都可以使用。</p>
<p>不登录也能使用</p>
<ul>
<li>数据存储在本地</li>
<li>不支持同步功能</li>
</ul>
<p>登录也能使用</p>
<ul>
<li>数据存储在线上后台服务器</li>
<li>更换不同的设备可以同步数据</li>
</ul>
<h3 id="添加频道-1"><a href="#添加频道-1" class="headerlink" title="添加频道"></a>添加频道</h3><p>思路：</p>
<ul>
<li>如果未登录，则存储到本地</li>
<li>如果已登录，则存储到线上<ul>
<li>找到数据接口</li>
<li>封装请求方法</li>
<li>请求调用</li>
</ul>
</li>
</ul>
<p>1、封装添加频道的请求方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户频道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addUserChannel = <span class="function"><span class="params">channels</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'PATCH'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/user/channels'</span>,</span><br><span class="line">    <span class="attr">data</span>: {</span><br><span class="line">      channels</span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、修改添加频道的处理逻辑</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onAddChannel (channel) {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="built_in">this</span>.userChannels.push(channel)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.user) {</span><br><span class="line">      <span class="comment">// 已登录，数据存储到线上</span></span><br><span class="line">      <span class="keyword">await</span> addUserChannel([{</span><br><span class="line">        <span class="attr">id</span>: channel.id, <span class="comment">// 频道 id</span></span><br><span class="line">        <span class="attr">seq</span>: <span class="built_in">this</span>.userChannels.length <span class="comment">// 频道的 序号</span></span><br><span class="line">      }])</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// 未登录，数据存储到本地</span></span><br><span class="line">      setItem(<span class="string">'channels'</span>, <span class="built_in">this</span>.userChannels)</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">this</span>.$toast(<span class="string">'添加频道失败'</span>)</span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>



<h3 id="删除频道-1"><a href="#删除频道-1" class="headerlink" title="删除频道"></a>删除频道</h3><p>思路：</p>
<ul>
<li>如果未登录，则存储到本地</li>
<li>如果已登录，则存储到线上<ul>
<li>找到数据接口</li>
<li>封装请求方法</li>
<li>请求调用</li>
</ul>
</li>
</ul>
<p>1、封装删除用户频道请求方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除用户频道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteUserChannel = <span class="function"><span class="params">channelId</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'DELETE'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/app/v1_0/user/channels/<span class="subst">${channelId}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、修改删除频道的处理逻辑</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200316051028617.png" alt="image-20200316051028617" style="zoom:50%;">

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> deleteChannel (channel) {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.user) {</span><br><span class="line">      <span class="comment">// 已登录，将数据存储到线上</span></span><br><span class="line">      <span class="keyword">await</span> deleteUserChannel(channel.id)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// 未登录，将数据存储到本地</span></span><br><span class="line">      setItem(<span class="string">'channles'</span>, <span class="built_in">this</span>.userChannels)</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">this</span>.$toast(<span class="string">'删除频道失败，请稍后重试'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h2 id="正确的获取首页频道列表数据"><a href="#正确的获取首页频道列表数据" class="headerlink" title="正确的获取首页频道列表数据"></a>正确的获取首页频道列表数据</h2><p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/%E9%A6%96%E9%A1%B5-%E8%8E%B7%E5%8F%96%E9%A2%91%E9%81%93%E5%88%97%E8%A1%A8.png" alt="首页-获取频道列表"></p>
<blockquote>
<p>提示：获取登录用户的频道列表和获取默认推荐的频道列表是同一个数据接口。后端会根据接口中的 token 来判定返回数据。</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> loadChannels () {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">let</span> channels = []</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.user) {</span><br><span class="line">      <span class="comment">// 已登录，请求获取线上的频道数据</span></span><br><span class="line">      <span class="keyword">const</span> { data } = <span class="keyword">await</span> getChannels()</span><br><span class="line">      channels = data.data.channels</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// 未登录</span></span><br><span class="line">      <span class="keyword">const</span> localChannels = getItem(<span class="string">'channels'</span>)</span><br><span class="line">      <span class="keyword">if</span> (localChannels) {</span><br><span class="line">        <span class="comment">// 有本地频道数据，则使用</span></span><br><span class="line">        channels = localChannels</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// 没有本地频道数据，则请求获取默认推荐的频道列表</span></span><br><span class="line">        <span class="keyword">const</span> { data } = <span class="keyword">await</span> getChannels()</span><br><span class="line">        channels = data.data.channels</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据更新到组件中</span></span><br><span class="line">    <span class="built_in">this</span>.channels = channels</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">this</span>.$toast(<span class="string">'数据获取失败'</span>)</span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>
<h1 id="六、文章搜索"><a href="#六、文章搜索" class="headerlink" title="六、文章搜索"></a>六、文章搜索</h1><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1566431801892.png" width="250">



<h2 id="创建组件并配置路由-1"><a href="#创建组件并配置路由-1" class="headerlink" title="创建组件并配置路由"></a>创建组件并配置路由</h2><p>1、创建 <code>src/views/search/index.vue</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-container"</span>&gt;</span>搜索页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">"SearchPage"</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> {};</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">    <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">    <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> {},</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">  };</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>2、然后把搜索页面的路由配置到根组件路由（一级路由）</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">path</span>: <span class="string">'/search'</span>,</span><br><span class="line">  <span class="attr">omponent</span>: Search</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>最后访问 <code>/search</code> 测试。</p>
<h2 id="页面布局-3"><a href="#页面布局-3" class="headerlink" title="页面布局"></a>页面布局</h2><p>1、创建 <code>src/views/search/components/search-history.vue</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-history"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"搜索历史"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>全部删除<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>完成<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">name</span>=<span class="string">"delete"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">name</span>=<span class="string">"close"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">name</span>=<span class="string">"close"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">name</span>=<span class="string">"close"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">name</span>=<span class="string">"close"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'SearchHistory'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>2、创建 <code>src/views/search/components/search-suggestion.vue</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-suggestion"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"程序员..."</span> <span class="attr">icon</span>=<span class="string">"search"</span>&gt;</span><span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"程序员..."</span> <span class="attr">icon</span>=<span class="string">"search"</span>&gt;</span><span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"程序员..."</span> <span class="attr">icon</span>=<span class="string">"search"</span>&gt;</span><span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"程序员..."</span> <span class="attr">icon</span>=<span class="string">"search"</span>&gt;</span><span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"程序员..."</span> <span class="attr">icon</span>=<span class="string">"search"</span>&gt;</span><span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'SearchSuggestion'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p>3、创建 <code>src/views/search/components/search-result.vue</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-result"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-list</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:finished</span>=<span class="string">"finished"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">finished-text</span>=<span class="string">"没有更多了"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">load</span>=<span class="string">"onLoad"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item"</span> <span class="attr">:title</span>=<span class="string">"item"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'SearchResult'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">list</span>: [],</span></span><br><span class="line"><span class="javascript">      <span class="attr">loading</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">finished</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">    onLoad () {</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 异步更新数据</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// setTimeout 仅做示例，真实场景中一般为 ajax 请求</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list.push(<span class="built_in">this</span>.list.length + <span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 加载状态结束</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.loading = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 数据全部加载完成</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.list.length &gt;= <span class="number">40</span>) {</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.finished = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">      }, <span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p>4、搜索组件内容如下：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 搜索栏 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      Tips: 在 van-search 外层增加 form 标签，且 action 不为空，即可在 iOS 输入法中显示搜索按钮</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-search</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">show-action</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">"请输入搜索关键词"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">background</span>=<span class="string">"#3296fa"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">search</span>=<span class="string">"onSearch"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">cancel</span>=<span class="string">"onCancel"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /搜索栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 搜索历史记录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">search-history</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /搜索历史记录 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 联想建议 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">search-suggestion</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /联想建议 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 历史记录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">search-result</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /历史记录 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> SearchHistory <span class="keyword">from</span> <span class="string">'./components/search-history'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> SearchSuggestion <span class="keyword">from</span> <span class="string">'./components/search-suggestion'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> SearchResult <span class="keyword">from</span> <span class="string">'./components/search-result'</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'SearchIndex'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {</span></span><br><span class="line"><span class="javascript">    SearchHistory,</span></span><br><span class="line"><span class="javascript">    SearchSuggestion,</span></span><br><span class="line"><span class="javascript">    SearchResult</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">searchText</span>: <span class="string">''</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">    onSearch (val) {</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(val)</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript">    onCancel () {</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$router.back()</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.search-container</span> {</span></span><br><span class="line"><span class="css">  <span class="selector-class">.van-search__action</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h2 id="处理页面显示状态"><a href="#处理页面显示状态" class="headerlink" title="处理页面显示状态"></a>处理页面显示状态</h2><p>1、在 <code>data</code> 中添加数据用来控制搜索结果的显示状态</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">isResultShow</span>: <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、在模板中绑定条件渲染</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">search-result</span> <span class="attr">v-if</span>=<span class="string">"isResultShow"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /搜索结果 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 联想建议 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">search-suggestion</span> <span class="attr">v-else-if</span>=<span class="string">"searchText"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /联想建议 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 搜索历史记录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">search-history</span> <span class="attr">v-else</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /搜索历史记录 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>



<h2 id="搜索联想建议"><a href="#搜索联想建议" class="headerlink" title="搜索联想建议"></a>搜索联想建议</h2><p>基本思路：</p>
<ul>
<li>当搜索框输入内容的时候，请求加载联想建议的数据</li>
<li>将请求得到的结果绑定到模板中</li>
</ul>
<h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><p>一、将父组件中搜索框输入的内容传给联想建议子组件</p>
<p>二、在子组件中监视搜索框输入内容的变化，如果变化则请求获取联想建议数据</p>
<p>三、将获取到的联想建议数据展示到列表中</p>
<h3 id="防抖优化"><a href="#防抖优化" class="headerlink" title="防抖优化"></a>防抖优化</h3><p>1、安装 lodash</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># yarn add lodash</span></span><br><span class="line">npm i lodash</span><br></pre></td></tr></tbody></table></figure>

<p>2、防抖处理</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// lodash 支持按需加载，有利于打包结果优化</span></span><br><span class="line"><span class="keyword">import</span> { debounce } <span class="keyword">from</span> <span class="string">"lodash"</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>不建议下面这样使用，因为这样会加载整个模块。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line">_.debounce()</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// debounce 函数</span></span><br><span class="line"><span class="comment">// 参数1：函数</span></span><br><span class="line"><span class="comment">// 参数2：防抖时间</span></span><br><span class="line"><span class="comment">// 返回值：防抖之后的函数，和参数1功能是一样的</span></span><br><span class="line"><span class="attr">onSearchInput</span>: debounce(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> searchContent = <span class="built_in">this</span>.searchContent</span><br><span class="line">  <span class="keyword">if</span> (!searchContent) {</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 请求获取数据</span></span><br><span class="line">  <span class="keyword">const</span> { data } = <span class="keyword">await</span> getSuggestions(searchContent)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 将数据添加到组件实例中</span></span><br><span class="line">  <span class="built_in">this</span>.suggestions = data.data.options</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 模板绑定</span></span><br><span class="line">}, <span class="number">200</span>),</span><br></pre></td></tr></tbody></table></figure>





<h3 id="搜索关键字高亮"><a href="#搜索关键字高亮" class="headerlink" title="搜索关键字高亮"></a>搜索关键字高亮</h3><p>如何将字符串中的指定字符在<strong>网页</strong>中高亮展示？</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"Hello World"</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>将需要高亮的字符包裹 HTML 标签，为其单独设置颜色。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"Hello &lt;span style="</span>color: red<span class="string">"&gt;World&lt;/span&gt;"</span></span><br></pre></td></tr></tbody></table></figure>

<p>在 Vue 中如何渲染带有 HTML 标签的字符串？</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">htmlStr</span>: <span class="string">'Hello &lt;span style="color: red"&gt;World&lt;/span&gt;'</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ htmlStr }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"htmlStr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200112154732044.png" alt="image-20200112154732044"></p>
<p>如何把字符串中指定字符统一替换为高亮（包裹了 HTML）的字符？</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：&lt;span style="color: red"&gt;Hello&lt;/span&gt; World</span></span><br><span class="line"><span class="string">"Hello World"</span>.replace(<span class="string">'Hello'</span>, <span class="string">'&lt;span style="color: red"&gt;Hello&lt;/span&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要注意的是，replace 方法的字符串匹配只能替换第1个满足的字符</span></span><br><span class="line"><span class="comment">// &lt;span style="color: red"&gt;Hello&lt;/span&gt; World Hello abc</span></span><br><span class="line"><span class="string">"Hello World Hello abc"</span>.replace(<span class="string">'Hello'</span>, <span class="string">'&lt;span style="color: red"&gt;Hello&lt;/span&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想要全文替换，使用正则表达式</span></span><br><span class="line"><span class="comment">// g 全局</span></span><br><span class="line"><span class="comment">// i 忽略大小写</span></span><br><span class="line"><span class="comment">// &lt;span style="color: red"&gt;Hello&lt;/span&gt; World &lt;span style="color: red"&gt;Hello&lt;/span&gt; abc</span></span><br><span class="line"><span class="string">"Hello World Hello abc"</span>.replace(<span class="regexp">/Hello/gi</span>, <span class="string">'&lt;span style="color: red"&gt;Hello&lt;/span&gt;'</span>)</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>一个小扩展：使用字符串的 split 结合数组的 join 方法实现高亮</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello world 你好 hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ["", " world 你好 ", ""]</span></span><br><span class="line"><span class="keyword">const</span> arr = str.split(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// "&lt;span&gt;hello&lt;/span&gt; world 你好 &lt;span&gt;hello&lt;/span&gt;"</span></span><br><span class="line">arr.join(<span class="string">"&lt;span&gt;hello&lt;/span&gt;"</span>);</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<p>下面是具体的处理。</p>
<p>1、在 methods 中添加一个方法处理高亮</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 参数 source: 原始字符串</span></span><br><span class="line"><span class="comment">// 参数 keyword: 需要高亮的关键词</span></span><br><span class="line"><span class="comment">// 返回值：替换之后的高亮字符串</span></span><br><span class="line">highlight (source, keyword) {</span><br><span class="line">  <span class="comment">// /searchContent/ 正则表达式中的一切内容都会当做字符串使用</span></span><br><span class="line">  <span class="comment">// 这里可以 new RegExp 方式根据字符串创建一个正则表达式</span></span><br><span class="line">  <span class="comment">// RegExp 是原生 JavaScript 的内置构造函数</span></span><br><span class="line">  <span class="comment">// 参数1：字符串，注意，这里不要加 //</span></span><br><span class="line">  <span class="comment">// 参数2：匹配模式，g 全局，i 忽略大小写</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, <span class="string">'gi'</span>)</span><br><span class="line">  <span class="keyword">return</span> source.replace(reg, <span class="string">`&lt;span style="color: #3296fa"&gt;<span class="subst">${keyword}</span>&lt;/span&gt;`</span>)</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<p>2、然后在联想建议列表项中绑定调用</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 联想建议 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-cell-group</span> <span class="attr">v-else-if</span>=<span class="string">"searchContent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"search"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"(item, index) in suggestions"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"onSearch(item)"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">v-html</span>=<span class="string">"highlight(item, searchContent)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /联想建议 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="搜索结果"><a href="#搜索结果" class="headerlink" title="搜索结果"></a>搜索结果</h2><p>思路：</p>
<ul>
<li>找到数据接口</li>
<li>请求获取数据</li>
<li>将数据展示到模板中</li>
</ul>
<p>一、获取搜索关键字</p>
<p>1、声明接收父组件中的搜索框输入的内容</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">props: {</span><br><span class="line">  <span class="attr">q</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">require</span>: <span class="literal">true</span></span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>



<p>2、在父组件给子组件传递数据</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">search-result</span> <span class="attr">v-if</span>=<span class="string">"isResultShow"</span> <span class="attr">:q</span>=<span class="string">"searchText"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /搜索结果 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>



<p>最后在调试工具中查看确认是否接收到 props 数据。</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200112162223915.png" alt="image-20200112162223915"></p>
<p>二、请求获取数据</p>
<p>1、在 <code>api/serach.js</code> 添加封装获取搜索结果的请求方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取搜索结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSearch</span>(<span class="params">params</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">"GET"</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">"/app/v1_0/search"</span>,</span><br><span class="line">    params</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、请求获取</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">+ <span class="keyword">import</span> { getSearch } <span class="keyword">from</span> <span class="string">'@/api/search'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'SearchResult'</span>,</span><br><span class="line">  <span class="attr">components</span>: {},</span><br><span class="line">  <span class="attr">props</span>: {</span><br><span class="line">    <span class="attr">q</span>: {</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">require</span>: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  data () {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">list</span>: [],</span><br><span class="line">      <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">finished</span>: <span class="literal">false</span>,</span><br><span class="line">+      page: <span class="number">1</span>,</span><br><span class="line">+      perPage: <span class="number">20</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">computed</span>: {},</span><br><span class="line">  <span class="attr">watch</span>: {},</span><br><span class="line">  created () {},</span><br><span class="line">  mounted () {},</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">+++    <span class="keyword">async</span> onLoad () {</span><br><span class="line">      <span class="comment">// 1. 请求获取数据</span></span><br><span class="line">      <span class="keyword">const</span> { data } = <span class="keyword">await</span> getSearch({</span><br><span class="line">        <span class="attr">page</span>: <span class="built_in">this</span>.page, <span class="comment">// 页码</span></span><br><span class="line">        <span class="attr">per_page</span>: <span class="built_in">this</span>.perPage, <span class="comment">// 每页大小</span></span><br><span class="line">        <span class="attr">q</span>: <span class="built_in">this</span>.q <span class="comment">// 搜索关键字</span></span><br><span class="line">      })</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 将数据添加到列表中</span></span><br><span class="line">      <span class="keyword">const</span> { results } = data.data</span><br><span class="line">      <span class="built_in">this</span>.list.push(...results)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. 设置加载状态结束</span></span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. 判断数据是否加载完毕</span></span><br><span class="line">      <span class="keyword">if</span> (results.length) {</span><br><span class="line">        <span class="built_in">this</span>.page++ <span class="comment">// 更新获取下一页数据的页码</span></span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">this</span>.finished = <span class="literal">true</span> <span class="comment">// 没有数据了，将加载状态设置结束，不再 onLoad</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>三、最后，模板绑定</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-list</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:finished</span>=<span class="string">"finished"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">finished-text</span>=<span class="string">"没有更多了"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">load</span>=<span class="string">"onLoad"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span></span></span><br><span class="line"><span class="tag">+    <span class="attr">v-for</span>=<span class="string">"(article, index) in list"</span></span></span><br><span class="line"><span class="tag">+    <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">+    <span class="attr">:title</span>=<span class="string">"article.title"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-list</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="搜索历史记录"><a href="#搜索历史记录" class="headerlink" title="搜索历史记录"></a>搜索历史记录</h2><h3 id="添加历史记录"><a href="#添加历史记录" class="headerlink" title="添加历史记录"></a>添加历史记录</h3><p>当发生搜索的时候我们才需要记录历史记录。</p>
<p>1、在 data 中添加一个数据用来存储历史记录</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">searchHistories</span>: []</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、在触发搜索的时候，记录历史记录</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">onSearch (val) {</span><br><span class="line">  <span class="comment">// 更新文本框内容</span></span><br><span class="line">  <span class="built_in">this</span>.searchText = val</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储搜索历史记录</span></span><br><span class="line">  <span class="comment">// 要求：不要有重复历史记录、最新的排在最前面</span></span><br><span class="line">  <span class="keyword">const</span> index = <span class="built_in">this</span>.searchHistories.indexOf(val)</span><br><span class="line">  <span class="keyword">if</span> (index !== -<span class="number">1</span>) {</span><br><span class="line">    <span class="built_in">this</span>.searchHistories.splice(index, <span class="number">1</span>)</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">this</span>.searchHistories.unshift(val)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 渲染搜索结果</span></span><br><span class="line">  <span class="built_in">this</span>.isResultShow = <span class="literal">true</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>



<h3 id="展示历史记录"><a href="#展示历史记录" class="headerlink" title="展示历史记录"></a>展示历史记录</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 历史记录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-cell-group</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"历史记录"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">name</span>=<span class="string">"delete"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>全部删除<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>完成<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:title</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"(item, index) in searchHistories"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">name</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">van-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /历史记录 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>



<h3 id="删除历史记录"><a href="#删除历史记录" class="headerlink" title="删除历史记录"></a>删除历史记录</h3><p>基本思路：</p>
<ul>
<li>给历史记录中的每一项注册点击事件</li>
<li>在处理函数中判断<ul>
<li>如果是删除状态，则执行删除操作</li>
<li>如果是非删除状态，则执行搜索操作</li>
</ul>
</li>
</ul>
<p>一、处理删除相关元素的展示状态</p>
<p>1、在 data 中添加一个数据用来控制删除相关元素的显示状态</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">isDeleteShow</span>: <span class="literal">false</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、绑定使用</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 历史记录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-cell-group</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"历史记录"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"isDeleteShow"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"searchHistories = []"</span>&gt;</span>全部删除<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"isDeleteShow = false"</span>&gt;</span>完成<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">v-else</span> <span class="attr">name</span>=<span class="string">"delete"</span> @<span class="attr">click</span>=<span class="string">"isDeleteShow = true"</span>&gt;</span><span class="tag">&lt;/<span class="name">van-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:title</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"(item, index) in searchHistories"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"onSearch(item)"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-icon</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-show</span>=<span class="string">"isDeleteShow"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"close"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"searchHistories.splice(index, 1)"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">van-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /历史记录 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>二、处理删除操作</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 历史记录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-cell-group</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"历史记录"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"isDeleteShow"</span>&gt;</span></span><br><span class="line">+      <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"searchHistories = []"</span>&gt;</span>全部删除<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"isDeleteShow = false"</span>&gt;</span>完成<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">v-else</span> <span class="attr">name</span>=<span class="string">"delete"</span> @<span class="attr">click</span>=<span class="string">"isDeleteShow = true"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:title</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"(item, index) in searchHistories"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">+    @<span class="attr">click</span>=<span class="string">"onHistoryClick(item, index)"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">v-show</span>=<span class="string">"isDeleteShow"</span> <span class="attr">name</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">van-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /历史记录 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">onHistoryClick (item, index) {</span><br><span class="line">  <span class="comment">// 如果是删除状态，则执行删除操作</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.isDeleteShow) {</span><br><span class="line">    <span class="built_in">this</span>.searchHistories.splice(index, <span class="number">1</span>)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 否则执行搜索操作</span></span><br><span class="line">    <span class="built_in">this</span>.onSearch(item)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><p>1、利用 watch 监视统一存储数据</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">watch: {</span><br><span class="line">  searchHistories (val) {</span><br><span class="line">    <span class="comment">// 同步到本地存储</span></span><br><span class="line">    setItem(<span class="string">'serach-histories'</span>, val)</span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>



<p>2、初始化的时候从本地存储获取数据</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">searchHistories</span>: getItem(<span class="string">'serach-histories'</span>) || [],</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h1 id="七、文章详情"><a href="#七、文章详情" class="headerlink" title="七、文章详情"></a>七、文章详情</h1><h2 id="创建组件并配置路由-2"><a href="#创建组件并配置路由-2" class="headerlink" title="创建组件并配置路由"></a>创建组件并配置路由</h2><p>1、创建 <code>views/article/index.vue</code> 组件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-container"</span>&gt;</span>文章详情<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'ArticleIndex'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="attr">articleId</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: [<span class="built_in">Number</span>, <span class="built_in">String</span>],</span></span><br><span class="line"><span class="javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>2、然后将该页面配置到根级路由</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">path</span>: <span class="string">'/article/:articleId'</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'article'</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/article'</span>),</span><br><span class="line">  <span class="comment">// 将路由动态参数映射到组件的 props 中，更推荐这种做法</span></span><br><span class="line">  <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p><a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html">官方文档：路由 props 传参</a></p>
</blockquote>
<h2 id="页面布局-4"><a href="#页面布局-4" class="headerlink" title="页面布局"></a>页面布局</h2><p>使用到的 Vant 中的组件：</p>
<ul>
<li><p><a href="https://youzan.github.io/vant/#/zh-CN/nav-bar">NavBar 导航栏</a></p>
</li>
<li><p><a href="https://youzan.github.io/vant/#/zh-CN/loading">Loading 加载</a></p>
</li>
<li><p><a href="https://youzan.github.io/vant/#/zh-CN/cell">Cell 单元格</a></p>
</li>
<li><p><a href="https://youzan.github.io/vant/#/zh-CN/button">Button 按钮</a></p>
</li>
<li><p><a href="https://youzan.github.io/vant/#/zh-CN/image">Image 图片</a></p>
</li>
<li><p><a href="https://youzan.github.io/vant/#/zh-CN/divider">Divider 分割线</a></p>
</li>
<li><p><a href="https://youzan.github.io/vant/#/zh-CN/icon">Icon 图标</a></p>
</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"page-nav-bar"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">left-arrow</span></span></span><br><span class="line"><span class="tag">      <span class="attr">title</span>=<span class="string">"黑马头条"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">van-nav-bar</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /导航栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-wrap"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 加载中 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-loading</span></span></span><br><span class="line"><span class="tag">          <span class="attr">color</span>=<span class="string">"#3296fa"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">vertical</span></span></span><br><span class="line"><span class="tag">        &gt;</span>加载中<span class="tag">&lt;/<span class="name">van-loading</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- /加载中 --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 加载完成-文章详情 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-detail"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文章标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"article-title"</span>&gt;</span>这是文章标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /文章标题 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 用户信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">class</span>=<span class="string">"user-info"</span> <span class="attr">center</span> <span class="attr">:border</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"avatar"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">slot</span>=<span class="string">"icon"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">round</span></span></span><br><span class="line"><span class="tag">            <span class="attr">fit</span>=<span class="string">"cover"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">src</span>=<span class="string">"https://img.yzcdn.cn/vant/cat.jpeg"</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"user-name"</span>&gt;</span>黑马头条号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"label"</span> <span class="attr">class</span>=<span class="string">"publish-date"</span>&gt;</span>14小时前<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"follow-btn"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"info"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">color</span>=<span class="string">"#3296fa"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">round</span></span></span><br><span class="line"><span class="tag">            <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">icon</span>=<span class="string">"plus"</span></span></span><br><span class="line"><span class="tag">          &gt;</span>关注<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &lt;van-button</span></span><br><span class="line"><span class="comment">            class="follow-btn"</span></span><br><span class="line"><span class="comment">            round</span></span><br><span class="line"><span class="comment">            size="small"</span></span><br><span class="line"><span class="comment">          &gt;已关注&lt;/van-button&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /用户信息 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 文章内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-content"</span>&gt;</span>这是文章内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-divider</span>&gt;</span>正文结束<span class="tag">&lt;/<span class="name">van-divider</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- /加载完成-文章详情 --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 加载失败：404 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">name</span>=<span class="string">"failure"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>该资源不存在或已删除！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- /加载失败：404 --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 加载失败：其它未知错误（例如网络原因或服务端异常） --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">name</span>=<span class="string">"failure"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>内容加载失败！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">class</span>=<span class="string">"retry-btn"</span>&gt;</span>点击重试<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- /加载失败：其它未知错误（例如网络原因或服务端异常） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 底部区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-bottom"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"comment-btn"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"default"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">round</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag">      &gt;</span>写评论<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-icon</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"comment-o"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">info</span>=<span class="string">"123"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"#777"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-icon</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"#777"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"star-o"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-icon</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"#777"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"good-job-o"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">name</span>=<span class="string">"share"</span> <span class="attr">color</span>=<span class="string">"#777777"</span>&gt;</span><span class="tag">&lt;/<span class="name">van-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /底部区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'ArticleIndex'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="attr">articleId</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: [<span class="built_in">Number</span>, <span class="built_in">String</span>],</span></span><br><span class="line"><span class="javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.article-container</span> {</span></span><br><span class="line"><span class="css">  <span class="selector-class">.main-wrap</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>: <span class="number">92px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">bottom</span>: <span class="number">88px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">overflow-y</span>: scroll;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.article-detail</span> {</span></span><br><span class="line"><span class="css">    <span class="selector-class">.article-title</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">50px</span> <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: <span class="number">#3a3a3a</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.user-info</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.avatar</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-right</span>: <span class="number">17px</span>;</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">      <span class="selector-class">.van-cell__label</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">      <span class="selector-class">.user-name</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#3a3a3a</span>;</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">      <span class="selector-class">.publish-date</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#b7b7b7</span>;</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">      <span class="selector-class">.follow-btn</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">170px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">58px</span>;</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.article-content</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">55px</span> <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">      /deep/ <span class="selector-tag">p</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: justify;</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.loading-wrap</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">200px</span> <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.error-wrap</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">200px</span> <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.van-icon</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">122px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: <span class="number">#b4b4b4</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">    <span class="selector-class">.text</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: <span class="number">#666666</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">33px</span> <span class="number">0</span> <span class="number">46px</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">    <span class="selector-class">.retry-btn</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">line-height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c3c3c3</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: <span class="number">#666666</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.article-bottom</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">88px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#d8d8d8</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.comment-btn</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">282px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">46px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#eeeeee</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">line-height</span>: <span class="number">46px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: <span class="number">#a7a7a7</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">    <span class="selector-class">.van-icon</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.van-info</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#e22829</span>;</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="关于后端返回数据中的大数字问题"><a href="#关于后端返回数据中的大数字问题" class="headerlink" title="关于后端返回数据中的大数字问题"></a>关于后端返回数据中的大数字问题</h2><p>之所以请求文章详情返回 404 是因为我们请求发送的文章 ID （article.art_id）不正确。</p>
<p>JavaScript 能够准确表示的整数范围在<code>-2^53</code>到<code>2^53</code>之间（不含两个端点），超过这个范围，无法精确表示这个值，这使得 JavaScript 不适合进行科学和金融方面的精确计算。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) <span class="comment">// 9007199254740992</span></span><br><span class="line"></span><br><span class="line"><span class="number">9007199254740992</span>  <span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="number">9007199254740993</span>  <span class="comment">// 9007199254740992</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) === <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) + <span class="number">1</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中，超出 2 的 53 次方之后，一个数就不精确了。<br>ES6 引入了<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.MIN_SAFE_INTEGER</code>这两个常量，用来表示这个范围的上下限。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER === <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER === <span class="number">9007199254740991</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER === -<span class="built_in">Number</span>.MAX_SAFE_INTEGER</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER === -<span class="number">9007199254740991</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中，可以看到 JavaScript 能够精确表示的极限。</p>
<p>后端返回的数据一般都是 <strong>JSON 格式的字符串</strong>。</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">'{ <span class="attr">"id"</span>: <span class="number">9007199254740995</span>, <span class="attr">"name"</span>: <span class="string">"Jack"</span>, <span class="attr">"age"</span>: <span class="number">18</span> }'</span><br></pre></td></tr></tbody></table></figure>

<p>如果这个字符不做任何处理，你能方便的获取到字符串中的指定数据吗？非常麻烦。所以我们要把它转换为 JavaScript 对象来使用就很方便了。</p>
<p>幸运的是 axios 为了方便我们使用数据，它会在内部使用 <code>JSON.parse()</code> 把后端返回的数据转为 JavaScript 对象。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// { id: 9007199254740996, name: 'Jack', age: 18 }</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">'{ "id": 9007199254740995, "name": "Jack", "age": 18 }'</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>可以看到，超出安全整数范围的 id 无法精确表示，这个问题并不是 axios 的错。</p>
<p>了解了什么是大整数的概念，接下来的问题是如何解决？</p>
<p><a href="https://github.com/sidorares/json-bigint">json-bigint</a> 是一个第三方包，它可以帮我们很好的处理这个问题。</p>
<p>使用它的第一步就是把它安装到你的项目中。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm i json-bigint</span><br></pre></td></tr></tbody></table></figure>

<p>下面是使用它的一个简单示例。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonStr = <span class="string">'{ "art_id": 1245953273786007552 }'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(jsonStr)) <span class="comment">// 1245953273786007600</span></span><br><span class="line"><span class="comment">// JSON.stringify()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSONBig 可以处理数据中超出 JavaScript 安全整数范围的问题</span></span><br><span class="line"><span class="built_in">console</span>.log(JSONBig.parse(jsonStr)) <span class="comment">// 把 JSON 格式的字符串转为 JavaScript 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的时候需要把 BigNumber 类型的数据转为字符串来使用</span></span><br><span class="line"><span class="built_in">console</span>.log(JSONBig.parse(jsonStr).art_id.toString()) <span class="comment">// 1245953273786007552</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(JSONBig.parse(jsonStr)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(JSONBig.stringify(JSONBig.parse(jsonStr))) <span class="comment">// 把 JavaScript 对象 转为 JSON 格式的字符串转</span></span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1582099315865-5e805425-7abf-4cf2-9df3-acc2ef8f9bb9.png" alt="image.png"></p>
<blockquote>
<p>json-bigint 会把超出 JS 安全整数范围的数字转为一个 BigNumber 类型的对象，对象数据是它内部的一个算法处理之后的，我们要做的就是在使用的时候转为字符串来使用。</p>
</blockquote>
<p>通过 Axios 请求得到的数据都是 Axios 处理（JSON.parse）之后的，我们应该在 Axios 执行处理之前手动使用 json-bigint 来解析处理。Axios 提供了自定义处理原始后端返回数据的 API：<code>transformResponse</code> 。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jsonBig <span class="keyword">from</span> <span class="string">'json-bigint'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">'{ "value" : 9223372036854775807, "v2": 123 }'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(jsonBig.parse(json))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.create({</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">'http://ttapi.research.itcast.cn/'</span>, <span class="comment">// 接口基础路径</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// transformResponse 允许自定义原始的响应数据（字符串）</span></span><br><span class="line">  <span class="attr">transformResponse</span>: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      <span class="comment">// 如果转换成功则返回转换的数据结果</span></span><br><span class="line">      <span class="keyword">return</span> jsonBig.parse(data)</span><br><span class="line">    } <span class="keyword">catch</span> (err) {</span><br><span class="line">      <span class="comment">// 如果转换失败，则包装为统一数据格式并返回</span></span><br><span class="line">      <span class="keyword">return</span> {</span><br><span class="line">        data</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }]</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>扩展：ES2020 BigInt</p>
<p>ES2020 引入了一种新的数据类型 BigInt（大整数），来解决这个问题。BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。</p>
<p>参考链接：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/number#BigInt-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">http://es6.ruanyifeng.com/#docs/number#BigInt-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B</a></li>
</ul>
</blockquote>
<h2 id="展示文章详情"><a href="#展示文章详情" class="headerlink" title="展示文章详情"></a>展示文章详情</h2><p>思路：</p>
<ul>
<li>找到数据接口</li>
<li>封装请求方法</li>
<li>请求获取数据</li>
<li>模板绑定</li>
</ul>
<p>一、请求并展示文章详情</p>
<p>1、在 <code>api/article.js</code> 中新增封装接口方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 id 获取指定文章</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getArticleById = <span class="function"><span class="params">articleId</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/app/v1_0/articles/<span class="subst">${articleId}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、在组件中调用获取文章详情</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">+ <span class="keyword">import</span> { getArticleById } <span class="keyword">from</span> <span class="string">'@/api/article'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'ArticlePage'</span>,</span><br><span class="line">  <span class="attr">components</span>: {},</span><br><span class="line">  <span class="attr">props</span>: {</span><br><span class="line">    <span class="attr">articleId</span>: {</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  data () {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">+      article: {} <span class="comment">// 文章详情</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">computed</span>: {},</span><br><span class="line">  <span class="attr">watch</span>: {},</span><br><span class="line">  created () {</span><br><span class="line">+    <span class="built_in">this</span>.loadArticle()</span><br><span class="line">  },</span><br><span class="line">  mounted () {},</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">+++    <span class="keyword">async</span> loadArticle () {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">const</span> { data } = <span class="keyword">await</span> getArticleById(<span class="built_in">this</span>.articleId)</span><br><span class="line">        <span class="built_in">this</span>.article = data.data</span><br><span class="line">      } <span class="keyword">catch</span> (err) {</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>3、模板绑定</p>
<h2 id="处理内容加载状态"><a href="#处理内容加载状态" class="headerlink" title="处理内容加载状态"></a>处理内容加载状态</h2><p>需求：</p>
<ul>
<li>加载中，显示 loading</li>
<li>加载成功，显示文章详情</li>
<li>加载失败，显示错误提示<ul>
<li>如果 404，提示资源不存在</li>
<li>其它的，提示加载失败，用户可以点击重试重新加载</li>
</ul>
</li>
</ul>
<h2 id="关于文章正文的样式"><a href="#关于文章正文的样式" class="headerlink" title="关于文章正文的样式"></a>关于文章正文的样式</h2><p>文章正文包括各种数据：段落、标题、列表、链接、图片、视频等资源。</p>
<ul>
<li>将 <a href="https://github.com/sindresorhus/github-markdown-css">github-markdown-css</a> 样式文件下载到项目中</li>
<li>配置不要转换样式文件中的字号</li>
</ul>
<h2 id="图片点击预览"><a href="#图片点击预览" class="headerlink" title="图片点击预览"></a>图片点击预览</h2><p>一、<a href="https://youzan.github.io/vant/#/zh-CN/image-preview">ImagePreview 图片预览</a> 的使用</p>
<p>二、处理图片点击预览</p>
<p>思路：</p>
<p>1、从文章内容中获取到所有的 img DOM 节点</p>
<p>2、获取文章内容中所有的图片地址</p>
<p>3、遍历所有 img 节点，给每个节点注册点击事件</p>
<p>4、在 img 点击事件处理函数中，调用 ImagePreview 预览</p>
<h2 id="关注用户"><a href="#关注用户" class="headerlink" title="关注用户"></a>关注用户</h2><p>思路：</p>
<ul>
<li>给按钮注册点击事件</li>
<li>在事件处理函数中<ul>
<li>如果已关注，则取消关注</li>
<li>如果没有关注，则添加关注</li>
</ul>
</li>
</ul>
<p>下面是具体实现。</p>
<h3 id="视图处理"><a href="#视图处理" class="headerlink" title="视图处理"></a>视图处理</h3><h3 id="功能处理"><a href="#功能处理" class="headerlink" title="功能处理"></a>功能处理</h3><ul>
<li>找到数据接口</li>
<li>封装请求方法</li>
<li>请求调用</li>
<li>视图更新</li>
</ul>
<p>1、在 <code>api/user.js</code> 中添加封装请求方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加关注</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addFollow = <span class="function"><span class="params">userId</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/user/followings'</span>,</span><br><span class="line">    <span class="attr">data</span>: {</span><br><span class="line">      <span class="attr">target</span>: userId</span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消关注</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteFollow = <span class="function"><span class="params">userId</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'DELETE'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/app/v1_0/user/followings/<span class="subst">${userId}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、给关注/取消关注按钮注册点击事件</p>
<p>3、在事件处理函数中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { addFollow, deleteFollow } <span class="keyword">from</span> <span class="string">'@/api/user'</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onFollow () {</span><br><span class="line">  <span class="comment">// 开启按钮的 loading 状态</span></span><br><span class="line">  <span class="built_in">this</span>.isFollowLoading = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 如果已关注，则取消关注</span></span><br><span class="line">    <span class="keyword">const</span> authorId = <span class="built_in">this</span>.article.aut_id</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.article.is_followed) {</span><br><span class="line">      <span class="keyword">await</span> deleteFollow(authorId)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// 否则添加关注</span></span><br><span class="line">      <span class="keyword">await</span> addFollow(authorId)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新视图</span></span><br><span class="line">    <span class="built_in">this</span>.article.is_followed = !<span class="built_in">this</span>.article.is_followed</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">this</span>.$toast.fail(<span class="string">'操作失败'</span>)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭按钮的 loading 状态</span></span><br><span class="line">  <span class="built_in">this</span>.isFollowLoading = <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>最后测试。</p>
<h3 id="loading-效果"><a href="#loading-效果" class="headerlink" title="loading 效果"></a>loading 效果</h3><p>两个作用：</p>
<ul>
<li>交互反馈</li>
<li>防止网络慢用户多次点击按钮导致重复触发点击事件</li>
</ul>
<h3 id="组件封装"><a href="#组件封装" class="headerlink" title="组件封装"></a>组件封装</h3><h2 id="文章收藏"><a href="#文章收藏" class="headerlink" title="文章收藏"></a>文章收藏</h2><blockquote>
<p>该功能和关注用户的处理思路几乎一样，建议由学员自己编写。</p>
</blockquote>
<h3 id="封装组件"><a href="#封装组件" class="headerlink" title="封装组件"></a>封装组件</h3><h3 id="处理视图"><a href="#处理视图" class="headerlink" title="处理视图"></a>处理视图</h3><h3 id="功能处理-1"><a href="#功能处理-1" class="headerlink" title="功能处理"></a>功能处理</h3><p>思路：</p>
<ul>
<li>给收藏按钮注册点击事件</li>
<li>如果已经收藏了，则取消收藏</li>
<li>如果没有收藏，则添加收藏</li>
</ul>
<p>下面是具体实现。</p>
<p>1、在 <code>api/article.js</code> 添加封装数据接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收藏文章</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addCollect = <span class="function"><span class="params">target</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/article/collections'</span>,</span><br><span class="line">    <span class="attr">data</span>: {</span><br><span class="line">      target</span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消收藏文章</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteCollect = <span class="function"><span class="params">target</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'DELETE'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/app/v1_0/article/collections/<span class="subst">${target}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、给收藏按钮注册点击事件</p>
<p>3、处理函数</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onCollect () {</span><br><span class="line">  <span class="comment">// 这里 loading 不仅仅是为了交互提示，更重要的是请求期间禁用背景点击功能，防止用户不断的操作界面发出请求</span></span><br><span class="line">  <span class="built_in">this</span>.$toast.loading({</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">0</span>, <span class="comment">// 持续展示 toast</span></span><br><span class="line">    <span class="attr">message</span>: <span class="string">'操作中...'</span>,</span><br><span class="line">    <span class="attr">forbidClick</span>: <span class="literal">true</span> <span class="comment">// 是否禁止背景点击</span></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 如果已收藏，则取消收藏</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.article.is_collected) {</span><br><span class="line">      <span class="keyword">await</span> deleteCollect(<span class="built_in">this</span>.articleId)</span><br><span class="line">      <span class="comment">// this.article.is_collected = false</span></span><br><span class="line">      <span class="built_in">this</span>.$toast.success(<span class="string">'取消收藏'</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// 添加收藏</span></span><br><span class="line">      <span class="keyword">await</span> addCollect(<span class="built_in">this</span>.articleId)</span><br><span class="line">      <span class="comment">// this.article.is_collected = true</span></span><br><span class="line">      <span class="built_in">this</span>.$toast.success(<span class="string">'收藏成功'</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">this</span>.article.is_collected = !<span class="built_in">this</span>.article.is_collected</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">this</span>.$toast.fail(<span class="string">'操作失败'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h2 id="文章点赞"><a href="#文章点赞" class="headerlink" title="文章点赞"></a>文章点赞</h2><blockquote>
<p>该功能和关注用户的处理思路几乎一样，建议由学员自己编写。</p>
</blockquote>
<p>article 中的 <code>attitude</code> 表示用户对文章的态度</p>
<ul>
<li><code>-1</code> 无态度</li>
<li><code>0</code> 不喜欢</li>
<li><code>1</code> 已点赞</li>
</ul>
<p>思路：</p>
<ul>
<li>给点赞按钮注册点击事件</li>
<li>如果已经点赞，则请求取消点赞</li>
<li>如果没有点赞，则请求点赞</li>
</ul>
<p>1、添加封装数据接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点赞</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addLike = <span class="function"><span class="params">articleId</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/article/likings'</span>,</span><br><span class="line">    <span class="attr">data</span>: {</span><br><span class="line">      <span class="attr">target</span>: articleId</span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消点赞</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteLike = <span class="function"><span class="params">articleId</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'DELETE'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/app/v1_0/article/likings/<span class="subst">${articleId}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、给点赞按钮注册点击事件</p>
<p>3、处理函数</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onLike () {</span><br><span class="line">  <span class="comment">// 两个作用：1、交互提示 2、防止网络慢用户连续不断的点击按钮请求</span></span><br><span class="line">  <span class="built_in">this</span>.$toast.loading({</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">0</span>, <span class="comment">// 持续展示 toast</span></span><br><span class="line">    <span class="attr">message</span>: <span class="string">'操作中...'</span>,</span><br><span class="line">    <span class="attr">forbidClick</span>: <span class="literal">true</span> <span class="comment">// 是否禁止背景点击</span></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 如果已经点赞，则取消点赞</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.article.attitude === <span class="number">1</span>) {</span><br><span class="line">      <span class="keyword">await</span> deleteLike(<span class="built_in">this</span>.articleId)</span><br><span class="line">      <span class="built_in">this</span>.article.attitude = -<span class="number">1</span></span><br><span class="line">      <span class="built_in">this</span>.$toast.success(<span class="string">'取消点赞'</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// 否则添加点赞</span></span><br><span class="line">      <span class="keyword">await</span> addLike(<span class="built_in">this</span>.articleId)</span><br><span class="line">      <span class="built_in">this</span>.article.attitude = <span class="number">1</span></span><br><span class="line">      <span class="built_in">this</span>.$toast.success(<span class="string">'点赞成功'</span>)</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">this</span>.$toast.fail(<span class="string">'操作失败'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="八、文章评论"><a href="#八、文章评论" class="headerlink" title="八、文章评论"></a>八、文章评论</h1><h2 id="展示文章评论列表"><a href="#展示文章评论列表" class="headerlink" title="展示文章评论列表"></a>展示文章评论列表</h2><h3 id="准备组件-1"><a href="#准备组件-1" class="headerlink" title="准备组件"></a>准备组件</h3><p>为了更好的开发和维护，这里我们把文章评论单独封装到一个组件中来处理。</p>
<p>1、创建 <code>src/views/article/components/article-comment.vue</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-comments"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 评论列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-list</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:finished</span>=<span class="string">"finished"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">finished-text</span>=<span class="string">"没有更多了"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">load</span>=<span class="string">"onLoad"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item"</span> <span class="attr">:title</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">          <span class="attr">slot</span>=<span class="string">"icon"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">round</span></span></span><br><span class="line"><span class="tag">          <span class="attr">width</span>=<span class="string">"30"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">height</span>=<span class="string">"30"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">"margin-right: 10px;"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">src</span>=<span class="string">"https://img.yzcdn.cn/vant/cat.jpeg"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: #466b9d;"</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: #363636;"</span>&gt;</span>我出去跟别人说我的是。。。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"margin-right: 10px;"</span>&gt;</span>3天前<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">type</span>=<span class="string">"default"</span>&gt;</span>回复<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">slot</span>=<span class="string">"right-icon"</span> <span class="attr">name</span>=<span class="string">"like-o"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-list</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 评论列表 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 发布评论 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell-group</span> <span class="attr">class</span>=<span class="string">"publish-wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-field</span> <span class="attr">clearable</span> <span class="attr">placeholder</span>=<span class="string">"请输入评论内容"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">slot</span>=<span class="string">"button"</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">type</span>=<span class="string">"info"</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /发布评论 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">"ArticleComment"</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">        <span class="attr">list</span>: [], <span class="comment">// 评论列表</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">loading</span>: <span class="literal">false</span>, <span class="comment">// 上拉加载更多的 loading</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">finished</span>: <span class="literal">false</span> <span class="comment">// 是否加载结束</span></span></span><br><span class="line"><span class="javascript">      };</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">onLoad</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 异步更新数据</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.list.push(<span class="built_in">this</span>.list.length + <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">          }</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 加载状态结束</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.loading = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 数据全部加载完成</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">this</span>.list.length &gt;= <span class="number">40</span>) {</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.finished = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">          }</span></span><br><span class="line"><span class="javascript">        }, <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  };</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.publish-wrap</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.van-list</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-bottom</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>2、在文章详情页面中加载注册文章评论子组件</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ArticleComment <span class="keyword">from</span> <span class="string">'./components/article-comment'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">components</span>: {</span><br><span class="line">    ArticleComment</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>3、在文章详情页面的加载失败提示消息后面使用文章评论子组件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文章评论 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article-comment</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /文章评论 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>最终页面效果如下：</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20191206152846065.png" alt="image-20191206152846065"></p>
<h3 id="获取数据并展示"><a href="#获取数据并展示" class="headerlink" title="获取数据并展示"></a>获取数据并展示</h3><blockquote>
<p>提示：有评论数据的文章 id：<code>139987</code>。</p>
</blockquote>
<p>步骤：</p>
<ul>
<li>封装接口</li>
<li>请求获取数据</li>
<li>处理模板</li>
</ul>
<p>实现：</p>
<p>1、在 <code>api/comment.js</code> 中添加封装请求方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 评论接口模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">"@/utils/request"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取文章列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getComments</span>(<span class="params">params</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">"GET"</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">"/app/v1_0/comments"</span>,</span><br><span class="line">    params</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、请求获取数据</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">articleComment</span>: { <span class="comment">// 文章评论相关数据</span></span><br><span class="line">      <span class="attr">list</span>: [],</span><br><span class="line">      <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">finished</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">offset</span>: <span class="literal">null</span>, <span class="comment">// 请求下一页数据的页码</span></span><br><span class="line">      <span class="attr">totalCount</span>: <span class="number">0</span> <span class="comment">// 总数据条数</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onLoad () {</span><br><span class="line">  <span class="keyword">const</span> articleComment = <span class="built_in">this</span>.articleComment</span><br><span class="line">  <span class="comment">// 1. 请求获取数据</span></span><br><span class="line">  <span class="keyword">const</span> { data } = <span class="keyword">await</span> getComments({</span><br><span class="line">    <span class="attr">type</span>: <span class="string">'a'</span>, <span class="comment">// 评论类型，a-对文章(article)的评论，c-对评论(comment)的回复</span></span><br><span class="line">    <span class="attr">source</span>: <span class="built_in">this</span>.articleId, <span class="comment">// 源id，文章id或评论id</span></span><br><span class="line">    <span class="attr">offset</span>: articleComment.offset, <span class="comment">// 获取评论数据的偏移量，值为评论id，表示从此id的数据向后取，不传表示从第一页开始读取数据</span></span><br><span class="line">    <span class="attr">limit</span>: <span class="number">10</span> <span class="comment">// 每页大小</span></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 将数据添加到列表中</span></span><br><span class="line">  <span class="keyword">const</span> { results } = data.data</span><br><span class="line">  articleComment.list.push(...results)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新总数据条数</span></span><br><span class="line">  articleComment.totalCount = data.data.total_count</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 将加载更多的 loading 设置为 false</span></span><br><span class="line">  articleComment.loading = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 判断是否还有数据</span></span><br><span class="line">  <span class="keyword">if</span> (results.length) {</span><br><span class="line">    articleComment.offset = data.data.last_id <span class="comment">// 更新获取下一页数据的页码</span></span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    articleComment.finished = <span class="literal">true</span> <span class="comment">// 没有数据了，关闭加载更多</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>3、模板绑定</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 评论列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-list</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:finished</span>=<span class="string">"finished"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">finished-text</span>=<span class="string">"没有更多了"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">load</span>=<span class="string">"onLoad"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> + <span class="attr">:key</span>=<span class="string">"item.com_id.toString()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">      <span class="attr">slot</span>=<span class="string">"icon"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">round</span></span></span><br><span class="line"><span class="tag">      <span class="attr">width</span>=<span class="string">"30"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">height</span>=<span class="string">"30"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">"margin-right: 10px;"</span></span></span><br><span class="line"><span class="tag">      +</span></span><br><span class="line"><span class="tag">      <span class="attr">:src</span>=<span class="string">"item.aut_photo"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    + <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: #466b9d;"</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>{{ item.aut_name }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">      +</span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: #363636;"</span>&gt;</span>{{ item.content }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        +</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"margin-right: 10px;"</span></span></span><br><span class="line"><span class="tag">          &gt;</span>{{ item.pubdate | relativeTime }}&lt;/span</span><br><span class="line">        &gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">type</span>=<span class="string">"default"</span>&gt;</span>回复<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">slot</span>=<span class="string">"right-icon"</span> <span class="attr">name</span>=<span class="string">"like-o"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 评论列表 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="展示文章评论总数量"><a href="#展示文章评论总数量" class="headerlink" title="展示文章评论总数量"></a>展示文章评论总数量</h3><h3 id="文章评论项"><a href="#文章评论项" class="headerlink" title="文章评论项"></a>文章评论项</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">class</span>=<span class="string">"comment-item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">      <span class="attr">slot</span>=<span class="string">"icon"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"avatar"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">round</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fit</span>=<span class="string">"cover"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">"https://img.yzcdn.cn/vant/cat.jpeg"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"title-wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-name"</span>&gt;</span>用户名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"like-btn"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">"good-job-o"</span></span></span><br><span class="line"><span class="tag">      &gt;</span>赞<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"comment-content"</span>&gt;</span>这是评论内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom-info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"comment-pubdate"</span>&gt;</span>4天前<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"reply-btn"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">round</span></span></span><br><span class="line"><span class="tag">        &gt;</span>回复 0<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'CommentItem'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.comment-item</span> {</span></span><br><span class="line"><span class="css">  <span class="selector-class">.avatar</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">72px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">72px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-right</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.title-wrap</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.user-name</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: <span class="number">#406599</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.comment-content</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#222222</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">word-break</span>: break-all;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: justify;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.comment-pubdate</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">19px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#222</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-right</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.bottom-info</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.reply-btn</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">135px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">21px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#222</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.like-btn</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">19px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-right</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.van-icon</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>绑定之后：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">class</span>=<span class="string">"comment-item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">      <span class="attr">slot</span>=<span class="string">"icon"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"avatar"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">round</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fit</span>=<span class="string">"cover"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:src</span>=<span class="string">"comment.aut_photo"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"title-wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-name"</span>&gt;</span>{{ comment.aut_name }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"like-btn"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">"good-job-o"</span></span></span><br><span class="line"><span class="tag">      &gt;</span>{{ comment.like_count || '赞' }}<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"comment-content"</span>&gt;</span>{{ comment.content }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom-info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"comment-pubdate"</span>&gt;</span>{{ comment.pubdate | relativeTime }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"reply-btn"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">round</span></span></span><br><span class="line"><span class="tag">        &gt;</span>回复 {{ comment.reply_count }}<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'CommentItem'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="attr">comment</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.comment-item</span> {</span></span><br><span class="line"><span class="css">  <span class="selector-class">.avatar</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">72px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">72px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-right</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.title-wrap</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.user-name</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: <span class="number">#406599</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.comment-content</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#222222</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">word-break</span>: break-all;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: justify;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.comment-pubdate</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">19px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#222</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-right</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.bottom-info</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.reply-btn</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">135px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">21px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#222</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.like-btn</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">19px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-right</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.van-icon</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="评论点赞"><a href="#评论点赞" class="headerlink" title="评论点赞"></a>评论点赞</h2><p>1、在 <code>api/comment.js</code> 中添加封装两个数据接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对评论或评论回复点赞</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addCommentLike</span>(<span class="params">commentId</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">"POST"</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">"/app/v1_0/comment/likings"</span>,</span><br><span class="line">    <span class="attr">data</span>: {</span><br><span class="line">      <span class="attr">target</span>: commentId</span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消对评论或评论回复点赞</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteCommentLike</span>(<span class="params">commentId</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">"DELETE"</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/app/v1_0/comment/likings/<span class="subst">${commentId}</span>`</span></span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、然后给评论项中的 <code>like</code> 图标注册点击事件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-icon</span></span></span><br><span class="line"><span class="tag">  <span class="attr">slot</span>=<span class="string">"right-icon"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"red"</span></span></span><br><span class="line"><span class="tag">  +</span></span><br><span class="line"><span class="tag">  <span class="attr">:name</span>=<span class="string">"item.is_liking ? 'like' : 'like-o'"</span></span></span><br><span class="line"><span class="tag">  +</span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"onCommentLike(item)"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>3、在事件处理函数中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> {</span><br><span class="line">  getComments,</span><br><span class="line">  addComment,</span><br><span class="line">+  addCommentLike,</span><br><span class="line">+  deleteCommentLike</span><br><span class="line">} <span class="keyword">from</span> <span class="string">'@/api/comment'</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onCommentLike (comment) {</span><br><span class="line">  <span class="comment">// 如果已经赞了则取消点赞</span></span><br><span class="line">  <span class="keyword">if</span> (comment.is_liking) {</span><br><span class="line">    <span class="keyword">await</span> deleteCommentLike(comment.com_id)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 如果没有赞，则点赞</span></span><br><span class="line">    <span class="keyword">await</span> addCommentLike(comment.com_id)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新视图状态</span></span><br><span class="line">  comment.is_liking = !comment.is_liking</span><br><span class="line">  <span class="built_in">this</span>.$toast(<span class="string">'操作成功'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="发布文章评论"><a href="#发布文章评论" class="headerlink" title="发布文章评论"></a>发布文章评论</h2><h3 id="准备弹出层"><a href="#准备弹出层" class="headerlink" title="准备弹出层"></a>准备弹出层</h3><h3 id="封装组件-1"><a href="#封装组件-1" class="headerlink" title="封装组件"></a>封装组件</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment-post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"post-field"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"message"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rows</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">autosize</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"textarea"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">maxlength</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">"请输入留言"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">show-word-limit</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"post-btn"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>发布<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'CommentPost'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">''</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.comment-post</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">32px</span> <span class="number">0</span> <span class="number">32px</span> <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.post-field</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#f5f7f9</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.post-btn</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#6ba3d8</span>;</span></span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">::before</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p>步骤：</p>
<ul>
<li>注册发布点击事件</li>
<li>请求提交表单</li>
<li>根据响应结果进行后续处理</li>
</ul>
<p>一、使用弹层展示发布评论</p>
<p>1、添加弹层组件</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">isPostShow</span>: <span class="literal">false</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 发布文章评论 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-popup</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"isPostShow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">position</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /发布文章评论 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>提示：不设置高度的时候，内容会自动撑开弹层高度</p>
</blockquote>
<p>2、点击发评论按钮的时候显示弹层</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"write-btn"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"default"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">round</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"isPostShow = true"</span></span></span><br><span class="line"><span class="tag">&gt;</span>写评论<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>二、封装发布评论组件</p>
<p>1、创建 <code>post-comment.vue</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-comment"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"post-field"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"message"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rows</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">autosize</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"textarea"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">maxlength</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">"优质评论将会被优先展示"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">show-word-limit</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>发布<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'PostComment'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">''</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.post-comment</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">align-items</span>: flex-end;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.post-field</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="number">#f5f7f9</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>2、在详情页加载注册</p>
<p>3、在发布评论的弹层中使用</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 发布文章评论 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-popup</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"isPostShow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">position</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">post-comment</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /发布文章评论 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>三、发布评论</p>
<p>1、在 <code>api/comment.js</code> 中添加封装数据接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加评论或评论回复</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addComment</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">"POST"</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">"/app/v1_0/comments"</span>,</span><br><span class="line">    data</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、绑定获取添加评论的输入框数据并且注册发布按钮的点击事件</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">inputComment</span>: <span class="string">''</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 发布评论 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-cell-group</span> <span class="attr">class</span>=<span class="string">"publish-wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-field</span> + <span class="attr">v-model</span>=<span class="string">"inputComment"</span> <span class="attr">clearable</span> <span class="attr">placeholder</span>=<span class="string">"请输入评论内容"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">slot</span>=<span class="string">"button"</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">type</span>=<span class="string">"info"</span> + @<span class="attr">click</span>=<span class="string">"onAddComment"</span></span></span><br><span class="line"><span class="tag">      &gt;</span>发布&lt;/van-button</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /发布评论 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>3、在事件处理函数中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> {</span><br><span class="line">  getComments,</span><br><span class="line">+  addComment</span><br><span class="line">} <span class="keyword">from</span> <span class="string">'@/api/comment'</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onAddComment () {</span><br><span class="line">  <span class="keyword">const</span> inputComment = <span class="built_in">this</span>.inputComment.trim()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 非空校验</span></span><br><span class="line">  <span class="keyword">if</span> (!inputComment.length) {</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求添加</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> addComment({</span><br><span class="line">    <span class="attr">target</span>: <span class="built_in">this</span>.$route.params.articleId, <span class="comment">// 评论的目标id（评论文章即为文章id，对评论进行回复则为评论id）</span></span><br><span class="line">    <span class="attr">content</span>: inputComment <span class="comment">// 评论内容</span></span><br><span class="line">    <span class="comment">// art_id // 文章id，对评论内容发表回复时，需要传递此参数，表明所属文章id。对文章进行评论，不要传此参数。</span></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将发布的最新评论展示到列表顶部</span></span><br><span class="line">  <span class="built_in">this</span>.list.unshift(res.data.data.new_obj)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空文本框</span></span><br><span class="line">  <span class="built_in">this</span>.inputComment = <span class="string">''</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="请求发布"><a href="#请求发布" class="headerlink" title="请求发布"></a>请求发布</h3><p>基本思路：</p>
<ul>
<li>找到数据接口</li>
<li>封装请求方法</li>
<li>注册发布点击事件<ul>
<li>请求发布</li>
<li>成功：将发布的内容展示到列表中</li>
<li>失败：提示失败</li>
</ul>
</li>
</ul>
<p>1、封装数据接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布评论</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addComment = <span class="function"><span class="params">data</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/comments'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<p>2、给发布按钮点击事件</p>
<p>3、事件处理函数</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onAddComment () {</span><br><span class="line">  <span class="comment">// 1. 拿到数据</span></span><br><span class="line">  <span class="keyword">const</span> postMessage = <span class="built_in">this</span>.postMessage</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 非空校验</span></span><br><span class="line">  <span class="keyword">if</span> (!postMessage) {</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.$toast.loading({</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">0</span>, <span class="comment">// 持续展示 toast</span></span><br><span class="line">    <span class="attr">message</span>: <span class="string">'发布中...'</span>,</span><br><span class="line">    <span class="attr">forbidClick</span>: <span class="literal">true</span> <span class="comment">// 是否禁止背景点击</span></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 2. 请求提交</span></span><br><span class="line">    <span class="keyword">const</span> { data } = <span class="keyword">await</span> addComment({</span><br><span class="line">      <span class="attr">target</span>: <span class="built_in">this</span>.articleId, <span class="comment">// 评论的目标id（评论文章即为文章id，对评论进行回复则为评论id）</span></span><br><span class="line">      <span class="attr">content</span>: postMessage</span><br><span class="line">      <span class="comment">// art_id: // 文章id，对评论内容发表回复时，需要传递此参数，表明所属文章id。对文章进行评论，不要传此参数。</span></span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭发布评论的弹层</span></span><br><span class="line">    <span class="built_in">this</span>.isPostShow = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将最新发布的评论展示到列表的顶部</span></span><br><span class="line">    <span class="built_in">this</span>.articleComment.list.unshift(data.data.new_obj)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新文章评论的总数量</span></span><br><span class="line">    <span class="built_in">this</span>.articleComment.totalCount++</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空文本框</span></span><br><span class="line">    <span class="built_in">this</span>.postMessage = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.$toast.success(<span class="string">'发布成功'</span>)</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">this</span>.$toast.fail(<span class="string">'发布失败'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="发布成功处理"><a href="#发布成功处理" class="headerlink" title="发布成功处理"></a>发布成功处理</h3><h2 id="评论回复"><a href="#评论回复" class="headerlink" title="评论回复"></a>评论回复</h2><h3 id="准备回复弹层"><a href="#准备回复弹层" class="headerlink" title="准备回复弹层"></a>准备回复弹层</h3><p>一、在详情页中使用弹层用来展示文章的回复</p>
<p>1、在 data 中添加数据用来控制展示回复弹层的显示状态</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">isReplyShow</span>: <span class="literal">false</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、在详情页中添加使用弹层组件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 评论回复 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-popup</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"isReplyShow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">position</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"height: 95%"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  评论回复</span><br><span class="line"><span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /评论回复 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>二、当点击评论项组件中的回复按钮的时候展示弹层</p>
<p>1、在 <code>comment-item.vue</code> 组件中点击回复按钮的时候，对外发布自定义事件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-button</span><br><span class="line">  size="mini"</span><br><span class="line">  type="default"</span><br><span class="line">  @click="$emit('click-reply')"</span><br><span class="line">&gt;回复 {{ comment.reply_count }}&lt;/van-button&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>2、在详情页组件中使用的位置监听处理</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">comment-item</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"(comment, index) in articleComment.list"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:comment</span>=<span class="string">"comment"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click-reply</span>=<span class="string">"isReplyShow = true"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="点击回复显示弹出层"><a href="#点击回复显示弹出层" class="headerlink" title="点击回复显示弹出层"></a>点击回复显示弹出层</h3><h3 id="封装内容组件"><a href="#封装内容组件" class="headerlink" title="封装内容组件"></a>封装内容组件</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment-reply"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span> <span class="attr">:title</span>=<span class="string">"`${comment.reply_count}条回复`"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-icon</span></span></span><br><span class="line"><span class="tag">        <span class="attr">slot</span>=<span class="string">"left"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"cross"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"$emit('click-close')"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-nav-bar</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /导航栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 当前评论项 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /当前评论项 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"所有回复"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 评论的回复列表 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /评论的回复列表 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /底部 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'CommentReply'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="传递当前点击回复的评论项"><a href="#传递当前点击回复的评论项" class="headerlink" title="传递当前点击回复的评论项"></a>传递当前点击回复的评论项</h3><h3 id="处理头部"><a href="#处理头部" class="headerlink" title="处理头部"></a>处理头部</h3><h3 id="处理当前评论项"><a href="#处理当前评论项" class="headerlink" title="处理当前评论项"></a>处理当前评论项</h3><p>一、让 <code>comment-reply.vue</code> 组件拿到点击回复的评论对象</p>
<p>1、在 <code>comment-item.vue</code> 组件中点击回复按钮的时候把评论对象给传出来</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">"mini"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"default"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"$emit('click-reply', comment)"</span></span></span><br><span class="line"><span class="tag">&gt;</span>回复 {{ comment.reply_count }}<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>2、在文章详情组件中接收处理</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">currentComment</span>: {} <span class="comment">// 点击回复的那个评论对象</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">comment-item</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"(comment, index) in articleComment.list"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:comment</span>=<span class="string">"comment"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click-reply</span>=<span class="string">"onReplyShow"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onReplyShow (comment) {</span><br><span class="line">  <span class="comment">// 将子组件中传给我评论对象存储到当前组件</span></span><br><span class="line">  <span class="built_in">this</span>.currentComment = comment</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 展示评论回复弹层</span></span><br><span class="line">  <span class="built_in">this</span>.isReplyShow = <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>3、在详情组件中将 <code>currentComment</code> 传递给 <code>comment-reply.vue</code> 组件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 评论回复 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-popup</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"isReplyShow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">position</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"height: 95%"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comment-reply</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click-close</span>=<span class="string">"isReplyShow = false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:comment</span>=<span class="string">"currentComment"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /评论回复 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>4、在 <code>comment-reply.vue</code> 组件中声明接收</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">props: {</span><br><span class="line">  <span class="attr">comment</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Object</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<p>最后使用调试工具查看 props 数据是否接收正确。</p>
<p>二、在 <code>comment-reply.vue</code> 组件中展示当前评论</p>
<p>1、加载注册 <code>comment-item.vue</code> 组件</p>
<p>2、使用展示</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment-reply"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span> <span class="attr">:title</span>=<span class="string">"`${comment.reply_count}条回复`"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-icon</span></span></span><br><span class="line"><span class="tag">        <span class="attr">slot</span>=<span class="string">"left"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"cross"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"$emit('click-close')"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-nav-bar</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /导航栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 当前评论项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comment-item</span> <span class="attr">:comment</span>=<span class="string">"comment"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /当前评论项 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 评论的回复列表 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /评论的回复列表 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /底部 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>





<p>一：把点击回复的评论对象传递给评论回复组件</p>
<p>1、在 data 中添加一个数据用来存储点击回复的评论对象</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">data () {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">currentComment</span>: {} <span class="comment">// 存储当前点击回复的评论对象</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、在点击回复的处理函数中评论对象存储到数据中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> onReplyShow (comment) {</span><br><span class="line">+  <span class="built_in">this</span>.currentComment = comment</span><br><span class="line">  <span class="comment">// 显示回复的弹层</span></span><br><span class="line">  <span class="built_in">this</span>.isReplyShow = <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>3、把当前组件的 <code>currentComment</code> 传递给评论回复组件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 评论回复 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-popup</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"isReplyShow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">get-container</span>=<span class="string">"body"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">round</span></span></span><br><span class="line"><span class="tag">  <span class="attr">position</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:style</span>=<span class="string">"{ height: '90%' }"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 回复列表 --&gt;</span></span><br><span class="line">  + <span class="tag">&lt;<span class="name">comment-reply</span> <span class="attr">:comment</span>=<span class="string">"currentComment"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /回复列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 评论回复 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>4、在评论回复组件中声明 <code>props</code> 接收数据</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">props: {</span><br><span class="line">  <span class="attr">comment</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Object</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<p>测试：点击不同的评论回复按钮，查看子组件中的 props 数据 <code>comment</code> 是否是当前点击回复所在的评论对象。</p>
<p>二、数据绑定：在评论回复组件中展示当前评论</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">+</span><br><span class="line"><span class="tag">&lt;<span class="name">van-nav-bar</span> <span class="attr">:title</span>=<span class="string">"comment.reply_count + '条回复'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">slot</span>=<span class="string">"left"</span> <span class="attr">name</span>=<span class="string">"cross"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-nav-bar</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /导航栏 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当前评论 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"当前评论"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"icon"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">round</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"30"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">"30"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"margin-right: 10px;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:src</span>=<span class="string">"comment.aut_photo"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  + <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: #466b9d;"</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>{{ comment.aut_name }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    +</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: #363636;"</span>&gt;</span>{{ comment.content }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      +</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"margin-right: 10px;"</span></span></span><br><span class="line"><span class="tag">        &gt;</span>{{ comment.pubdate | relativeTime }}&lt;/span</span><br><span class="line">      &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">type</span>=<span class="string">"default"</span> +</span></span><br><span class="line"><span class="tag">        &gt;</span>回复 {{ comment.reply_count }}&lt;/van-button</span><br><span class="line">      &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">slot</span>=<span class="string">"right-icon"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /当前评论 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="展示评论回复列表"><a href="#展示评论回复列表" class="headerlink" title="展示评论回复列表"></a>展示评论回复列表</h3><p>基本思路：</p>
<ul>
<li>回复列表和文章的评论列表几乎是一样的</li>
<li>重用把之前封装的评论列表</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment-reply"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span> <span class="attr">:title</span>=<span class="string">"`${comment.reply_count}条回复`"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-icon</span></span></span><br><span class="line"><span class="tag">        <span class="attr">slot</span>=<span class="string">"left"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"cross"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"$emit('click-close')"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-nav-bar</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /导航栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 当前评论项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comment-item</span> <span class="attr">:comment</span>=<span class="string">"comment"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /当前评论项 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"所有回复"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 评论的回复列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-list</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:finished</span>=<span class="string">"finished"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">finished-text</span>=<span class="string">"没有更多了"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">load</span>=<span class="string">"onLoad"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comment-item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"(comment, index) in list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:comment</span>=<span class="string">"comment"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-list</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /评论的回复列表 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /底部 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> CommentItem <span class="keyword">from</span> <span class="string">'./comment-item'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> { getComments } <span class="keyword">from</span> <span class="string">'@/api/comment'</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'CommentReply'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {</span></span><br><span class="line"><span class="javascript">    CommentItem</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="attr">comment</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      <span class="attr">list</span>: [],</span></span><br><span class="line"><span class="javascript">      <span class="attr">loading</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">finished</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">offset</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">limit</span>: <span class="number">20</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> onLoad () {</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1. 请求获取数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> { data } = <span class="keyword">await</span> getComments({</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="string">'c'</span>, <span class="comment">// 评论类型，a-对文章(article)的评论，c-对评论(comment)的回复</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">source</span>: <span class="built_in">this</span>.comment.com_id.toString(), <span class="comment">// 源id，文章id或评论id</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">offset</span>: <span class="built_in">this</span>.offset, <span class="comment">// 获取评论数据的偏移量，值为评论id，表示从此id的数据向后取，不传表示从第一页开始读取数据</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">limit</span>: <span class="built_in">this</span>.limit <span class="comment">// 获取的评论数据个数，不传表示采用后端服务设定的默认每页数据量</span></span></span><br><span class="line"><span class="javascript">      })</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2. 将数据添加到列表中</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> { results } = data.data</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.list.push(...results)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3. 关闭 loading</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.loading = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 4. 判断数据是否加载完毕</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (results.length) {</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.offset = data.data.last_id</span></span><br><span class="line"><span class="javascript">      } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.finished = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h3 id="解决弹层中组件内容不更新问题"><a href="#解决弹层中组件内容不更新问题" class="headerlink" title="解决弹层中组件内容不更新问题"></a>解决弹层中组件内容不更新问题</h3><p>弹层组件：</p>
<ul>
<li>如果初始的条件是 false，则弹层的内容不会渲染</li>
<li>程序运行期间，当条件变为 true 的时候，弹层才渲染了内容</li>
<li>之后切换弹层的展示，弹层只是通过 CSS 控制隐藏和显示</li>
</ul>
<p>弹层渲染出来以后就只是简单的切换显示和隐藏，里面的内容也不再重新渲染了，所以会导致我们的评论的回复列表不会动态更新了。解决办法就是在每次弹层显示的时候重新渲染组件。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 评论回复 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-popup</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"isReplyShow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">get-container</span>=<span class="string">"body"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">round</span></span></span><br><span class="line"><span class="tag">  <span class="attr">position</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:style</span>=<span class="string">"{ height: '90%' }"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 回复列表 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comment-reply</span> <span class="attr">:comment</span>=<span class="string">"currentComment"</span> + <span class="attr">v-if</span>=<span class="string">"isReplyShow"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /回复列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 评论回复 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="发布回复"><a href="#发布回复" class="headerlink" title="发布回复"></a>发布回复</h3><h1 id="九、用户页面"><a href="#九、用户页面" class="headerlink" title="九、用户页面"></a>九、用户页面</h1><blockquote>
<p>该模块作为学生作业，不讲解，仅供源码参考。</p>
</blockquote>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200111104547462.png" alt="image-20200111104547462" width="250">



<h2 id="创建组件并配置路由-3"><a href="#创建组件并配置路由-3" class="headerlink" title="创建组件并配置路由"></a>创建组件并配置路由</h2><p>1、创建 <code>views/user/index.vue</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-container"</span>&gt;</span>用户页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'UserPage'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>2、配置到根路由</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">path</span>: <span class="string">'/user/:userId'</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'user'</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/user'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>最后访问 <code>/user/用户ID</code> 测试。</p>
<h2 id="页面布局-5"><a href="#页面布局-5" class="headerlink" title="页面布局"></a>页面布局</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"page-nav-bar"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">left-arrow</span></span></span><br><span class="line"><span class="tag">      <span class="attr">title</span>=<span class="string">"用户名"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click-left</span>=<span class="string">"$router.back()"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">van-nav-bar</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /导航栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-info"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"avatar"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">round</span></span></span><br><span class="line"><span class="tag">          <span class="attr">fit</span>=<span class="string">"cover"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">src</span>=<span class="string">"https://img.yzcdn.cn/vant/cat.jpeg"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right-area"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stats-wrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stats-item"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"count"</span>&gt;</span>66<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stats-item"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"count"</span>&gt;</span>88<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stats-item"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"count"</span>&gt;</span>28<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>粉丝<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stats-item"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"count"</span>&gt;</span>160<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>获赞<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">class</span>=<span class="string">"follow-btn"</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"label-info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bio-wrap"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label"</span>&gt;</span>简介：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>这是用户简介<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'UserIndex'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {</span></span><br><span class="line"><span class="javascript">    <span class="attr">userId</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: [<span class="built_in">Number</span>, <span class="built_in">String</span>, <span class="built_in">Object</span>],</span></span><br><span class="line"><span class="javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.user-container</span> {</span></span><br><span class="line"><span class="css">  <span class="selector-class">.user-info</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">25px</span> <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.base-info</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.avatar</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">155px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">155px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-right</span>: <span class="number">62px</span>;</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">    <span class="selector-class">.label-info</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.bio-wrap</span> {</span></span><br><span class="line"><span class="css">        <span class="selector-class">.label</span> {</span></span><br><span class="line"><span class="css">          <span class="attribute">color</span>: <span class="number">#646263</span>;</span></span><br><span class="line"><span class="css">        }</span></span><br><span class="line"><span class="css">        <span class="selector-class">.text</span> {</span></span><br><span class="line"><span class="css">          <span class="attribute">color</span>: <span class="number">#212121</span>;</span></span><br><span class="line"><span class="css">        }</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right-area</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: space-evenly;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.stats-wrap</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.stats-item</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.count</span> {</span></span><br><span class="line"><span class="css">          <span class="attribute">font-size</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">color</span>: <span class="number">#0d0a10</span>;</span></span><br><span class="line"><span class="css">        }</span></span><br><span class="line"><span class="css">        <span class="selector-class">.text</span> {</span></span><br><span class="line"><span class="css">          <span class="attribute">font-size</span>: <span class="number">21px</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">color</span>: <span class="number">#9c9b9d</span>;</span></span><br><span class="line"><span class="css">        }</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">    <span class="selector-class">.follow-btn</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">289px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">55px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">line-height</span>: <span class="number">55px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: <span class="number">#6bb5ff</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span> <span class="attr">title</span>=<span class="string">"黑马头条号"</span> <span class="attr">left-arrow</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /导航栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-info-container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"col1"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">fit</span>=<span class="string">"cover"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">round</span></span></span><br><span class="line"><span class="tag">          <span class="attr">src</span>=<span class="string">"https://img.yzcdn.cn/vant/cat.jpeg"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col2"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"count"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"count"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"count"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>粉丝<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"count"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>获赞<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"action"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag">            &gt;</span>私信<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">"default"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag">            &gt;</span>编辑资料<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>认证：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户的认证信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>简介：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户的简介信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /用户信息 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文章列表 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /文章列表 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'UserPage'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.user-container</span> {</span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.user-info-container</span> {</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">    &gt;<span class="selector-class">.row1</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.item</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.text</span> {</span></span><br><span class="line"><span class="css">          <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">        }</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">      &gt;<span class="selector-class">.col1</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">      &gt;<span class="selector-class">.col2</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: space-evenly;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">        &gt;<span class="selector-class">.row1</span> {</span></span><br><span class="line"><span class="css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">          <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">        }</span></span><br><span class="line"><span class="css">        <span class="selector-class">.action</span> {</span></span><br><span class="line"><span class="css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">          <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">          <span class="selector-class">.van-button</span> {</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">45%</span>;</span></span><br><span class="line"><span class="css">          }</span></span><br><span class="line"><span class="css">        }</span></span><br><span class="line"><span class="css">      }</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="展示用户信息"><a href="#展示用户信息" class="headerlink" title="展示用户信息"></a>展示用户信息</h2><p>步骤：</p>
<ul>
<li>封装数据接口</li>
<li>请求获取数据</li>
<li>模板绑定</li>
</ul>
<p>1、在 <code>api/user.js</code> 中添加获取指定用户信息的数据接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取指定用户信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getUserById = <span class="function"><span class="params">userId</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/app/v1_0/users/<span class="subst">${userId}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、在用户页面中请求获取数据</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">+ <span class="keyword">import</span> { getUserById } <span class="keyword">from</span> <span class="string">'@/api/user'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'UserPage'</span>,</span><br><span class="line">  <span class="attr">components</span>: {},</span><br><span class="line">  <span class="attr">props</span>: {},</span><br><span class="line">  data () {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">+      user: {} <span class="comment">// 用户信息</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">computed</span>: {},</span><br><span class="line">  <span class="attr">watch</span>: {},</span><br><span class="line">  created () {</span><br><span class="line">+    <span class="built_in">this</span>.loadUser()</span><br><span class="line">  },</span><br><span class="line">  mounted () {},</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">+++    <span class="keyword">async</span> loadUser () {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">const</span> { data } = <span class="keyword">await</span> getUserById(<span class="built_in">this</span>.$route.params.userId)</span><br><span class="line">        <span class="built_in">this</span>.user = data.data</span><br><span class="line">      } <span class="keyword">catch</span> (err) {</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">        <span class="built_in">this</span>.$toast(<span class="string">'获取用户数据失败'</span>)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>3、模板绑定</p>
<h2 id="用户关注"><a href="#用户关注" class="headerlink" title="用户关注"></a>用户关注</h2><h2 id="展示用户文章列表"><a href="#展示用户文章列表" class="headerlink" title="展示用户文章列表"></a>展示用户文章列表</h2><h3 id="列表组件"><a href="#列表组件" class="headerlink" title="列表组件"></a>列表组件</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-list</span><br><span class="line">  v-model="loading"</span><br><span class="line">  :finished="finished"</span><br><span class="line">  finished-text="没有更多了"</span><br><span class="line">  @load="onLoad"</span><br><span class="line">&gt;</span><br><span class="line">  &lt;van-cell</span><br><span class="line">    v-for="item in list"</span><br><span class="line">    :key="item"</span><br><span class="line">    :title="item"</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/van-list&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      list: [],</span><br><span class="line">      loading: false,</span><br><span class="line">      finished: false</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  methods: {</span><br><span class="line">    onLoad() {</span><br><span class="line">      // 异步更新数据</span><br><span class="line">      setTimeout(() =&gt; {</span><br><span class="line">        for (let i = 0; i &lt; 10; i++) {</span><br><span class="line">          this.list.push(this.list.length + 1);</span><br><span class="line">        }</span><br><span class="line">        // 加载状态结束</span><br><span class="line">        this.loading = false;</span><br><span class="line"></span><br><span class="line">        // 数据全部加载完成</span><br><span class="line">        if (this.list.length &gt;= 40) {</span><br><span class="line">          this.finished = true;</span><br><span class="line">        }</span><br><span class="line">      }, 500);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h3 id="分析列表组件使用"><a href="#分析列表组件使用" class="headerlink" title="分析列表组件使用"></a>分析列表组件使用</h3><p>List 的运行机制是什么？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">List 会监听浏览器的滚动事件并计算列表的位置，当列表底部与可视区域的距离小于offset时，List 会触发一次 load 事件。</span><br></pre></td></tr></tbody></table></figure>

<p>为什么 List 初始化后会立即触发 load 事件？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">List 初始化后会触发一次 load 事件，用于加载第一屏的数据，这个特性可以通过`immediate-check`属性关闭。</span><br></pre></td></tr></tbody></table></figure>

<p>为什么会连续触发 load 事件？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">如果一次请求加载的数据条数较少，导致列表内容无法铺满当前屏幕，List 会继续触发 load 事件，直到内容铺满屏幕或数据全部加载完成。因此你需要调整每次获取的数据条数，理想情况下每次请求获取的数据条数应能够填满一屏高度。</span><br></pre></td></tr></tbody></table></figure>

<p>loading 和 finished 分别是什么含义？</p>
<blockquote>
<p><code>List</code>有以下三种状态，理解这些状态有助于你正确地使用<code>List</code>组件：</p>
<ul>
<li>非加载中，<code>loading</code>为<code>false</code>，此时会根据列表滚动位置判断是否触发<code>load</code>事件（列表内容不足一屏幕时，会直接触发）</li>
<li>加载中，<code>loading</code>为<code>true</code>，表示正在发送异步请求，此时不会触发<code>load</code>事件</li>
<li>加载完成，<code>finished</code>为<code>true</code>，此时不会触发<code>load</code>事件</li>
</ul>
<p>在每次请求完毕后，需要手动将<code>loading</code>设置为<code>false</code>，表示本次 load 加载结束</p>
</blockquote>
<p>使用 float 布局后一直触发加载？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">若 List 的内容使用了 float 布局，可以在容器上添加van-clearfix类名来清除浮动，使得 List 能正确判断元素位置</span><br></pre></td></tr></tbody></table></figure>

<h3 id="展示文章列表"><a href="#展示文章列表" class="headerlink" title="展示文章列表"></a>展示文章列表</h3><p>1、封装获取用户文章列表的数据接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定用户的文章列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getArticlesByUser = <span class="function">(<span class="params">userId, params</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/app/v1_0/users/<span class="subst">${userId}</span>/articles`</span>,</span><br><span class="line">    params</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、在用户页面中请求获取数据</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { getUserById } <span class="keyword">from</span> <span class="string">'@/api/user'</span></span><br><span class="line">+ <span class="keyword">import</span> { getArticlesByUser } <span class="keyword">from</span> <span class="string">'@/api/article'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'UserPage'</span>,</span><br><span class="line">  <span class="attr">components</span>: {},</span><br><span class="line">  <span class="attr">props</span>: {},</span><br><span class="line">  data () {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">user</span>: {}, <span class="comment">// 用户信息</span></span><br><span class="line">      <span class="attr">list</span>: [], <span class="comment">// 列表数据</span></span><br><span class="line">      <span class="attr">loading</span>: <span class="literal">false</span>, <span class="comment">// 控制上拉加载更多的 loading</span></span><br><span class="line">      <span class="attr">finished</span>: <span class="literal">false</span>, <span class="comment">// 控制是否加载结束了</span></span><br><span class="line">+      page: <span class="number">1</span> <span class="comment">// 获取下一页数据的页码</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">computed</span>: {},</span><br><span class="line">  <span class="attr">watch</span>: {},</span><br><span class="line">  created () {</span><br><span class="line">    <span class="built_in">this</span>.loadUser()</span><br><span class="line">  },</span><br><span class="line">  mounted () {},</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="keyword">async</span> loadUser () {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">const</span> { data } = <span class="keyword">await</span> getUserById(<span class="built_in">this</span>.$route.params.userId)</span><br><span class="line">        <span class="built_in">this</span>.user = data.data</span><br><span class="line">      } <span class="keyword">catch</span> (err) {</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">        <span class="built_in">this</span>.$toast(<span class="string">'获取用户数据失败'</span>)</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">+++    <span class="keyword">async</span> onLoad () {</span><br><span class="line">      <span class="comment">// 1. 请求获取数据</span></span><br><span class="line">      <span class="keyword">const</span> { data } = <span class="keyword">await</span> getArticlesByUser(<span class="built_in">this</span>.$route.params.userId, {</span><br><span class="line">        <span class="attr">page</span>: <span class="built_in">this</span>.page, <span class="comment">// 可选的，默认是第 1 页</span></span><br><span class="line">        <span class="attr">per_page</span>: <span class="number">20</span> <span class="comment">// 可选的，默认每页 10 条</span></span><br><span class="line">      })</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 把数据添加到列表中</span></span><br><span class="line">      <span class="comment">// list []</span></span><br><span class="line">      <span class="comment">// data.data.results []</span></span><br><span class="line">      <span class="comment">// ...[1, 2, 3] 会把数组给展开，所谓的展开就是一个一个的拿出来</span></span><br><span class="line">      <span class="keyword">const</span> { results } = data.data</span><br><span class="line">      <span class="built_in">this</span>.list.push(...results)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. 加载状态结束</span></span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. 判断数据是否全部加载完毕</span></span><br><span class="line">      <span class="keyword">if</span> (results.length) {</span><br><span class="line">        <span class="built_in">this</span>.page++ <span class="comment">// 更新获取下一页数据的页码</span></span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">this</span>.finished = <span class="literal">true</span> <span class="comment">// 没有数据了，不需要加载更多了</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="十、编辑用户资料"><a href="#十、编辑用户资料" class="headerlink" title="十、编辑用户资料"></a>十、编辑用户资料</h1><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1566431661910.png" width="300">



<h2 id="创建组件并配置路由-4"><a href="#创建组件并配置路由-4" class="headerlink" title="创建组件并配置路由"></a>创建组件并配置路由</h2><p>1、创建 <code>views/user/index.vue</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span> <span class="attr">title</span>=<span class="string">"个人信息"</span> <span class="attr">left-arrow</span> <span class="attr">right-text</span>=<span class="string">"保存"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"头像"</span> <span class="attr">is-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">          <span class="attr">round</span></span></span><br><span class="line"><span class="tag">          <span class="attr">width</span>=<span class="string">"30"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">height</span>=<span class="string">"30"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">fit</span>=<span class="string">"cover"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">src</span>=<span class="string">"http://toutiao.meiduo.site/FgSTA3msGyxp5-Oufnm5c0kjVgW7"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"昵称"</span> <span class="attr">value</span>=<span class="string">"abc"</span> <span class="attr">is-link</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"性别"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">is-link</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"生日"</span> <span class="attr">value</span>=<span class="string">"2019-9-27"</span> <span class="attr">is-link</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">"UserIndex"</span></span></span><br><span class="line"><span class="javascript">  };</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>2、将该页面配置到根路由</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'user-profile'</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">'/user/profile'</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/user-profile'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="页面布局-6"><a href="#页面布局-6" class="headerlink" title="页面布局"></a>页面布局</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-profile"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"page-nav-bar"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">title</span>=<span class="string">"个人信息"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">left-arrow</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click-left</span>=<span class="string">"$router.back()"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /导航栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 个人信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">class</span>=<span class="string">"avatar-cell"</span> <span class="attr">title</span>=<span class="string">"头像"</span> <span class="attr">is-link</span> <span class="attr">center</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"avatar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">round</span></span></span><br><span class="line"><span class="tag">        <span class="attr">fit</span>=<span class="string">"cover"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">"https://img.yzcdn.cn/vant/cat.jpeg"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"昵称"</span> <span class="attr">value</span>=<span class="string">"内容"</span> <span class="attr">is-link</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"性别"</span> <span class="attr">value</span>=<span class="string">"内容"</span> <span class="attr">is-link</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"生日"</span> <span class="attr">value</span>=<span class="string">"内容"</span> <span class="attr">is-link</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /个人信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">'UserProfile'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: {},</span></span><br><span class="line"><span class="javascript">  data () {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {}</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: {},</span></span><br><span class="line"><span class="javascript">  created () {},</span></span><br><span class="line"><span class="javascript">  mounted () {},</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: {}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.user-profile</span> {</span></span><br><span class="line"><span class="css">  <span class="selector-class">.avatar-cell</span> {</span></span><br><span class="line"><span class="css">    <span class="selector-class">.van-cell__value</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">      <span class="attribute">flex-direction</span>: row-reverse;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">    <span class="selector-class">.avatar</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css">}</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h2 id="展示用户信息-1"><a href="#展示用户信息-1" class="headerlink" title="展示用户信息"></a>展示用户信息</h2><p>思路：</p>
<ul>
<li>找到数据接口</li>
<li>封装请求方法</li>
<li>请求获取数据</li>
<li>模板绑定</li>
</ul>
<p>1、在 <code>api/user.js</code> 中添加封装数据接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>2、在 <code>views/user/index.vue</code> 组件中请求获取数据</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>3、模板绑定</p>
<h2 id="修改昵称"><a href="#修改昵称" class="headerlink" title="修改昵称"></a>修改昵称</h2><p>一、准备弹出层</p>
<p>二、封装组件</p>
<p>三、页面布局</p>
<p>四、基本功能处理</p>
<p>五、更新完成</p>
<h2 id="修改性别"><a href="#修改性别" class="headerlink" title="修改性别"></a>修改性别</h2><h2 id="修改生日"><a href="#修改生日" class="headerlink" title="修改生日"></a>修改生日</h2><h2 id="修改头像"><a href="#修改头像" class="headerlink" title="修改头像"></a>修改头像</h2><h3 id="图片上传预览"><a href="#图片上传预览" class="headerlink" title="图片上传预览"></a>图片上传预览</h3><p>方式一：结合服务器的图片上传预览</p>
<p><img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/1567067894388.png" alt="1567067894388"></p>
<p>方式二：纯客户端实现上传图片预览</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取文文件对象</span></span><br><span class="line"><span class="keyword">const</span> file = fileInput.files[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置图片的 src</span></span><br><span class="line">img.src = <span class="built_in">window</span>.URL.createObjectURL(file)</span><br></pre></td></tr></tbody></table></figure>

<p>客户端上传预览示例：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>客户端图片上传预览示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.img-wrap</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">img</span> {</span></span><br><span class="line"><span class="css">      <span class="attribute">max-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>客户端图片上传预览示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">onchange</span>=<span class="string">"onFileChange()"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> img = <span class="built_in">document</span>.querySelector(<span class="string">'#img'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> file = <span class="built_in">document</span>.querySelector(<span class="string">'#file'</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">onFileChange</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 得到 file-input 的文件对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> fileObj = file.files[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> data = <span class="built_in">window</span>.URL.createObjectURL(fileObj)</span></span><br><span class="line"><span class="javascript">      img.src = data</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>接下来就是在项目中使用纯客户端的方式处理用户头像上传预览。</p>
<p>在 <code>views/user/index.vue</code> 组件中：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span> <span class="attr">title</span>=<span class="string">"个人信息"</span> <span class="attr">left-arrow</span> <span class="attr">right-text</span>=<span class="string">"保存"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line">      +</span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"头像"</span> <span class="attr">is-link</span> @<span class="attr">click</span>=<span class="string">"onChangePhoto"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-image</span> <span class="attr">round</span> <span class="attr">width</span>=<span class="string">"30"</span> <span class="attr">height</span>=<span class="string">"30"</span> <span class="attr">:src</span>=<span class="string">"user.photo"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"昵称"</span> <span class="attr">:value</span>=<span class="string">"user.name"</span> <span class="attr">is-link</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"性别"</span> <span class="attr">:value</span>=<span class="string">"user.gender === 0 ? '男' : '女'"</span> <span class="attr">is-link</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"生日"</span> <span class="attr">:value</span>=<span class="string">"user.birthday"</span> <span class="attr">is-link</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      表单元素的 hidden 表示隐藏这个表单元素</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    + <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">hidden</span> <span class="attr">ref</span>=<span class="string">"file"</span> @<span class="attr">change</span>=<span class="string">"onFileChange"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> { getProfile } <span class="keyword">from</span> <span class="string">'@/api/user'</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">'UserIndex'</span>,</span></span><br><span class="line"><span class="javascript">    data () {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">        <span class="attr">user</span>: {}</span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    created () {</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.loadUserProfile()</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">async</span> loadUserProfile () {</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> { data } = <span class="keyword">await</span> getProfile()</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.user = data.data</span></span><br><span class="line"><span class="javascript">      },</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  +    onChangePhoto () {</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.file.click()</span></span><br><span class="line"><span class="javascript">      },</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  +    onFileChange () {</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.user.photo = <span class="built_in">window</span>.URL.createObjectURL(<span class="built_in">this</span>.$refs.file.files[<span class="number">0</span>])</span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>


<h3 id="头像裁切"><a href="#头像裁切" class="headerlink" title="头像裁切"></a>头像裁切</h3><p>方案一：结合服务端的图片裁切上传流程</p>
<img src="/2021/06/20/vue%E5%BA%94%E7%94%A82-vue%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E4%BB%BF%E5%A4%B4%E6%9D%A1demo/image-20200418015503681.png" alt="image-20200418015503681">

<p>方案二：纯客户端的图片裁切上传流程</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/file">&lt;input type=”file”&gt;</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/Using_files_from_web_applications">在web应用程序中使用文件</a></li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">viewMode: 1,</span><br><span class="line">dragMode: 'move',</span><br><span class="line">aspectRatio: 1,</span><br><span class="line">autoCropArea: 1,</span><br><span class="line">cropBoxMovable: false,</span><br><span class="line">cropBoxResizable: false,</span><br><span class="line">background: false,</span><br><span class="line">movable: true</span><br></pre></td></tr></tbody></table></figure>



<h3 id="保存更新"><a href="#保存更新" class="headerlink" title="保存更新"></a>保存更新</h3><p>如果是基于服务端的裁切，则使用：<a href="https://github.com/fengyuanchen/cropperjs#getdatarounded">getData</a> 方法，该方法得到裁切的区域参数。</p>
<p>如果是纯客户端的图片裁切，则使用：<a href="https://github.com/fengyuanchen/cropperjs#getcroppedcanvasoptions">getCroppedCanvas</a> 方法，该方法得到裁切之后的图片对象（类似于URL.createObjectURL 方法得到的文件对象）。</p>
<p>步骤：</p>
<ul>
<li>封装接口</li>
<li>请求提交</li>
<li>更新视图</li>
</ul>
<p>1、在 <code>api/user.js</code> 中添加封装数据接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、接口重用</span></span><br><span class="line"><span class="comment"> * 2、接口维护</span></span><br><span class="line"><span class="comment"> * 实际开发过程中，接口经常容易变化，</span></span><br><span class="line"><span class="comment"> * 你能记住你在哪里请求了这个接口吗？很难记住</span></span><br><span class="line"><span class="comment"> * 怎么办呢？</span></span><br><span class="line"><span class="comment"> *  我们单独的把接口请求的代码封装起来，统一的放到一起。</span></span><br><span class="line"><span class="comment"> * 放到哪里呢？</span></span><br><span class="line"><span class="comment"> *  我们放到项目的 api 目录中，</span></span><br><span class="line"><span class="comment"> *  根据接口的种类进行归类管理</span></span><br><span class="line"><span class="comment"> *  例如用户相关的接口放到 user.js 中</span></span><br><span class="line"><span class="comment"> *      文章相关的接口放到 article.js 中</span></span><br><span class="line"><span class="comment"> * 如何封装呢？</span></span><br><span class="line"><span class="comment"> *  一个函数，接收参数，返回请求结果就可以了。</span></span><br><span class="line"><span class="comment"> * 用户接口相关请求模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 登录</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span> (<span class="params">user</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="comment">// method 用来指定请求方法，这是 axios 的固定 API，不能瞎写</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>,</span><br><span class="line">    <span class="comment">// url 用来指定请求路径</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/authorizations'</span>,</span><br><span class="line">    <span class="comment">// data 是 axios 请求要求的字段名，用来传递请求体数据的</span></span><br><span class="line">    <span class="attr">data</span>: user</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关注用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">followUser</span> (<span class="params">userId</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/user/followings'</span>,</span><br><span class="line">    <span class="attr">data</span>: {</span><br><span class="line">      <span class="attr">target</span>: userId <span class="comment">// 用户id</span></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消关注用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">unFollowUser</span> (<span class="params">userId</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'DELETE'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/user/followings/'</span> + userId</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户自己信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSelf</span> (<span class="params">userId</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/user'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户个人资料</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getProfile</span> (<span class="params">userId</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/user/profile'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新用户头像</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateUserPhoto</span> (<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'PATCH'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/app/v1_0/user/photo'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>2、在 <code>views/user/index.vue</code> 组件中保存提交</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span></span></span><br><span class="line"><span class="tag">      <span class="attr">title</span>=<span class="string">"个人信息"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">left-arrow</span></span></span><br><span class="line"><span class="tag">      <span class="attr">right-text</span>=<span class="string">"保存"</span></span></span><br><span class="line"><span class="tag">      +</span></span><br><span class="line"><span class="tag">      @<span class="attr">click-right</span>=<span class="string">"onSave"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"头像"</span> <span class="attr">is-link</span> @<span class="attr">click</span>=<span class="string">"onChangePhoto"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">van-image</span> <span class="attr">round</span> <span class="attr">width</span>=<span class="string">"30"</span> <span class="attr">height</span>=<span class="string">"30"</span> <span class="attr">:src</span>=<span class="string">"user.photo"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"昵称"</span> <span class="attr">:value</span>=<span class="string">"user.name"</span> <span class="attr">is-link</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"性别"</span> <span class="attr">:value</span>=<span class="string">"user.gender === 0 ? '男' : '女'"</span> <span class="attr">is-link</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">title</span>=<span class="string">"生日"</span> <span class="attr">:value</span>=<span class="string">"user.birthday"</span> <span class="attr">is-link</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      表单元素的 hidden 表示隐藏这个表单元素</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">hidden</span> <span class="attr">ref</span>=<span class="string">"file"</span> @<span class="attr">change</span>=<span class="string">"onFileChange"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  + <span class="keyword">import</span> { getProfile, updateUserPhoto } <span class="keyword">from</span> <span class="string">'@/api/user'</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">'UserIndex'</span>,</span></span><br><span class="line"><span class="javascript">    data () {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">        <span class="attr">user</span>: {}</span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    created () {</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.loadUserProfile()</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">async</span> loadUserProfile () {</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> { data } = <span class="keyword">await</span> getProfile()</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.user = data.data</span></span><br><span class="line"><span class="javascript">      },</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      onChangePhoto () {</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.file.click()</span></span><br><span class="line"><span class="javascript">      },</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      onFileChange () {</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> fileObj = <span class="built_in">this</span>.$refs.file.files[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (fileObj) {</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.user.photo = <span class="built_in">window</span>.URL.createObjectURL(fileObj)</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">      },</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  +    <span class="keyword">async</span> onSave () {</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果 Content-Type 要求是  application/json  ，则 data 传普通对象 {}</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果 Content-Type 要求是  multipart/form-data ，则 data 传 FormData 对象</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 纵观所有数据接口，你会发现大多数的接口都要求 Content-Type 要求是  application/json</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 一般只有涉及到文件上传的数据接口才要求Content-Type 要求是  multipart/form-data</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这个时候传递一个 FormData 对象</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$toast.loading({</span></span><br><span class="line"><span class="javascript">          <span class="attr">duration</span>: <span class="number">0</span>, <span class="comment">// 持续展示 toast</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">forbidClick</span>: <span class="literal">true</span>, <span class="comment">// 禁用背景点击</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">loadingType</span>: <span class="string">'spinner'</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">message</span>: <span class="string">'保存中'</span></span></span><br><span class="line"><span class="javascript">        })</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">try</span> {</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData()</span></span><br><span class="line"><span class="javascript">          <span class="comment">// formData.append('名字', 数据)</span></span></span><br><span class="line"><span class="javascript">          formData.append(<span class="string">'photo'</span>, <span class="built_in">this</span>.$refs.file.files[<span class="number">0</span>])</span></span><br><span class="line"><span class="javascript">          <span class="keyword">await</span> updateUserPhoto(formData)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$toast.success(<span class="string">'保存成功'</span>)</span></span><br><span class="line"><span class="javascript">        } <span class="keyword">catch</span> (err) {</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(err)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$toast.fail(<span class="string">'保存失败'</span>)</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>










]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue应用</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue应用3—HR-saas中台系统</title>
    <url>/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-项目设计"><a href="#1-项目设计" class="headerlink" title="1.项目设计"></a>1.项目设计</h1><p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200810012833240.png" alt="image-20200810012833240"></p>
<h1 id="1-人力资源的环境搭建"><a href="#1-人力资源的环境搭建" class="headerlink" title="1.人力资源的环境搭建"></a>1.人力资源的环境搭建</h1><h2 id="vue-element-admin的了解和介绍"><a href="#vue-element-admin的了解和介绍" class="headerlink" title="vue-element-admin的了解和介绍"></a>vue-element-admin的了解和介绍</h2><p><strong><code>目标</code></strong>: 学习和了解通用的vue后台集成方案**<code>vue-element-admin</code>**</p>
<p><a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/">vue-element-admin</a> 是一个后台前端解决方案，它基于 <a href="https://github.com/vuejs/vue">vue</a> 和 <a href="https://github.com/ElemeFE/element">element-ui</a>实现。它使用了最新的前端技术栈，内置了 i18 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级中后台产品原型。</p>
<p><a href="http://panjiachen.github.io/vue-element-admin">vue-element-admin</a> 是一个后台集成方案, 集成了PC项目中很多的业务场景和功能, 尤其在当下SPA的趋势下,我们可以从中获得很多成熟的解决方案.</p>
<blockquote>
<p><a href="http://panjiachen.github.io/vue-element-admin">vue-element-admin</a> 有一个成熟的<a href="https://github.com/PanJiaChen/vue-element-admin">集成方案</a>，里面包含了所有的业务功能和场景,并不适合直接拿来进行二次开发, 但是可以通过该项目中的一个案例来进行学习和使用.</p>
</blockquote>
<p>这里是<a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/">官网地址</a></p>
<p>这里是<a href="https://panjiachen.github.io/vue-element-admin/#/dashboard">线上demo地址</a></p>
<blockquote>
<p>如果你想查看该项目的具体功能和效果，可以拉取代码，启动进行预览￥ </p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/PanJiaChen/vue-element-admin.git  <span class="comment">#拉取代码</span></span><br><span class="line">$ <span class="built_in">cd</span> vue-element-admin <span class="comment">#切换到具体目录下</span></span><br><span class="line">$ npm run dev  <span class="comment">#启动开发调试模式  查看package.json文件的scripts可知晓启动命令</span></span><br></pre></td></tr></tbody></table></figure>

<p>**<code>注意</code>**：当前项目下载速度如果过慢，可以直接下载代码的压缩包运行</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200703173319390.png" alt="image-20200703173319390"></p>
<blockquote>
<p>集成方案并不适合我们直接拿来进行二次开发，<a href="https://github.com/PanJiaChen/vue-admin-template">基础模板</a>则是一个更好的选择</p>
</blockquote>
<p>基础模板, 包含了基本的 <strong>登录 / 鉴权 / 主页布局</strong> 的一些基础功能模板, 我们可以直接在该模板上进行功能的扩展和项目的二次开发</p>
<p>**<code>本节任务</code>**： 浏览vue-element-admin的文档，了解这个集成方案</p>
<h2 id="搭建项目前的一些基本准备"><a href="#搭建项目前的一些基本准备" class="headerlink" title="搭建项目前的一些基本准备"></a>搭建项目前的一些基本准备</h2><p><strong><code>目标</code></strong>: 介绍搭建一个vue中台项目,需要环境和工具</p>
<blockquote>
<p>接下来要做的是一个大型的项目，我们需要更好的环境准备和资源前置，所以提前检查我们的环境和资源</p>
</blockquote>
<p><strong>nodejs环境</strong></p>
<blockquote>
<p>nodejs是当下前端工程化开发必不可少的环境, 使用 nodejs的**<code>npm</code>**功能来管理依赖包</p>
</blockquote>
<p>查看node 和 npm的版本</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ node -v <span class="comment">#查看node版本</span></span><br><span class="line">$ npm  -v <span class="comment">#查看npm版本</span></span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200706130603160.png" alt="image-20200706130603160"></p>
<p><strong>git版本控制</strong></p>
<blockquote>
<p>git版本控制工具是目前最为流行的分布式版本管理工具,代码的**<code>提交, 检出, 日志</code>**, 都需要通过git完成</p>
</blockquote>
<p>查看git安装版本</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git --version <span class="comment">#查看git安装版本</span></span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200706131337563.png" alt="image-20200706131337563"></p>
<p><strong>npm淘宝镜像</strong></p>
<blockquote>
<p>npm是非常重要的npm管理工具,由于npm的服务器位于国外, 所以一般建议 将 npm设置成国内的淘宝镜像</p>
</blockquote>
<p>设置淘宝镜像</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> registry  https://registry.npm.taobao.org/  <span class="comment">#设置淘宝镜像地址</span></span><br><span class="line">$ npm config get registry  <span class="comment">#查看镜像地址</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>vscode编辑器</strong></p>
<blockquote>
<p>vscode编辑器是目前前端开发的编码利器， 以及丰富的插件系统，非常适合开发前端项目 </p>
</blockquote>
<p>vscode编辑器插件 + <strong><code>vetur</code></strong> + <strong><code>eslint</code></strong></p>
<blockquote>
<p>vetur是基于 单文件组件开发的支持插件, eslint是 基于代码校验的插件工具</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200706134607517.png" alt="image-20200706134607517"></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200706134614330.png" alt="image-20200706134614330"></p>
<p>除此之外, eslint需要在vscode中进行一些参数的配置</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{ </span><br><span class="line">    <span class="attr">"eslint.enable"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"eslint.run"</span>: <span class="string">"onType"</span>,</span><br><span class="line">    <span class="attr">"eslint.options"</span>: {</span><br><span class="line">        <span class="attr">"extensions"</span>: [</span><br><span class="line">            <span class="string">".js"</span>,</span><br><span class="line">            <span class="string">".vue"</span>,</span><br><span class="line">            <span class="string">".jsx"</span>,</span><br><span class="line">            <span class="string">".tsx"</span></span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"editor.codeActionsOnSave"</span>: {</span><br><span class="line">        <span class="attr">"source.fixAll.eslint"</span>: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>本项目的技术栈 本项目技术栈基于 <a href="http://es6.ruanyifeng.com/">ES2015+</a>、<a href="https://cn.vuejs.org/index.html">vue</a>、<a href="https://vuex.vuejs.org/zh-cn/">vuex</a>、<a href="https://router.vuejs.org/zh-cn/">vue-router</a> 、<a href="https://github.com/vuejs/vue-cli">vue-cli</a> 、<a href="https://github.com/axios/axios">axios</a> 和 <a href="https://github.com/ElemeFE/element">element-ui</a></p>
</blockquote>
<p>**<code>本节任务</code>**： 大家检查各自的开发环境和资源，尤其是npm的淘宝镜像额外需要注意</p>
<h2 id="项目模板启动和目录介绍"><a href="#项目模板启动和目录介绍" class="headerlink" title="项目模板启动和目录介绍"></a>项目模板启动和目录介绍</h2><p><strong><code>目标</code></strong>: 拉取项目的基础模板,并对目录进行介绍</p>
<blockquote>
<p>vue-element-admin的基础 模板和我们之前开发的项目一样吗 ？本章节，我们对该项目目录进行一下介绍</p>
</blockquote>
<p><strong>git拉取基础项目模板</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span>  https://github.com/PanJiaChen/vue-admin-template.git  hrsaas <span class="comment">#拉取基础模板到hrsaas目录</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>安装项目依赖</strong>（定位到项目目录下）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm install  <span class="comment">#安装依赖</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>启动项目</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm run dev <span class="comment">#启动开发模式的服务</span></span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200708010741325.png" alt="image-20200708010741325"></p>
<p>项目运行完毕，浏览器会自动打开基础模板的登录页，如上图</p>
<p><strong>目录结构</strong></p>
<p>本项目已经为你生成了一个基本的开发框架，提供了涵盖中后台开发的各类功能和坑位，下面是整个项目的目录结构。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">├── build                      <span class="comment"># 构建相关</span></span><br><span class="line">├── mock                       <span class="comment"># 项目mock 模拟数据</span></span><br><span class="line">├── public                     <span class="comment"># 静态资源</span></span><br><span class="line">│   │── favicon.ico            <span class="comment"># favicon图标</span></span><br><span class="line">│   └── index.html             <span class="comment"># html模板</span></span><br><span class="line">├── src                        <span class="comment"># 源代码</span></span><br><span class="line">│   ├── api                    <span class="comment"># 所有请求</span></span><br><span class="line">│   ├── assets                 <span class="comment"># 主题 字体等静态资源</span></span><br><span class="line">│   ├── components             <span class="comment"># 全局公用组件</span></span><br><span class="line">│   ├── icons                  <span class="comment"># 项目所有 svg icons</span></span><br><span class="line">│   ├── layout                 <span class="comment"># 全局 layout</span></span><br><span class="line">│   ├── router                 <span class="comment"># 路由</span></span><br><span class="line">│   ├── store                  <span class="comment"># 全局 store管理</span></span><br><span class="line">│   ├── styles                 <span class="comment"># 全局样式</span></span><br><span class="line">│   ├── utils                  <span class="comment"># 全局公用方法</span></span><br><span class="line">│   ├── vendor                 <span class="comment"># 公用vendor</span></span><br><span class="line">│   ├── views                  <span class="comment"># views 所有页面</span></span><br><span class="line">│   ├── App.vue                <span class="comment"># 入口页面</span></span><br><span class="line">│   ├── main.js                <span class="comment"># 入口文件 加载组件 初始化等</span></span><br><span class="line">│   └── permission.js          <span class="comment"># 权限管理</span></span><br><span class="line">│   └── settings.js          <span class="comment"># 配置文件</span></span><br><span class="line">├── tests                      <span class="comment"># 测试</span></span><br><span class="line">├── .env.xxx                   <span class="comment"># 环境变量配置</span></span><br><span class="line">├── .eslintrc.js               <span class="comment"># eslint 配置项</span></span><br><span class="line">├── .babelrc                   <span class="comment"># babel-loader 配置</span></span><br><span class="line">├── .travis.yml                <span class="comment"># 自动化CI配置</span></span><br><span class="line">├── vue.config.js              <span class="comment"># vue-cli 配置</span></span><br><span class="line">├── postcss.config.js          <span class="comment"># postcss 配置</span></span><br><span class="line">└── package.json               <span class="comment"># package.json</span></span><br></pre></td></tr></tbody></table></figure>

<p>此时,你可能会<strong>眼花缭乱</strong>, 因为生成的目录里面有太多的文件 我们在做项目时 其中最关注的就是**<code>src</code>**目录, 里面是所有的源代码和资源, 至于其他目录, 都是对项目的环境和工具的配置</p>
<p>**<code>本节任务</code>**： 按照操作和讲解步骤，进行拉取代码，安装依赖，运行项目，阅读目录和文件的操作</p>
<p><strong><code>本节注意</code></strong> 需要注意自己的npm是否已经设置了淘宝镜像</p>
<h2 id="项目运行机制和代码注释"><a href="#项目运行机制和代码注释" class="headerlink" title="项目运行机制和代码注释"></a>项目运行机制和代码注释</h2><p><strong><code>目标</code></strong>: 了解当前模板的基本运行机制和基础架构</p>
<blockquote>
<p>眼花缭乱的目录和文件到底是怎么工作的？ 我们进行一下最基本的讲解，帮助大家更好的去理解和开发</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">├── src                        <span class="comment"># 源代码</span></span><br><span class="line">│   ├── api                    <span class="comment"># 所有请求</span></span><br><span class="line">│   ├── assets                 <span class="comment"># 主题 字体等静态资源</span></span><br><span class="line">│   ├── components             <span class="comment"># 全局公用组件</span></span><br><span class="line">│   ├── icons                  <span class="comment"># 项目所有 svg icons</span></span><br><span class="line">│   ├── layout                 <span class="comment"># 全局 layout</span></span><br><span class="line">│   ├── router                 <span class="comment"># 路由</span></span><br><span class="line">│   ├── store                  <span class="comment"># 全局 store管理</span></span><br><span class="line">│   ├── styles                 <span class="comment"># 全局样式</span></span><br><span class="line">│   ├── utils                  <span class="comment"># 全局公用方法</span></span><br><span class="line">│   ├── vendor                 <span class="comment"># 公用vendor</span></span><br><span class="line">│   ├── views                  <span class="comment"># views 所有页面</span></span><br><span class="line">│   ├── App.vue                <span class="comment"># 入口页面</span></span><br><span class="line">│   ├── main.js                <span class="comment"># 入口文件 加载组件 初始化等</span></span><br><span class="line">│   └── permission.js          <span class="comment"># 权限管理</span></span><br><span class="line">│   └── settings.js            <span class="comment"># 配置文件</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a><strong>main.js</strong></h3><p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200824153141764.png" alt="image-20200824153141764"></p>
<p>请注释掉**<code>mock数据</code><strong>的部分，删除src下的</strong><code>mock</code>**文件夹，我们开发的时候用不到模拟数据，如图</p>
<p>同时，请注释掉**<code>vue.config.js</code>**中的  <strong>before: require(‘./mock/mock-server.js’)</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200811013813693.png" alt="image-20200811013813693"></p>
<h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a><strong>App.vue</strong></h3><p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200824155103340.png" alt="image-20200824155103340"></p>
<h3 id="permission-js"><a href="#permission-js" class="headerlink" title="permission.js"></a><strong>permission.js</strong></h3><blockquote>
<p>src下，除了main.js还有两个文件，**<code>permission.js</code>** 和**<code>settings.js</code>**</p>
</blockquote>
<p><strong><code>permission.js</code></strong> 是控制页面登录权限的文件， 此处的代码没有经历构建过程会很难理解， 所以先将此处的代码进行注释，等我们构建权限功能时，再从0到1进行构建。</p>
<p><strong>注释代码</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200708014558617.png" alt="image-20200708014558617"></p>
<blockquote>
<p>**<code>settings.js</code><strong>则是对于一些项目信息的配置，里面有三个属性 <strong><code>title</code></strong>(项目名称)，</strong><code>fixedHeader</code><strong>（固定头部），</strong><code>sidebarLogo</code>**（显示左侧菜单logo）</p>
</blockquote>
<p>**<code>settings.js</code>**中的文件在其他的位置会引用到，所以这里暂时不去对该文件进行变动</p>
<h3 id="Vuex结构"><a href="#Vuex结构" class="headerlink" title="Vuex结构"></a><strong>Vuex结构</strong></h3><blockquote>
<p>当前的Vuex结构采用了模块形式进行管理共享状态，其架构如下</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200824165153331.png" alt="image-20200824165153331"></p>
<blockquote>
<p>其中app.js模块和settings.js模块，功能已经完备，不需要再进行修改。 user.js模块是我们后期需要重点开发的内容，所以这里我们将user.js里面的内容删除，并且导出一个默认配置</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  {</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: {},</span><br><span class="line">  <span class="attr">mutations</span>: {},</span><br><span class="line">  <span class="attr">actions</span>: {}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>同时，由于getters中引用了user中的状态，所以我们将getters中的状态改为</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = {</span><br><span class="line">  <span class="attr">sidebar</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.app.sidebar,</span><br><span class="line">  <span class="attr">device</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.app.device</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="scss"><a href="#scss" class="headerlink" title="scss"></a><strong>scss</strong></h3><blockquote>
<p>该项目还使用了<a href="https://www.sass.hk/">scss</a>作为css的扩展语言，在**<code>styles</code>**目录下，我们可以发现scss的相关文件，相关用法 我们<a href="">下一小节</a> 进行讲解<img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200824171327384.png" alt="image-20200824171327384"></p>
</blockquote>
<h3 id="icons"><a href="#icons" class="headerlink" title="icons"></a><strong>icons</strong></h3><blockquote>
<p>icons的结构如下</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200824173239955.png" alt="image-20200824173239955"></p>
<blockquote>
<p>以上就是vue-element-admin的基础和介绍,希望大家在这过程中体会 一个基础的模板运行机制</p>
</blockquote>
<p>**<code>本节任务</code>**： 大家根据目录结构和设计图，对以上的内容进行了解</p>
<h2 id="SCSS处理的了解和使用"><a href="#SCSS处理的了解和使用" class="headerlink" title="SCSS处理的了解和使用"></a>SCSS处理的了解和使用</h2><p><strong><code>目标</code></strong>: 了解和学习Scss处理器的规范和用法</p>
<p><a href="https://www.sass.hk/">官方文档</a></p>
<blockquote>
<p>首先注意,这里的sass和我们的scss是什么关系</p>
</blockquote>
<p>sass和scss其实是**<code>一样的</code>**css预处理语言，SCSS 是 Sass 3 引入新的语法，其后缀名是分别为 .sass和.scss两种。<br>SASS版本3.0之前的后缀名为.sass，而版本3.0之后的后缀名.scss。<br>两者是有不同的，继sass之后scss的编写规范基本和css一致，sass时代是有严格的缩进规范并且没有‘{}’和‘；’。<br>而scss则和css的规范是一致的。</p>
<h3 id="搭建小型测试环境"><a href="#搭建小型测试环境" class="headerlink" title="搭建小型测试环境"></a>搭建小型测试环境</h3><blockquote>
<p>为了方便应用scss，我们可以在vscode中安装一个名为**<code>easy sass</code>** 的插件，但是我们只在该项目中工作区中应用该插件，因为在项目中，不需要该插件的辅助</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200825143713888.png" alt="image-20200825143713888"></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200825143800666.png" alt="image-20200825143800666"></p>
<blockquote>
<p>首先我们新建一个文件夹test，然后我们在test下新建一个index.html，并新建一个test.scss</p>
</blockquote>
<p>页面结构如下</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./test.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span> Scss样式 <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        Hello World</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文章标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>文章内容 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">            侧边栏</span><br><span class="line">        <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>我们使用的**<code>easy sass</code><strong>插件会自动的帮助我们把</strong><code>test.scss  =&gt;  test.css</code>**</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><code>sass</code>使用<code>$</code>符号来标识变量 </p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$highlight</span>-color: <span class="comment">#f90     </span></span><br></pre></td></tr></tbody></table></figure>

<p>上面我们声明了一个 名为**<code>$highlight-color</code>**的变量, 我们可以把该变量用在任何位置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#app {</span></span><br><span class="line">    background-color:  <span class="variable">$highlight</span>-color;</span><br><span class="line">}     </span><br></pre></td></tr></tbody></table></figure>

<p>以空格分割的多属性值也可以标识变量</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$basic</span>-border: 1px solid black;</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#app {</span></span><br><span class="line">    background-color:  <span class="variable">$highlight</span>-color;</span><br><span class="line">    border: <span class="variable">$basic</span>-border</span><br><span class="line">}     </span><br></pre></td></tr></tbody></table></figure>

<p><strong>变量范围</strong></p>
<p>与<code>CSS</code>属性不同，变量可以在<code>css</code>规则块定义之外存在。当变量定义在<code>css</code>规则块内，那么该变量只能在此规则块内使用。如果它们出现在任何形式的<code>{...}</code>块中（如<code>@media</code>或者<code>@font-face</code>块），情况也是如此：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$nav</span>-color: <span class="comment">#F90;</span></span><br><span class="line">nav {</span><br><span class="line">  <span class="variable">$width</span>: 100px;</span><br><span class="line">  width: <span class="variable">$width</span>;</span><br><span class="line">  color: <span class="variable">$nav</span>-color;</span><br><span class="line">  background-color: black</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译后 </span></span><br><span class="line"></span><br><span class="line">nav {</span><br><span class="line">  width: 100px;</span><br><span class="line">  color: <span class="comment">#F90;</span></span><br><span class="line">  background-color: black;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>在这段代码中，<code>$nav-color</code>这个变量定义在了规则块外边，所以在这个样式表中都可以像 <code>nav</code>规则块那样引用它。<code>$width</code>这个变量定义在了<code>nav</code>的<code>{ }</code>规则块内，所以它只能在<code>nav</code>规则块 内使用。这意味着是你可以在样式表的其他地方定义和使用<code>$width</code>变量，不会对这里造成影响。</p>
<p><strong>嵌套语法</strong></p>
<p>和less一样,scss同样支持**<code>嵌套型</code>**的语法</p>
<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span> {</span><br><span class="line">    <span class="selector-tag">article</span> {</span><br><span class="line">      <span class="selector-tag">h1</span> { <span class="attribute">color</span>: <span class="number">#1dc08a</span> }</span><br><span class="line">      p {  font-style: italic; }</span><br><span class="line">    }</span><br><span class="line">    <span class="selector-tag">aside</span> { <span class="attribute">background-color</span>: <span class="number">#f90</span> }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<p>转化后</p>
<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">article</span> <span class="selector-tag">h1</span> {</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1dc08a</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">article</span> <span class="selector-tag">p</span> {</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">aside</span> {</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f90</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>&amp;父选择器</strong></p>
<p>假如你想针对某个特定子元素 进行设置</p>
<p>比如</p>
<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span> {</span><br><span class="line">  <span class="selector-tag">article</span> {</span><br><span class="line">    <span class="selector-tag">h1</span> { <span class="attribute">color</span>: <span class="number">#1dc08a</span> }</span><br><span class="line">    p {  font-style: italic; }</span><br><span class="line">    <span class="selector-tag">a</span> {</span><br><span class="line">      <span class="attribute">color</span>: blue;</span><br><span class="line">      &amp;<span class="selector-pseudo">:hover</span> { <span class="attribute">color</span>: red }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  aside { background-color: <span class="number">#f90</span> }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>学到这里,我们会发现scss和less有很多相似之处,最大的区别就在于声明变量的方式,less采用的是**<code>@变量名</code><strong>, 而scss采用的</strong><code>$变量名</code>**</p>
</blockquote>
<p>此时,我们再来看一下模板中的 <strong><code>styles/variables.scss</code></strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20201017230542301.png" alt="image-20201017230542301"></p>
<p>上述文件,实际上定义了我们的一些基础数值,方便大家在某个文件统一的处理.</p>
<p>**<code>本节任务</code>**：对scss进行了解和掌握</p>
<h2 id="建立远程Git仓库并完成初始提交"><a href="#建立远程Git仓库并完成初始提交" class="headerlink" title="建立远程Git仓库并完成初始提交"></a>建立远程Git仓库并完成初始提交</h2><p><strong><code>目标</code></strong> 在<a href="https://gitee.com/">码云</a>或者<a href="https://github.com/">github</a>上建立相应的远程仓库,并将代码分支提交</p>
<p><strong>建立远程仓库</strong></p>
<blockquote>
<p>远程仓库建立只需要在网站上直接操作即可</p>
</blockquote>
<p><strong>本地项目提交</strong></p>
<p><strong><code>注意</code></strong>: 由于我们之前的项目是直接从 vue-element-admin **<code>克隆</code><strong>而来,里面拥有原来的提交记录,为了避免冲突, 先将原来的</strong><code>.git</code>**文件夹删除掉</p>
<p>并且对项目进行git初始化</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git init  <span class="comment">#初始化项目</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$  git add . <span class="comment">#将修改添加到暂存</span></span><br><span class="line">$  git commit -m <span class="string">'人资项目初始化'</span> <span class="comment">#将暂存提到本地仓库</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>查看版本日志</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment">#查看版本日志</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>推送到远程仓库</strong></p>
<p>推送到远程仓库一般先将**<code>远程仓库地址</code>**用本地仓库别名代替</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git remote add origin &lt;远程仓库地址&gt;  <span class="comment">#添加远程仓库地址</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>当我们不清楚自己的仓库对应的origin地址时, 我们可以通过命令查看当前的远程仓库地址</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git remote -v <span class="comment">#查看本地仓库的远程仓库地址映射</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>推送master分支到远程仓库</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git push -u origin master <span class="comment">#将master分支推送到origin所代表的远程仓库地址</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong><code>本节任务</code></strong>: 同学们 根据以上操作,将拉取下的项目提交到自己的仓库里面</p>
<h2 id="API模块和请求封装模块介绍"><a href="#API模块和请求封装模块介绍" class="headerlink" title="API模块和请求封装模块介绍"></a>API模块和请求封装模块介绍</h2><p><strong><code>目标</code></strong> 介绍API模块的单独请求和 request模块的封装</p>
<h3 id="Axios的拦截器介绍"><a href="#Axios的拦截器介绍" class="headerlink" title="Axios的拦截器介绍"></a>Axios的拦截器介绍</h3><blockquote>
<p>该项目采用了API的单独模块封装和axios拦截器的方式进行开发</p>
</blockquote>
<p>axios的拦截器原理如下</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200811012945409.png" alt="image-20200811012945409"></p>
<p><strong>axios拦截器</strong></p>
<p>axios作为网络请求的第三方工具, 可以进行请求和响应的拦截</p>
<p><strong>通过create创建了一个新的axios实例</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建了一个新的axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create({</span><br><span class="line">  <span class="attr">baseURL</span>: process.env.VUE_APP_BASE_API, <span class="comment">// url = base url + request url</span></span><br><span class="line">  <span class="comment">// withCredentials: true, // send cookies when cross-domain requests</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span> <span class="comment">// 超时时间</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p><strong>请求拦截器</strong></p>
<p>请求拦截器主要处理 token的**<code>统一注入问题</code>**</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// axios的请求拦截器</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> {</span><br><span class="line">    <span class="comment">// do something before request is sent</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (store.getters.token) {</span><br><span class="line">      <span class="comment">// let each request carry token</span></span><br><span class="line">      <span class="comment">// ['X-Token'] is a custom headers key</span></span><br><span class="line">      <span class="comment">// please modify it according to the actual situation</span></span><br><span class="line">      config.headers[<span class="string">'X-Token'</span>] = getToken()</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> {</span><br><span class="line">    <span class="comment">// do something with request error</span></span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<p><strong>响应拦截器</strong></p>
<p>响应拦截器主要处理 返回的**<code>数据异常</code>** 和**<code>数据结构</code>**问题</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> res = response.data</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if the custom code is not 20000, it is judged as an error.</span></span><br><span class="line">    <span class="keyword">if</span> (res.code !== <span class="number">20000</span>) {</span><br><span class="line">      Message({</span><br><span class="line">        <span class="attr">message</span>: res.message || <span class="string">'Error'</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">      })</span><br><span class="line">      <span class="keyword">if</span> (res.code === <span class="number">50008</span> || res.code === <span class="number">50012</span> || res.code === <span class="number">50014</span>) {</span><br><span class="line">        <span class="comment">// to re-login</span></span><br><span class="line">        MessageBox.confirm(<span class="string">'You have been logged out, you can cancel to stay on this page, or log in again'</span>, <span class="string">'Confirm logout'</span>, {</span><br><span class="line">          <span class="attr">confirmButtonText</span>: <span class="string">'Re-Login'</span>,</span><br><span class="line">          <span class="attr">cancelButtonText</span>: <span class="string">'Cancel'</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">'warning'</span></span><br><span class="line">        }).then(<span class="function">() =&gt;</span> {</span><br><span class="line">          store.dispatch(<span class="string">'user/resetToken'</span>).then(<span class="function">() =&gt;</span> {</span><br><span class="line">            location.reload()</span><br><span class="line">          })</span><br><span class="line">        })</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(res.message || <span class="string">'Error'</span>))</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err'</span> + error) <span class="comment">// for debug</span></span><br><span class="line">    Message({</span><br><span class="line">      <span class="attr">message</span>: error.message,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">'error'</span>,</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>这里为了后续更清楚的书写代码,我们将原有代码注释掉,换成如下代码</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 导出一个axios的实例  而且这个实例要有请求拦截器 响应拦截器</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create() <span class="comment">// 创建一个axios的实例</span></span><br><span class="line">service.interceptors.request.use() <span class="comment">// 请求拦截器</span></span><br><span class="line">service.interceptors.response.use() <span class="comment">// 响应拦截器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service <span class="comment">// 导出axios实例</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="api模块的单独封装"><a href="#api模块的单独封装" class="headerlink" title="api模块的单独封装"></a><strong>api模块的单独封装</strong></h3><p>我们习惯性的将所有的网络请求 放置在api目录下统一管理,按照模块进行划分</p>
<p><strong>单独封装代码</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/vue-admin-template/user/login'</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'post'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">token</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/vue-admin-template/user/info'</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'get'</span>,</span><br><span class="line">    <span class="attr">params</span>: { token }</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/vue-admin-template/user/logout'</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'post'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中,使用了封装的request工具,每个接口的请求都单独**<code>导出</code>**了一个方法,这样做的好处就是,任何位置需要请求的话,可以直接引用我们导出的请求方法</p>
<p>为了后续更好的开发，我们可以先将<strong>user.js</strong>代码的方法设置为空，后续在进行更正</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// import request from '@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">token</span>) </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>) </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**： 将request和用户模块的代码进行清理，理解request和模块封装</p>
<h2 id="公共资源图片和统一样式"><a href="#公共资源图片和统一样式" class="headerlink" title="公共资源图片和统一样式"></a>公共资源图片和统一样式</h2><p><strong><code>目标</code></strong> 将一些公共的图片和样式资源放入到 规定目录中</p>
<blockquote>
<p>我们已经将整体的基础模块进行了简单的介绍，接下来，我们需要将该项目所用到的图片和样式进行统一的处理</p>
</blockquote>
<p> <strong>图片资源</strong></p>
<blockquote>
<p>图片资源在课程资料的图片文件中，我们只需要将**<code>common</code>**文件夹拷贝放置到 **<code>assets</code>**目录即可</p>
</blockquote>
<p><strong>样式</strong></p>
<blockquote>
<p>样式资源在  资源/样式目录下</p>
</blockquote>
<p>修改**<code>variables.scss</code>**</p>
<p>新增**<code>common.scss</code>**</p>
<p>我们在**<code>variables.scss</code>**添加了一些基础的变量值</p>
<p>我们提供了 一份公共的**<code>common.scss</code>**样式,里面内置了一部分内容的样式,在开发期间可以帮助我们快速的实现页面样式和布局</p>
<p>将两个文件放置到<strong>styles</strong>目录下，然后在**<code>index.scss</code>**中引入该样式</p>
<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">'./common.scss'</span>; <span class="comment">//引入common.scss样式表 </span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p><strong><code>本节注意</code><strong>：注意在scss文件中，通过</strong>@import</strong> 引入其他样式文件，需要注意最后加分号，否则会报错</p>
<p><strong><code>本节任务</code></strong> 将公共资源的图片和样式放置到规定位置</p>
<h1 id="2-登录模块"><a href="#2-登录模块" class="headerlink" title="2.登录模块"></a>2.登录模块</h1><p><a href="http://ihrm-java.itheima.net/#/login">线上地址</a></p>
<p>本章节，我们将在现有模板的基础上，完成如图的登录模块的功能</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200811014205189.png" alt="image-20200811014205189"></p>
<h2 id="设置固定的本地访问端口和网站名称"><a href="#设置固定的本地访问端口和网站名称" class="headerlink" title="设置固定的本地访问端口和网站名称"></a>设置固定的本地访问端口和网站名称</h2><p><strong><code>目标</code></strong>: 设置统一的本地访问端口和网站title</p>
<p>在正式开发业务之前，先将项目的<strong>本地端口</strong>和<strong>网站名称</strong>进行一下调整</p>
<p><strong>本地服务端口</strong>:  在**<code>vue.config.js</code>**中进行设置</p>
<p><strong><code>vue.config.js</code></strong> 就是vue项目相关的编译，配置，打包，启动服务相关的配置文件，它的核心在于<strong>webpack</strong>，但是又不同于webpack，相当于改良版的webpack， <a href="https://cli.vuejs.org/zh/">文档地址</a></p>
<blockquote>
<p>如图，是开发环境服务端口的位置</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200710162221402.png" alt="image-20200710162221402"></p>
<p>我们看到上面的 **<code>process.env.port</code>**实际上是一个nodejs服务下的环境变量，该变量在哪里设置呢？</p>
<p>在项目下, 我们发现了**<code>.env.development</code><strong>和</strong><code>.env.production</code>**两个文件</p>
<p>development =&gt; 开发环境</p>
<p>production =&gt; 生产环境</p>
<p>当我们运行<strong>npm run dev</strong>进行开发调试的时候,此时会加载执行**<code>.env.development</code>**文件内容</p>
<p>当我们运行<strong>npm run build:prod</strong>进行生产环境打包的时候,会加载执行**<code>.env.production</code>**文件内容</p>
<p>所以,如果想要设置开发环境的接口,直接在**<code>.env.development</code>**中写入对于port变量的赋值即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置端口号</span></span><br><span class="line">port = 8888</span><br></pre></td></tr></tbody></table></figure>

<p><strong><code>本节注意</code></strong>:修改服务的配置文件,想要生效的话,必须要重新启动服务，值‘8888’后面不能留有空格</p>
<p><strong>网站名称</strong></p>
<p>网站名称实际在<strong>configureWebpack</strong>选项中的<strong>name</strong>选项,通过阅读代码,我们会发现name实际上来源于src目录下</p>
<p>**<code>settings.js</code>**文件</p>
<p>所以,我们可以将网站名称改成”<strong><code>人力资源管理平台</code></strong>“</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200710164040042.png" alt="image-20200710164040042"></p>
<p><strong>提交代码</strong></p>
<p><strong><code>本节注意</code></strong>:修改服务的配置文件,想要生效的话,必须要重新启动服务，值‘8888’后面不能留有空格</p>
<p>**<code>本节任务</code>**：完成网站的开发服务端口设置和网站名称设置</p>
<h2 id="登录页面的基础布局"><a href="#登录页面的基础布局" class="headerlink" title="登录页面的基础布局"></a>登录页面的基础布局</h2><p>**<code>目标</code>**完成登录页面的基础布局</p>
<p><strong>页面效果</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200710164517167.png" alt="image-20200710164517167"></p>
<p>首先要实现以上的页面效果, 我们可以直接将当前的登录页面进行相应的改造</p>
<p><strong>设置头部背景</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 放置标题图片 @是设置的别名--&gt;</span><br><span class="line">&lt;div class="title-container"&gt;</span><br><span class="line">        &lt;h3 class="title"&gt;</span><br><span class="line">          &lt;img src="@/assets/common/login-logo.png" alt=""&gt;</span><br><span class="line">        &lt;/h3&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>**<code>本节注意</code>**： <code>@</code>是我们在vue.config.js中设置的一个路径别名，指定src根目录，这样可以很方便的寻找文件</p>
<p><strong>设置背景图片</strong></p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* reset element-ui css */</span></span><br><span class="line"><span class="selector-class">.login-container</span> {</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'~@/assets/common/login.jpg'</span>); // 设置背景图片</span><br><span class="line">  <span class="attribute">background-position</span>: center; // 将图片位置设置为充满整个屏幕</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>**<code>本节注意</code><strong>： 如需要在样式表中使用</strong><code>@</code><strong>别名的时候，需要在@前面加上一个</strong><code>~</code>**符号，否则不识别</p>
<p><strong>设置手机号和密码的字体颜色</strong></p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">$light_gray: <span class="number">#68b0fe</span>;  // 将输入框颜色改成蓝色</span><br></pre></td></tr></tbody></table></figure>

<p><strong>设置输入表单整体背景色</strong></p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.el-form-item</span> {</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>); // 输入登录表单的背景色</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#454545</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>设置错误信息的颜色</strong></p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.el-form-item__error</span> {</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>设置登录按钮的样式</strong></p>
<blockquote>
<p>需要给el-button 增加一个loginBtn的class样式</p>
</blockquote>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.loginBtn</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#407ffe</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>修改显示的提示文本和登录文本</strong></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"margin-right:20px;"</span>&gt;</span>账号: 13800000002<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span> 密码: 123456<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>经过以上的改动, 我们得到了一个比较完善的登录页面</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200711002545085.png" alt="image-20200711002545085"></p>
<blockquote>
<p>解释:我们该项目的侧重点在于更多的介绍Vue中台项目所应用的技术,所以对于一些过于细节的样式或者布局,我们采用直接粘贴或者拷贝成型代码的方式,同学们可以通过课下多多练习</p>
</blockquote>
<p><strong>提交代码</strong></p>
<p>**<code>本节注意</code>**： <code>@</code>是我们在vue.config.js中设置的一个路径别名，指定src根目录，这样可以很方便的寻找文件</p>
<p>**<code>本节注意</code><strong>： 如需要在样式表中使用</strong><code>@</code><strong>别名的时候，需要在@前面加上一个</strong><code>~</code>**符号，否则不识别</p>
<p>**<code>本节任务</code>**： 完成登录首页的基本布局</p>
<h2 id="登录表单的校验"><a href="#登录表单的校验" class="headerlink" title="登录表单的校验"></a>登录表单的校验</h2><p>**<code>目标</code>**对登录表单进行规则校验</p>
<blockquote>
<p>基础模板已经有了基础校验的代码,所以我们这一章节更多的是修正和完善</p>
</blockquote>
<h3 id="el-form表单校验的先决条件"><a href="#el-form表单校验的先决条件" class="headerlink" title="el-form表单校验的先决条件"></a><strong>el-form表单校验的先决条件</strong></h3><p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200830212537835.png" alt="image-20200830212537835"></p>
<h3 id="手机号和密码的校验"><a href="#手机号和密码的校验" class="headerlink" title="手机号和密码的校验"></a>手机号和密码的校验</h3><p><strong>字段名对应</strong></p>
<blockquote>
<p>为什么要对应? 因为基础模板采用的是**<code>username</code><strong>的字段,但是实际接口中采用的是</strong><code>mobile</code><strong>的字段,为了更方便的写代码,所以我们将</strong><code>username</code><strong>改成</strong><code>mobile</code>**</p>
</blockquote>
<p>这里除了字段名，还有我们的规则校验名称，以及prop名称。</p>
<p><strong>英文提示变成中文</strong></p>
<p>基础模板中都是<strong>placeHolder</strong>占位符是英文,要变成中文</p>
<p>登录按钮文字同样需要换成中文</p>
<p><strong>校验手机号和校验密码</strong></p>
<p>基础模板中,已经做了校验,我们针对代码进行一些优化</p>
<p>新规则：手机号必填，并且进行格式校验，密码必填，长度6-16位之间</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">   <span class="comment">// 自定义校验函数</span></span><br><span class="line">   <span class="keyword">const</span> validateMobile = <span class="function"><span class="keyword">function</span>(<span class="params">rule, value, callback</span>) </span>{</span><br><span class="line">     <span class="comment">// 校验value</span></span><br><span class="line">     <span class="comment">// if (validMobile(value)) {</span></span><br><span class="line">     <span class="comment">//   // 如果通过 直接执行callback</span></span><br><span class="line">     <span class="comment">//   callback()</span></span><br><span class="line">     <span class="comment">// } else {</span></span><br><span class="line">     <span class="comment">//   callback(new Error('手机号格式不正确'))</span></span><br><span class="line">     <span class="comment">// }</span></span><br><span class="line">     validMobile(value) ? callback() : callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'手机号格式不正确'</span>))</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> {</span><br><span class="line">     <span class="attr">loginForm</span>: {</span><br><span class="line">       <span class="attr">mobile</span>: <span class="string">'13800000002'</span>,</span><br><span class="line">       <span class="attr">password</span>: <span class="string">'123456'</span></span><br><span class="line">     },</span><br><span class="line">     <span class="attr">loginRules</span>: {</span><br><span class="line">       <span class="attr">mobile</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>, <span class="attr">message</span>: <span class="string">'手机号不能为空'</span> }, {</span><br><span class="line">         <span class="attr">validator</span>: validateMobile, <span class="attr">trigger</span>: <span class="string">'blur'</span></span><br><span class="line">       }],</span><br><span class="line">       <span class="attr">password</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>, <span class="attr">message</span>: <span class="string">'密码不能为空'</span> }, {</span><br><span class="line">         <span class="attr">min</span>: <span class="number">6</span>, <span class="attr">max</span>: <span class="number">16</span>, <span class="attr">message</span>: <span class="string">'密码的长度在6-16位之间 '</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span></span><br><span class="line">       }]</span><br><span class="line">     },</span><br><span class="line">     <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">     <span class="attr">passwordType</span>: <span class="string">'password'</span>,</span><br><span class="line">     <span class="attr">redirect</span>: <span class="literal">undefined</span></span><br><span class="line">   }</span><br><span class="line"> },</span><br></pre></td></tr></tbody></table></figure>

<p>我们在**<code>utils/validate.js</code>**方法中增加了一个校验手机号的方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验手机号</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validMobile</span>(<span class="params">str</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^1[3-9]\d{9}$/</span>.test(str) <span class="comment">// 校验手机号</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>**<code>utils/validate.js</code>**是一个专门存放校验工具方法的文件</p>
<h3 id="关于修饰符"><a href="#关于修饰符" class="headerlink" title="关于修饰符"></a>关于修饰符</h3><p><strong>关于修饰符</strong></p>
<blockquote>
<p>在该页面中，我们发现了事件的几个修饰符 <strong><code>@keyup.enter.native</code></strong>  <strong><code>@click.native.prevent</code></strong></p>
</blockquote>
<p>@keyup.**<code>enter</code>**属于按键修饰符，如果我们想监听在按回车键的时候触发，可以如下编写</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span><br><span class="line">&lt;input v-on:keyup.enter="submit"&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>@keyup.enter.<strong><code>native</code></strong> 表示监听组件的原生事件，比如 keyup就是于input的原生事件，这里写native表示keyup是一个原生事件</p>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**：实现登录用户的手机号和密码校验</p>
<h2 id="Vue-Cli配置跨域代理"><a href="#Vue-Cli配置跨域代理" class="headerlink" title="Vue-Cli配置跨域代理"></a>Vue-Cli配置跨域代理</h2><p><strong><code>目标</code></strong>: 通过配置vue-cli的代理解决跨域访问的问题</p>
<h3 id="为什么会出现跨域？"><a href="#为什么会出现跨域？" class="headerlink" title="为什么会出现跨域？"></a>为什么会出现跨域？</h3><p>当下,最流行的就是**<code>前后分离</code><strong>项目,也就是</strong><code>前端项目</code><strong>和</strong><code>后端接口</code><strong>并不在一个域名之下，那么前端项目访问后端接口必然存在</strong><code>跨域</code>**的行为.</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200826110754199.png" alt="image-20200826110754199"></p>
<blockquote>
<p>怎么解决这种跨域 ？</p>
</blockquote>
<p><strong><code>请注意</code><strong>，我们所遇到的这种跨域是位于</strong>开发环境</strong>的，真正部署上线时的跨域是<strong>生产环境</strong>的</p>
<h3 id="解决开发环境的跨域问题"><a href="#解决开发环境的跨域问题" class="headerlink" title="解决开发环境的跨域问题"></a>解决开发环境的跨域问题</h3><p><strong>开发环境的跨域</strong></p>
<p>开发环境的跨域，也就是在**<code>vue-cli脚手架环境</code><strong>下开发启动服务时，我们访问接口所遇到的跨域问题，vue-cli为我们在本地</strong><code>开启了一个服务</code><strong>,可以通过这个服务帮我们</strong><code>代理请求</code>**,解决跨域问题</p>
<p>这就是vue-cli配置<strong>webpack的反向代理</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200811022013103.png" alt="image-20200811022013103"></p>
<blockquote>
<p>采用vue-cli的代理配置</p>
</blockquote>
<p>vue-cli的配置文件即**<code>vue.config.js</code>**,这里有我们需要的 <a href="https://cli.vuejs.org/zh/config/#devserver-proxy">代理选项</a></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">devServer</span>: {</span><br><span class="line">   <span class="comment">// 代理配置</span></span><br><span class="line">    <span class="attr">proxy</span>: {</span><br><span class="line">        <span class="comment">// 这里的api 表示如果我们的请求地址有/api的时候,就出触发代理机制</span></span><br><span class="line">        <span class="comment">// localhost:8888/api/abc  =&gt; 代理给另一个服务器</span></span><br><span class="line">        <span class="comment">// 本地的前端  =》 本地的后端  =》 代理我们向另一个服务器发请求 （行得通）</span></span><br><span class="line">        <span class="comment">// 本地的前端  =》 另外一个服务器发请求 （跨域 行不通）</span></span><br><span class="line">        <span class="string">'/api'</span>: {</span><br><span class="line">        <span class="attr">target</span>: <span class="string">'www.baidu.com'</span>, <span class="comment">// 我们要代理的地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 是否跨域 需要设置此值为true 才可以让本地服务代理我们发出请求</span></span><br><span class="line">         <span class="comment">// 路径重写</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: {</span><br><span class="line">            <span class="comment">// 重新路由  localhost:8888/api/login  =&gt; www.baidu.com/api/login</span></span><br><span class="line">            <span class="string">'^/api'</span>: <span class="string">''</span> <span class="comment">// 假设我们想把 localhost:8888/api/login 变成www.baidu.com/login 就需要这么做 </span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>以上就是我们在vue-cli项目中配置的代理设置</p>
<blockquote>
<p>接下来,我们在代码中将要代理的后端地址变成 <a href="http://ihrm-java.itheima.net/">后端接口地址</a></p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 代理跨域的配置</span></span><br><span class="line">   <span class="attr">proxy</span>: {</span><br><span class="line">     <span class="comment">// 当我们的本地的请求 有/api的时候，就会代理我们的请求地址向另外一个服务器发出请求</span></span><br><span class="line">     <span class="string">'/api'</span>: {</span><br><span class="line">       <span class="attr">target</span>: <span class="string">'http://ihrm-java.itheima.net/'</span>, <span class="comment">// 跨域请求的地址</span></span><br><span class="line">       <span class="attr">changeOrigin</span>: <span class="literal">true</span> <span class="comment">// 只有这个值为true的情况下 才表示开启跨域</span></span><br><span class="line">     }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>

<p><strong><code>本节注意</code><strong>：我们并没有进行</strong><code>pathRewrite</code></strong>,因为后端接口就是**<code>ihrm-java.itheima.net/api</code>**这种格式,所以不需要重写</p>
<p>**<code>vue.config.js</code>**的改动如果要生效,需要进行重启服务</p>
<p>同时，还需要注意的是，我们同时需要注释掉 mock的加载，因为mock-server会导致代理服务的异常</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// before: require('./mock/mock-server.js'),  // 注释mock-server加载</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>生产环境的跨域</strong></p>
<p>生产环境表示我们已经开发完成项目，将项目部署到了服务器上,这时已经没有了vue-cli脚手架的**<code>辅助</code><strong>了，我们只是把打包好的</strong><code>html+js+css</code><strong>交付运维人员，放到</strong><code>Nginx</code><strong>服务器而已,所以此时需要借助</strong><code>Nginx</code>**的反向代理来进行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">server{</span><br><span class="line">    <span class="comment"># 监听9099端口</span></span><br><span class="line">    listen 9099;</span><br><span class="line">    <span class="comment"># 本地的域名是localhost</span></span><br><span class="line">    server_name localhost;</span><br><span class="line">    <span class="comment">#凡是localhost:9099/api这个样子的，都转发到真正的服务端地址http://baidu.com</span></span><br><span class="line">    location ^~ /api {</span><br><span class="line">        proxy_pass http://baidu.com;</span><br><span class="line">    }    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong><code>注意</code></strong>:这里的操作一般由运维人员完成,需要前端进行操作,这里我们进行一下简单了解</p>
<p>更多正向代理和反向代理知识,请阅读这篇文章<a href="https://www.cnblogs.com/ysocean/p/9392908.html">Nginx反向代理</a></p>
<p><strong>提交代码</strong></p>
<p><strong><code>本节注意</code><strong>：我们并没有进行</strong><code>pathRewrite</code></strong>,因为后端接口就是**<code>ihrm-java.itheima.net/api</code>**这种格式,所以不需要重写</p>
<p>**<code>本节任务</code>**： 配置vue-cli的反向代理，实现后端接口的跨域访问</p>
<h2 id="封装单独的登录接口"><a href="#封装单独的登录接口" class="headerlink" title="封装单独的登录接口"></a>封装单独的登录接口</h2><p><strong><code>目标</code></strong> 在单独请求模块中,单独封装登录接口</p>
<blockquote>
<p>完成登录模块之后，我们需要对登录接口进行封装</p>
</blockquote>
<p>首先，查阅接口文档中的登录接口</p>
<blockquote>
<p>基础模板已经有了原来的登录代码,我们只需要进行简单的改造即可</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="comment">// 返回一个axios对象 =&gt; promise  // 返回了一个promise对象</span></span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/sys/login'</span>, <span class="comment">// 因为所有的接口都要跨域 表示所有的接口要带 /api</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">'post'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>如图</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200812002834804.png" alt="image-20200812002834804"></p>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**：封装单独的登录接口</p>
<h2 id="封装Vuex的登录Action并处理token"><a href="#封装Vuex的登录Action并处理token" class="headerlink" title="封装Vuex的登录Action并处理token"></a>封装Vuex的登录Action并处理token</h2><p>**<code>目标</code>**在vuex中封装登录的action,并处理token</p>
<blockquote>
<p>在这个小节中，我们将在vuex中加入对于用户的登录的处理</p>
</blockquote>
<h3 id="在Vuex中对token进行管理"><a href="#在Vuex中对token进行管理" class="headerlink" title="在Vuex中对token进行管理"></a>在Vuex中对token进行管理</h3><p>在传统模式中，我们登录的逻辑很简单，如图</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200812003821680.png" alt="image-20200812003821680"></p>
<blockquote>
<p>上图中，组件直接和接口打交道，这并没有什么问题，但是对于用户token这一高频使用的**<code>钥匙</code>**，我们需要让vuex来介入，将用户的token状态共享，更方便的读取，如图</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200812011826021.png" alt="image-20200812011826021"></p>
<p><strong>实现store/modules/user.js基本配置</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 状态</span></span><br><span class="line"><span class="keyword">const</span> state = {}</span><br><span class="line"><span class="comment">// 修改状态</span></span><br><span class="line"><span class="keyword">const</span> mutations = {}</span><br><span class="line"><span class="comment">// 执行异步</span></span><br><span class="line"><span class="keyword">const</span> actions = {}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>设置token的共享状态</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = {</span><br><span class="line">  <span class="attr">token</span>: <span class="literal">null</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>我们需要知道,**<code>钥匙</code>**不能每次都通过登录获取,我们可以将token放置到本地的缓存中</p>
</blockquote>
<p>在**<code>utils/auth.js</code><strong>中,基础模板已经为我们提供了</strong><code>获取token</code><strong>,</strong><code>设置token</code><strong>,</strong><code>删除token</code>**的方法,可以直接使用</p>
<p>只需要将存储的key放置成特定值即可</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TokenKey = <span class="string">'hrsaas-ihrm-token'</span> <span class="comment">// 设定一个独一无二的key</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> Cookies.get(TokenKey)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setToken</span>(<span class="params">token</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> Cookies.set(TokenKey, token)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removeToken</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> Cookies.remove(TokenKey)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>初始化token状态</strong> - <strong><code>store/modules/user.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { getToken, setToken, removeToken } <span class="keyword">from</span> <span class="string">'@/utils/auth'</span></span><br><span class="line"><span class="comment">// 状态</span></span><br><span class="line"><span class="comment">// 初始化的时候从缓存中读取状态 并赋值到初始化的状态上</span></span><br><span class="line"><span class="comment">// Vuex的持久化 如何实现 ？ Vuex和前端缓存相结合</span></span><br><span class="line"><span class="keyword">const</span> state = {</span><br><span class="line">  <span class="attr">token</span>: getToken() <span class="comment">// 设置token初始状态   token持久化 =&gt; 放到缓存中</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提供修改token的mutations</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 修改状态</span></span><br><span class="line"><span class="keyword">const</span> mutations = {</span><br><span class="line">  <span class="comment">// 设置token</span></span><br><span class="line">  <span class="function"><span class="title">setToken</span>(<span class="params">state, token</span>)</span> {</span><br><span class="line">    state.token = token <span class="comment">// 设置token  只是修改state的数据  123 =》 1234</span></span><br><span class="line">    <span class="comment">// vuex变化 =&gt; 缓存数据</span></span><br><span class="line">    setToken(token) <span class="comment">// vuex和 缓存数据的同步</span></span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 删除缓存</span></span><br><span class="line">  <span class="function"><span class="title">removeToken</span>(<span class="params">state</span>)</span> {</span><br><span class="line">    state.token = <span class="literal">null</span> <span class="comment">// 删除vuex的token</span></span><br><span class="line">    removeToken() <span class="comment">// 先清除 vuex  再清除缓存 vuex和 缓存数据的同步</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="封装登录的Action"><a href="#封装登录的Action" class="headerlink" title="封装登录的Action"></a>封装登录的Action</h3><p><strong>封装登录的action</strong></p>
<blockquote>
<p>登录action要做的事情,<strong><code>调用登录接口</code></strong>,<strong><code>成功后设置token到vuex</code></strong>,<strong><code>失败则返回失败</code></strong></p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 执行异步</span></span><br><span class="line"><span class="keyword">const</span> actions = {</span><br><span class="line">  <span class="comment">// 定义login action  也需要参数 调用action时 传递过来的参数</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">login</span>(<span class="params">context, data</span>)</span> {</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> login(data) <span class="comment">// 实际上就是一个promise  result就是执行的结果</span></span><br><span class="line">    <span class="comment">// axios默认给数据加了一层data</span></span><br><span class="line">    <span class="keyword">if</span> (result.data.success) {</span><br><span class="line">      <span class="comment">// 表示登录接口调用成功 也就是意味着你的用户名和密码是正确的</span></span><br><span class="line">      <span class="comment">// 现在有用户token</span></span><br><span class="line">      <span class="comment">// actions 修改state 必须通过mutations</span></span><br><span class="line">      context.commit(<span class="string">'setToken'</span>, result.data.data)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>上述代码中,我们使用了**<code>async/await</code><strong>语法,如果用</strong><code>then</code>**语法也是可以的</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="comment">// 为什么async/await 不用返回new Promise,因为 async函数本身就是 Promise,promise的值返回的值  </span></span><br><span class="line"><span class="function"><span class="title">login</span>(<span class="params">context, data</span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>{</span><br><span class="line">      login(data).then(<span class="function"><span class="params">result</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span> (result.data.success) {</span><br><span class="line">          context.commit(<span class="string">'setToken'</span>,  result.data.data) <span class="comment">// 提交mutations设置token</span></span><br><span class="line">          resolve()  <span class="comment">// 表示执行成功了</span></span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    })</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>以上两种写法都是OK的,我们在项目研发过程中,尽可能的采用前一种</p>
</blockquote>
<p>除此之外，为了更好的让其他模块和组件更好的获取token数据，我们可以在**<code>store/getters.js</code>**中将token值作为公共的访问属性放出</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = {</span><br><span class="line">  <span class="attr">sidebar</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.app.sidebar,</span><br><span class="line">  <span class="attr">device</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.app.device,</span><br><span class="line">  <span class="attr">token</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.token <span class="comment">// 在根级的getters上 开发子模块的属性给别人看 给别人用</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<blockquote>
<p>通过本节内容，我们要掌握在Vuex中如何来管理共享状态</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200826145500269.png" alt="image-20200826145500269"></p>
<p>**<code>本节任务</code>**：封装Vuex的登录Action并处理token</p>
<h2 id="request中环境变量和异常的处理"><a href="#request中环境变量和异常的处理" class="headerlink" title="request中环境变量和异常的处理"></a>request中环境变量和异常的处理</h2><p>**<code>目标</code>**设置request环境变量和异常处理</p>
<h3 id="区分axios在不同环境中的请求基础地址"><a href="#区分axios在不同环境中的请求基础地址" class="headerlink" title="区分axios在不同环境中的请求基础地址"></a>区分axios在不同环境中的请求基础地址</h3><blockquote>
<p>为什么会有环境变量之分? 如图</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200826150136697.png" alt="image-20200826150136697"></p>
<blockquote>
<p>从上图可以看出，开发环境实际上就是在自己的本地开发或者要求不那么高的环境，但是一旦进入生产，就是**<code>真实的数据</code>**。 拿银行作比喻，如果你在开发环境拿生产环境的接口做测试，银行系统就会发生很大的风险。</p>
</blockquote>
<p>前端主要区分两个环境,<strong><code>开发环境</code></strong>,<strong><code>生产环境</code></strong></p>
<blockquote>
<p> 也就是两个环境发出的请求地址是不同的，用什么区分呢?</p>
</blockquote>
<p><strong>环境变量</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ process.env.NODE_ENV <span class="comment"># 当为production时为生产环境 为development时为开发环境</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>环境文件</strong></p>
<p> 我们可以在**<code>.env.development</code><strong>和</strong><code>.env.production</code>**定义变量，变量自动就为当前环境的值</p>
<p>基础模板在以上文件定义了变量**<code>VUE_APP_BASE_API</code><strong>，该变量可以作为axios请求的</strong><code>baseURL</code>**</p>
<p>我们会发现,在模板中,两个值分别为**<code>/dev-api</code><strong>和</strong><code>/prod-api</code>**</p>
<p>但是我们的开发环境代理是**<code>/api</code>**，所以可以统一下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 开发环境的基础地址和代理对应</span></span><br><span class="line">VUE_APP_BASE_API = <span class="string">'/api'</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 这里配置了/api,意味着需要在Nginx服务器上为该服务配置 nginx的反向代理对应/prod-api的地址 </span></span><br><span class="line">VUE_APP_BASE_API = <span class="string">'/prod-api'</span>  </span><br></pre></td></tr></tbody></table></figure>

<p>**<code>本节注意</code>**：我们这里生产环境和开发环境设置了不同的值，后续我们还会在生产环境部署的时候，去配置该值所对应的反向代理，反向代理指向哪个地址，完全由我们自己决定，不会和开发环境冲突</p>
<p><strong>在request中设置baseUrl</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> service = axios.create({</span><br><span class="line">  <span class="comment">// 如果执行 npm run dev  值为 /api 正确  /api 这个代理只是给开发环境配置的代理</span></span><br><span class="line">  <span class="comment">// 如果执行 npm run build 值为 /prod-api  没关系  运维应该在上线的时候 给你配置上 /prod-api的代理</span></span><br><span class="line">  <span class="attr">baseURL</span>: process.env.VUE_APP_BASE_API, <span class="comment">// 设置axios请求的基础的基础地址</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span> <span class="comment">// 定义5秒超时</span></span><br><span class="line">}) <span class="comment">// 创建一个axios的实例</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="处理axios的响应拦截器"><a href="#处理axios的响应拦截器" class="headerlink" title="处理axios的响应拦截器"></a>处理axios的响应拦截器</h3><blockquote>
<p>OK，除此之外,axios返回的数据中默认增加了一层**<code>data的包裹</code>**,我们需要在这里处理下</p>
</blockquote>
<blockquote>
<p>并且,人资项目的接口,如果执行失败,只是设置了**<code>success</code><strong>为</strong><code>false</code>**，并没有reject，我们需要一并处理下</p>
</blockquote>
<p>处理逻辑如图</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200812020656210.png" alt="image-20200812020656210"></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> {</span><br><span class="line">  <span class="comment">// axios默认加了一层data</span></span><br><span class="line">  <span class="keyword">const</span> { success, message, data } = response.data</span><br><span class="line">  <span class="comment">//   要根据success的成功与否决定下面的操作</span></span><br><span class="line">  <span class="keyword">if</span> (success) {</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 业务已经错误了 还能进then ? 不能 ！ 应该进catch</span></span><br><span class="line">    Message.error(message) <span class="comment">// 提示错误消息</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(message))</span><br><span class="line">  }</span><br><span class="line">}, <span class="function"><span class="params">error</span> =&gt;</span> {</span><br><span class="line">  Message.error(error.message) <span class="comment">// 提示错误信息</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error) <span class="comment">// 返回执行错误 让当前的执行链跳出成功 直接进入 catch</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>既然在request中已经默认去除了一层data的外衣，所以我们也将上节login的action进行一下改动</p>
</blockquote>
<p><strong>处理登录的返回结构问题</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">login</span>(<span class="params">context, data</span>)</span> {</span><br><span class="line">  <span class="comment">// 经过响应拦截器的处理之后 这里的result实际上就是 token</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> login(data) <span class="comment">// 实际上就是一个promise  result就是执行的结果</span></span><br><span class="line">  <span class="comment">// axios默认给数据加了一层data</span></span><br><span class="line">  <span class="comment">// 表示登录接口调用成功 也就是意味着你的用户名和密码是正确的</span></span><br><span class="line">  <span class="comment">// 现在有用户token</span></span><br><span class="line">  <span class="comment">// actions 修改state 必须通过mutations</span></span><br><span class="line">  context.commit(<span class="string">'setToken'</span>, result)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**： 完成request环境变量和异常的处理</p>
<h2 id="登录页面调用登录action-处理异常"><a href="#登录页面调用登录action-处理异常" class="headerlink" title="登录页面调用登录action,处理异常"></a>登录页面调用登录action,处理异常</h2><p><strong><code>目标</code></strong> 调用vuex中的登录action,并跳转到主页</p>
<blockquote>
<p>按照如图的业务逻辑，把剩下的内容在登录页面引入</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200812011826021.png" alt="image-20200812011826021"></p>
<p><strong>引入actions辅助函数</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { mapActions } <span class="keyword">from</span> <span class="string">'vuex'</span>  <span class="comment">// 引入vuex的辅助函数</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>引入action方法</strong></p>
<blockquote>
<p>此处，我们采用直接引入模块action的方式，后面我们采用分模块的引用方式</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">methods: {</span><br><span class="line">    ...mapActions([<span class="string">'user/login'</span>])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>调用登录</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$refs.loginForm.validate(<span class="keyword">async</span> isOK =&gt; {</span><br><span class="line">      <span class="keyword">if</span> (isOK) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">          <span class="built_in">this</span>.loading = <span class="literal">true</span></span><br><span class="line">          <span class="comment">// 只有校验通过了 我们才去调用action</span></span><br><span class="line">          <span class="keyword">await</span> <span class="built_in">this</span>[<span class="string">'user/login'</span>](<span class="built_in">this</span>.loginForm)</span><br><span class="line">          <span class="comment">// 应该登录成功之后</span></span><br><span class="line">          <span class="comment">// async标记的函数实际上一个promise对象</span></span><br><span class="line">          <span class="comment">// await下面的代码 都是成功执行的代码</span></span><br><span class="line">          <span class="built_in">this</span>.$router.push(<span class="string">'/'</span>)</span><br><span class="line">        } <span class="keyword">catch</span> (error) {</span><br><span class="line">          <span class="built_in">console</span>.log(error)</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">          <span class="comment">//  不论执行try 还是catch  都去关闭转圈</span></span><br><span class="line">          <span class="built_in">this</span>.loading = <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    })</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p><strong><code>本节注意</code><strong>：我们调用的是Vuex中子模块的action，该模块我们进行了namespaced: true，所以引用aciton时需要带上</strong><code>user/</code></strong>, 并且在使用该方法时，直接使用 <strong><code>this['user/login']</code></strong>, 使用this.user/login 语法是错误的</p>
<p>**<code>本节任务</code>**：登录页面调用登录action，处理异常</p>
<h2 id="主页的token拦截处理"><a href="#主页的token拦截处理" class="headerlink" title="主页的token拦截处理"></a>主页的token拦截处理</h2><p>**<code>目标</code>**：根据token处理主页的访问权限问题</p>
<h3 id="权限拦截的流程图"><a href="#权限拦截的流程图" class="headerlink" title="权限拦截的流程图"></a>权限拦截的流程图</h3><blockquote>
<p>我们已经完成了登录的过程，并且存储了token，但是此时主页并没有因为token的有无而被控制访问权限</p>
</blockquote>
<p>接下来我们需要实现以下如下的流程图</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200714093601730.png" alt="image-20200714093601730"></p>
<blockquote>
<p>在基础框架阶段，我们已经知道**<code>src/permission.js</code>**是专门处理路由权限的，所以我们在这里处理</p>
</blockquote>
<h3 id="流程图转化代码"><a href="#流程图转化代码" class="headerlink" title="流程图转化代码"></a>流程图转化代码</h3><p><strong>流程图转化的代码</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 权限拦截 导航守卫 路由守卫  router</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span> <span class="comment">// 引入路由实例</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span> <span class="comment">// 引入vuex store实例</span></span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span> <span class="comment">// 引入一份进度条插件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'nprogress/nprogress.css'</span> <span class="comment">// 引入进度条样式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">'/login'</span>, <span class="string">'/404'</span>] <span class="comment">// 定义白名单  所有不受权限控制的页面</span></span><br><span class="line"><span class="comment">// 路由的前置守卫</span></span><br><span class="line">router.beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) </span>{</span><br><span class="line">  NProgress.start() <span class="comment">// 开启进度条</span></span><br><span class="line">  <span class="comment">//  首先判断有无token</span></span><br><span class="line">  <span class="keyword">if</span> (store.getters.token) {</span><br><span class="line">    <span class="comment">//   如果有token 继续判断是不是去登录页</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) {</span><br><span class="line">      <span class="comment">//  表示去的是登录页</span></span><br><span class="line">      next(<span class="string">'/'</span>) <span class="comment">// 跳到主页</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      next() <span class="comment">// 直接放行</span></span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 如果没有token</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.indexOf(to.path) &gt; -<span class="number">1</span>) {</span><br><span class="line">      <span class="comment">// 如果找到了 表示在在名单里面</span></span><br><span class="line">      next()</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      next(<span class="string">'/login'</span>) <span class="comment">// 跳到登录页</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  NProgress.done() <span class="comment">// 手动强制关闭一次  为了解决 手动切换地址时  进度条的不关闭的问题</span></span><br><span class="line">})</span><br><span class="line"><span class="comment">// 后置守卫</span></span><br><span class="line">router.afterEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  NProgress.done() <span class="comment">// 关闭进度条</span></span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>在导航守卫的位置，我们添加了NProgress的插件，可以完成进入时的进度条效果</p>
</blockquote>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**：完成主页中根据有无token，进行页面访问的处理</p>
<h2 id="主页的左侧导航样式"><a href="#主页的左侧导航样式" class="headerlink" title="主页的左侧导航样式"></a>主页的左侧导航样式</h2><p>**<code>目标</code>**设置左侧的导航样式</p>
<blockquote>
<p>接下来我们需要将左侧导航设置成如图样式</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200714142517337.png" alt="image-20200714142517337"></p>
<blockquote>
<p>主页的布局组件位置**<code>src/layout</code>**</p>
</blockquote>
<p><strong>主页布局架构</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200812023354631.png" alt="image-20200812023354631"></p>
<p><strong>左侧导航组件的样式文件</strong><code>styles/siderbar.scss</code></p>
<p><strong>设置背景渐变色</strong></p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-container</span> {</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(bottom, <span class="number">#3d6df8</span>, <span class="number">#5b8cff</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>设置左侧导航背景图片</strong></p>
<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.scrollbar-wrapper</span> { </span><br><span class="line">    <span class="attribute">background</span>: url(<span class="string">'~@/assets/common/leftnavBg.png'</span>) no-repeat <span class="number">0</span> <span class="number">100%</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>**<code>注意</code><strong>：在scss中，如果我们想要使用</strong><code>@</code><strong>别名，需要在前面加上一个</strong><code>~</code>**才可以</p>
<p><strong>设置菜单选中颜色</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">.el-menu {</span><br><span class="line">  border: none;</span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100% !important;</span><br><span class="line">  a{</span><br><span class="line">    li{</span><br><span class="line">      .svg-icon{</span><br><span class="line">        color: <span class="comment">#fff;</span></span><br><span class="line">        font-size: 18px;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        .icon{</span><br><span class="line">          color:<span class="comment">#fff;</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      span{</span><br><span class="line">        color: <span class="comment">#fff;</span></span><br><span class="line">      }</span><br><span class="line">      &amp;:hover{</span><br><span class="line">        .svg-icon{</span><br><span class="line">          color: <span class="comment">#43a7fe</span></span><br><span class="line">        }</span><br><span class="line">        span{</span><br><span class="line">          color: <span class="comment">#43a7fe;</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>**<code>注意</code>**：因为我们后期没有二级菜单，所以这里暂时不用对二级菜单的样式进行控制</p>
<p><strong>显示左侧logo图片</strong> <strong><code>src/setttings.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line"></span><br><span class="line">  <span class="attr">title</span>: <span class="string">'人力资源管理平台'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type <span class="type">{boolean}</span> </span>true | false</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description </span>Whether fix the header</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">fixedHeader</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type <span class="type">{boolean}</span> </span>true | false</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description </span>Whether show the logo in sidebar</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">sidebarLogo</span>: <span class="literal">true</span> <span class="comment">// 显示logo</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>设置头部图片结构</strong> <strong><code>src/layout/components/Sidebar/Logo.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div class="sidebar-logo-container" :class="{'collapse':collapse}"&gt;</span><br><span class="line">    &lt;transition name="sidebarLogoFade"&gt;</span><br><span class="line">      &lt;router-link key="collapse" class="sidebar-logo-link" to="/"&gt;</span><br><span class="line">        &lt;img src="@/assets/common/logo.png" class="sidebar-logo  "&gt;</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>设置大图和小图的样式</strong></p>
<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line">  &amp;<span class="selector-class">.collapse</span> {</span><br><span class="line">    <span class="selector-class">.sidebar-logo</span> {</span><br><span class="line">      <span class="attribute">margin-right</span>: <span class="number">0px</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">32px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"><span class="comment">// 小图样式</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-logo</span> {</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">      <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">      <span class="attribute">margin-right</span>: <span class="number">12px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 大图样式</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>去除logo的背景色</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200827104724769.png" alt="image-20200827104724769"></p>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**： 完成主页的左侧导航样式</p>
<p>**<code>本节注意</code>**：我们该项目中没有二级显示菜单，所以二级菜单的样式并没有做过多处理，同学们不必在意</p>
<h2 id="设置头部内容的布局和样式"><a href="#设置头部内容的布局和样式" class="headerlink" title="设置头部内容的布局和样式"></a>设置头部内容的布局和样式</h2><p>**<code>目标</code>**设置头部内容的布局和样式</p>
<blockquote>
<p>我们需要把页面设置成如图样式</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200714172602305.png" alt="image-20200714172602305"></p>
<p><strong>头部组件位置</strong> <strong><code>layout/components/Navbar.vue</code></strong></p>
<p><strong>添加公司名称</strong>，<strong>注释面包屑</strong></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app-breadcrumb"</span>&gt;</span></span><br><span class="line">     江苏传智播客教育科技股份有限公司</span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"breadBtn"</span>&gt;</span>体验版<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;breadcrumb class="breadcrumb-container" /&gt; --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>公司样式</strong></p>
<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.app-breadcrumb</span> {</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: text;</span><br><span class="line">  <span class="selector-class">.breadBtn</span> {</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#84a9fe</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>头部背景渐变色</strong></p>
<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.navbar</span> {</span><br><span class="line">    <span class="attribute">background-image</span>: -webkit-linear-gradient(left, <span class="number">#3d6df8</span>, <span class="number">#5b8cff</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>汉堡组件图标颜色</strong>  <strong><code>src/components/Hamburger/index.vue</code></strong></p>
<p><strong><code>注意</code><strong>这里的图标我们使用了</strong><code>svg</code><strong>，设置颜色需要使用svg标签的</strong><code>fill属性</code></strong></p>
<blockquote>
<p>设置svg图标为白色</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;svg</span><br><span class="line">      :class="{'is-active':isActive}"</span><br><span class="line">      class="hamburger"</span><br><span class="line">      viewBox="0 0 1024 1024"</span><br><span class="line">      xmlns="http://www.w3.org/2000/svg"</span><br><span class="line">      width="64"</span><br><span class="line">      height="64"</span><br><span class="line">      fill="#fff" </span><br><span class="line">    &gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>右侧下拉菜单设置</strong></p>
<blockquote>
<p>将下拉菜单调节成**<code>首页/项目地址/退出登录</code>**</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div class="right-menu"&gt;</span><br><span class="line">  &lt;el-dropdown class="avatar-container" trigger="click"&gt;</span><br><span class="line">    &lt;div class="avatar-wrapper"&gt;</span><br><span class="line">      &lt;img src="@/assets/common/bigUserHeader.png" class="user-avatar"&gt;</span><br><span class="line">      &lt;span class="name"&gt;管理员&lt;/span&gt;</span><br><span class="line">      &lt;i class="el-icon-caret-bottom" style="color:#fff" /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;el-dropdown-menu slot="dropdown" class="user-dropdown"&gt;</span><br><span class="line">      &lt;router-link to="/"&gt;</span><br><span class="line">        &lt;el-dropdown-item&gt;</span><br><span class="line">          首页</span><br><span class="line">        &lt;/el-dropdown-item&gt;</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">      &lt;a target="_blank" href="https://gitee.com/shuiruohanyu/hrsaas53"&gt;</span><br><span class="line">        &lt;el-dropdown-item&gt;项目地址&lt;/el-dropdown-item&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">      &lt;el-dropdown-item divided @click.native="logout"&gt;</span><br><span class="line">        &lt;span style="display:block;"&gt;退出登录&lt;/span&gt;</span><br><span class="line">      &lt;/el-dropdown-item&gt;</span><br><span class="line">    &lt;/el-dropdown-menu&gt;</span><br><span class="line">  &lt;/el-dropdown&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>头像和下拉菜单样式</strong></p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.user-avatar</span> {</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line"></span><br><span class="line"> }</span><br><span class="line"> <span class="selector-class">.name</span> {</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">        <span class="attribute">margin-left</span>:<span class="number">5px</span>;</span><br><span class="line"> }</span><br><span class="line"> <span class="selector-class">.user-dropdown</span> {</span><br><span class="line">         <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<p>用户名和头像我们先用了假数据进行，下小章节，会进行这份数据的获取</p>
<p><strong>最终效果</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200716015113164.png"></p>
<p><strong>提交代码</strong></p>
<h1 id="3-主页模块"><a href="#3-主页模块" class="headerlink" title="3.主页模块"></a>3.主页模块</h1><h2 id="获取用户资料接口和token注入"><a href="#获取用户资料接口和token注入" class="headerlink" title="获取用户资料接口和token注入"></a>获取用户资料接口和token注入</h2><p><strong><code>目标</code></strong> 封装获取用户资料的资料信息</p>
<blockquote>
<p>上小节中，我们完成了头部菜单的基本布局，但是用户的头像和名称并没有，我们需要通过接口调用的方式获取当前用户的资料信息</p>
</blockquote>
<p><strong>获取用户资料接口</strong></p>
<p>在**<code>src/api/user.js</code>**中封装获取用户资料的方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取用户的基本资料</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/sys/profile'</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'post'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>我们忽略了一个问题！我们的headers参数并没有在这里传入，为什么呢</p>
</blockquote>
<p>headers中的<strong>Authorization</strong>相当于我们<strong>开门</strong>（<strong>调用接口</strong>）时**<code>钥匙(token)</code><strong>，我们在打开任何带安全权限的门的时候都需要</strong><code>钥匙(token)</code>** 如图</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200715233339927.png" alt="image-20200715233339927"></p>
<p>每次在接口中携带**<code>钥匙（token）</code>**很麻烦，所以我们可以在axios拦截器中统一注入token </p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200716000203862.png" alt="image-20200716000203862"></p>
<p><strong>统一注入token</strong> <strong><code>src/utils/request.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">service.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> {</span><br><span class="line">  <span class="comment">// 在这个位置需要统一的去注入token</span></span><br><span class="line">  <span class="keyword">if</span> (store.getters.token) {</span><br><span class="line">    <span class="comment">// 如果token存在 注入token</span></span><br><span class="line">    config.headers[<span class="string">'Authorization'</span>] = <span class="string">`Bearer <span class="subst">${store.getters.token}</span>`</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> config <span class="comment">// 必须返回配置</span></span><br><span class="line">}, <span class="function"><span class="params">error</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">}) </span><br></pre></td></tr></tbody></table></figure>

<p>**<code>本节任务</code>**： 完成获取用户资料接口和token注入</p>
<h2 id="封装获取用户资料的action并共享用户状态"><a href="#封装获取用户资料的action并共享用户状态" class="headerlink" title="封装获取用户资料的action并共享用户状态"></a>封装获取用户资料的action并共享用户状态</h2><p>**<code>目标</code>**： 在用户的vuex模块中封装获取用户资料的action，并设置相关状态</p>
<blockquote>
<p>用户状态会在后续的开发中，频繁用到，所以我们将用户状态同样的封装到action中</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200827111324564.png" alt="image-20200827111324564"></p>
<p><strong>封装获取用户资料action</strong>   <strong><code>action</code></strong>  <strong><code>src/store/modules/user.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { login, getUserInfo } <span class="keyword">from</span> <span class="string">'@/api/user'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取用户资料action</span></span><br><span class="line">  <span class="keyword">async</span> getUserInfo (context) {</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> getUserInfo()  <span class="comment">// 获取返回值</span></span><br><span class="line">    context.commit(<span class="string">'setUserInfo'</span>, result) <span class="comment">// 将整个的个人信息设置到用户的vuex数据中</span></span><br><span class="line">    <span class="keyword">return</span> result <span class="comment">// 这里为什么要返回 为后面埋下伏笔</span></span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>同时，配套的我们还进行了关于用户状态的mutations方法的设计</p>
</blockquote>
<p><strong>初始化state</strong>  <strong><code>state</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = {</span><br><span class="line">  <span class="attr">token</span>: getToken(), <span class="comment">// 设置token初始状态   token持久化 =&gt; 放到缓存中</span></span><br><span class="line">  <span class="attr">userInfo</span>: {} <span class="comment">// 定义一个空的对象 不是null 因为后边我要开发userInfo的属性给别人用  userInfo.name</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>userInfo为什么我们不设置为null，而是设置为 {} </p>
</blockquote>
<p>因为我们会在**<code>getters</code>**中引用userinfo的变量，如果设置为null，则会引起异常和报错</p>
<p><strong>设置和删除用户资料</strong>   <strong><code>mutations</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 设置用户信息</span></span><br><span class="line"> <span class="function"><span class="title">setUserInfo</span>(<span class="params">state, userInfo</span>)</span> {</span><br><span class="line">   state.userInfo = { ...userInfo } <span class="comment">// 用 浅拷贝的方式去赋值对象 因为这样数据更新之后，才会触发组件的更新</span></span><br><span class="line"> },</span><br><span class="line"> <span class="comment">// 删除用户信息</span></span><br><span class="line"> <span class="function"><span class="title">reomveUserInfo</span>(<span class="params">state</span>)</span> {</span><br><span class="line">   state.userInfo = {}</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>同学们，我们将所有的资料设置到了<strong>userInfo</strong>这个对象中，如果想要取其中一个值，我们还可以在getters中建立相应的映射</p>
</blockquote>
<p>因为我们要做映射，如果初始值为null，一旦引用了getters，就会报错</p>
<p><strong>建立用户名的映射</strong>  <strong><code>src/store/getters.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = {</span><br><span class="line">  <span class="attr">sidebar</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.app.sidebar,</span><br><span class="line">  <span class="attr">device</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.app.device,</span><br><span class="line">  <span class="attr">token</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.token,</span><br><span class="line">  <span class="attr">name</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.userInfo.username <span class="comment">// 建立用户名称的映射</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>到现在为止，我们将用户资料的<strong>action =&gt;  mutation =&gt; state =&gt;  getters</strong> 都设置好了， 那么我们应该在什么位置来调用这个action呢 ？</p>
<blockquote>
<p>别着急，先提交代码，下个小节，我们来揭晓答案</p>
</blockquote>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**封装获取用户资料的action并共享用户状态</p>
<h2 id="权限拦截处调用获取资料action"><a href="#权限拦截处调用获取资料action" class="headerlink" title="权限拦截处调用获取资料action"></a>权限拦截处调用获取资料action</h2><p>**<code>目标</code>**在权限拦截处调用aciton</p>
<h3 id="权限拦截器调用action"><a href="#权限拦截器调用action" class="headerlink" title="权限拦截器调用action"></a>权限拦截器调用action</h3><blockquote>
<p>在上小节中，我们完成了用户资料的整个流程，那么这个action在哪里调用呢？</p>
</blockquote>
<p>用户资料有个硬性要求，**<code>必须有token</code>**才可以获取，那么我们就可以在确定有token的位置去获取用户资料</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200716004526838.png" alt="image-20200716004526838"></p>
<blockquote>
<p>由上图可以看出，一旦确定我们进行了放行，就可以获取用户资料</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200813013009294.png" alt="image-20200813013009294"></p>
<p><strong>调用action</strong> <strong><code>src/permission.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!store.state.user.userInfo.userId) {</span><br><span class="line">      <span class="keyword">await</span> store.dispatch(<span class="string">'user/getUserInfo'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>如果我们觉得获取用户id的方式写了太多层级，可以在vuex中的getters中设置一个映射 <strong><code>src/store/getters.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">userId: <span class="function"><span class="params">state</span> =&gt;</span> state.user.userInfo.userId <span class="comment">// 建立用户id的映射</span></span><br></pre></td></tr></tbody></table></figure>

<p>代码就变成了</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!store.getters.userId) {</span><br><span class="line">       <span class="comment">// 如果没有id这个值 才会调用 vuex的获取资料的action</span></span><br><span class="line">       <span class="keyword">await</span> store.dispatch(<span class="string">'user/getUserInfo'</span>)</span><br><span class="line">       <span class="comment">// 为什么要写await 因为我们想获取完资料再去放行</span></span><br><span class="line">     }</span><br></pre></td></tr></tbody></table></figure>

<p>此时，我们可以通过dev-tools工具在控制台清楚的看到数据已经获取</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200716012120619.png" alt="image-20200716012120619"></p>
<blockquote>
<p>最后一步，只需要将头部菜单中的名称换成真实的用户名即可</p>
</blockquote>
<h3 id="获取头像接口合并数据"><a href="#获取头像接口合并数据" class="headerlink" title="获取头像接口合并数据"></a>获取头像接口合并数据</h3><p><strong>头像怎么办？</strong></p>
<blockquote>
<p>我们发现头像并不在接口的返回体中（接口原因），我们可以通过另一个接口来获取头像，并把头像合并到当前的资料中</p>
</blockquote>
<p><strong>封装获取用户信息接口</strong>  <strong><code>src/api/user.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 获取用户的基本信息  现在写它 完全是为了显示头像</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserDetailById</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/user/<span class="subst">${id}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>这个接口需要用户的userId，在前一个接口处，我们已经获取到了，所以可以直接在后面的内容去衔接</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { login, getUserInfo, getUserDetailById } <span class="keyword">from</span> <span class="string">'@/api/user'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取用户资料action</span></span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="title">getUserInfo</span>(<span class="params">context</span>)</span> {</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> getUserInfo() <span class="comment">// result就是用户的基本资料</span></span><br><span class="line">    <span class="keyword">const</span> baseInfo = <span class="keyword">await</span> getUserDetailById(result.userId) <span class="comment">// 为了获取头像</span></span><br><span class="line">    <span class="keyword">const</span> baseResult = { ...result, ...baseInfo } <span class="comment">// 将两个接口结果合并</span></span><br><span class="line">    <span class="comment">// 此时已经获取到了用户的基本资料 迫不得已 为了头像再次调用一个接口</span></span><br><span class="line">    context.commit(<span class="string">'setUserInfo'</span>, baseResult) <span class="comment">// 提交mutations</span></span><br><span class="line">    <span class="comment">// 加一个点睛之笔  这里这一步，暂时用不到，但是请注意，这给我们后边会留下伏笔</span></span><br><span class="line">    <span class="keyword">return</span> baseResult</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>为了更好地获取头像，同样可以把头像放于getters中</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">staffPhoto: <span class="function"><span class="params">state</span> =&gt;</span> state.user.userInfo.staffPhoto <span class="comment">// 建立用户头像的映射</span></span><br></pre></td></tr></tbody></table></figure>

<p>此时，我们的头像和名称已经获取到了，可以直接将之前的假数据换成真正的头像和名称</p>
<p><strong>用户名</strong>  <strong><code>layout/components/Navbar.vue</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">...mapGetters([</span><br><span class="line">     <span class="string">'sidebar'</span>,</span><br><span class="line">     <span class="string">'name'</span>,</span><br><span class="line">     <span class="string">'staffPhoto'</span></span><br><span class="line">   ])</span><br><span class="line">    &lt;img :src=<span class="string">"staffPhoto"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"user-avatar"</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>{{ name }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>通过设置，用户名已经显示，头像依然没有显示，这是因为虽然有地址，但是地址来源是私有云，目前已经失效，所以需要额外处理下图片的异常</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200827140451144.png" alt="image-20200827140451144"></p>
<p>至于处理图片的异常，我们在下一节中，可采用自定义指令的形式来进行处理</p>
<p>**<code>本节任务</code>**：实现权限拦截处调用获取资料action</p>
<h2 id="自定义指令-解决异常图片情况"><a href="#自定义指令-解决异常图片情况" class="headerlink" title="自定义指令-解决异常图片情况"></a>自定义指令-解决异常图片情况</h2><p>**<code>目标</code>**： 通过自定义指令的形式解决异常图片的处理</p>
<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>注册自定义指令</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'指令名称'</span>, {</span><br><span class="line">    <span class="comment">// 会在当前指令作用的dom元素 插入之后执行</span></span><br><span class="line">    <span class="comment">// options 里面是指令的表达式</span></span><br><span class="line">    <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">dom,options</span>) </span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>自定义指令可以采用统一的文件来管理  <strong><code>src/directives/index.js</code></strong>,这个文件负责管理所有的自定义指令</p>
</blockquote>
<p>首先定义第一个自定义指令  <strong><code>v-imagerror</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> imagerror = {</span><br><span class="line">  <span class="comment">// 指令对象 会在当前的dom元素插入到节点之后执行</span></span><br><span class="line">  <span class="function"><span class="title">inserted</span>(<span class="params">dom, options</span>)</span> {</span><br><span class="line">    <span class="comment">// options是 指令中的变量的解释  其中有一个属性叫做 value</span></span><br><span class="line">    <span class="comment">// dom 表示当前指令作用的dom对象</span></span><br><span class="line">    <span class="comment">// dom认为此时就是图片</span></span><br><span class="line">    <span class="comment">// 当图片有地址 但是地址没有加载成功的时候 会报错 会触发图片的一个事件 =&gt; onerror</span></span><br><span class="line">    dom.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      <span class="comment">// 当图片出现异常的时候 会将指令配置的默认图片设置为该图片的内容</span></span><br><span class="line">      <span class="comment">// dom可以注册error事件</span></span><br><span class="line">      dom.src = options.value <span class="comment">// 这里不能写死</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="在main-js完成自定义指令全局注册"><a href="#在main-js完成自定义指令全局注册" class="headerlink" title="在main.js完成自定义指令全局注册"></a>在main.js完成自定义指令全局注册</h3><p>然后，在**<code>main.js</code>**中完成对于该文件中所有指令的全局注册 </p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> directives <span class="keyword">from</span> <span class="string">'@/directives'</span></span><br><span class="line"><span class="comment">// 注册自定义指令</span></span><br><span class="line"><span class="comment">// 遍历所有的导出的指令对象 完成自定义全局注册</span></span><br><span class="line"><span class="built_in">Object</span>.keys(directives).forEach(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">  <span class="comment">// 注册自定义指令</span></span><br><span class="line">  Vue.directive(key, directives[key])</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>针对上面的引入语法  <strong><code>import *  as  变量</code></strong>  得到的是一个对象**<code>{ 变量1：对象1，变量2： 对象2 ...   }</code>**, 所以可以采用对象遍历的方法进行处理</p>
<p>指令注册成功，可以在**<code>navbar.vue</code>**中直接使用了</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;img v-imageerror="defaultImg" :src="staffPhoto" class="user-avatar"&gt;</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">   <span class="keyword">return</span> {</span><br><span class="line">     <span class="attr">defaultImg</span>: <span class="built_in">require</span>(<span class="string">'@/assets/common/head.jpg'</span>)</span><br><span class="line">   }</span><br><span class="line"> },</span><br></pre></td></tr></tbody></table></figure>

<p>**<code>本节任务</code>**：实现一个自定义指令，解决图片加载异常的问题</p>
<h2 id="实现登出功能"><a href="#实现登出功能" class="headerlink" title="实现登出功能"></a>实现登出功能</h2><p>**<code>目标</code>**：实现用户的登出操作</p>
<blockquote>
<p>登出仅仅是跳到登录页吗？</p>
</blockquote>
<p>不，当然不是，我们要处理如下</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200827143847893.png" alt="image-20200827143847893"></p>
<p>同样的，登出功能，我们在vuex中的用户模块中实现对应的<strong>action</strong></p>
<p><strong>登出action</strong>  <strong><code>src/store/modules/user.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 登出的action</span></span><br><span class="line">  <span class="function"><span class="title">logout</span>(<span class="params">context</span>)</span> {</span><br><span class="line">    <span class="comment">// 删除token</span></span><br><span class="line">    context.commit(<span class="string">'removeToken'</span>) <span class="comment">// 不仅仅删除了vuex中的 还删除了缓存中的</span></span><br><span class="line">    <span class="comment">// 删除用户资料</span></span><br><span class="line">    context.commit(<span class="string">'removeUserInfo'</span>) <span class="comment">// 删除用户信息</span></span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>头部菜单调用action</strong>  <strong><code>src/layout/components/Navbar.vue</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">logout</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.$store.dispatch(<span class="string">'user/logout'</span>) <span class="comment">// 这里不论写不写 await 登出方法都是同步的</span></span><br><span class="line">    <span class="built_in">this</span>.$router.push(<span class="string">`/login`</span>) <span class="comment">// 跳到登录</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>**<code>注意</code>**我们这里也可以采用vuex中的模块化引入辅助函数</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { mapGetters, createNamespacedHelpers  } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">const</span> {  mapActions } = createNamespacedHelpers(<span class="string">'user'</span>) <span class="comment">// 这是的mapAction直接对应模块下的action辅助函数</span></span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    ...mapActions([<span class="string">'lgout'</span>]),</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<p>以上代码，实际上直接对user模块下的action进行了引用，</p>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**： 实现登出功能</p>
<h2 id="Token失效的主动介入"><a href="#Token失效的主动介入" class="headerlink" title="Token失效的主动介入"></a>Token失效的主动介入</h2><p>**<code>目标</code>**： 处理当token失效时业务</p>
<h3 id="主动介入token处理的业务逻辑"><a href="#主动介入token处理的业务逻辑" class="headerlink" title="主动介入token处理的业务逻辑"></a>主动介入token处理的业务逻辑</h3><blockquote>
<p>开门的钥匙不是一直有效的，如果一直有效，会有安全风险，所以我们尝试在客户端进行一下token的时间检查</p>
</blockquote>
<p>具体业务图如下</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200716231205153.png" alt="image-20200716231205153"></p>
<h3 id="流程图转化代码-1"><a href="#流程图转化代码-1" class="headerlink" title="流程图转化代码"></a>流程图转化代码</h3><p><strong>流程图转化代码</strong> <strong><code>src/utils/auth.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timeKey = <span class="string">'hrsaas-timestamp-key'</span> <span class="comment">// 设置一个独一无二的key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取时间戳</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getTimeStamp</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> Cookies.get(timeKey)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 设置时间戳</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setTimeStamp</span>(<span class="params"></span>) </span>{</span><br><span class="line">  Cookies.set(timeKey, <span class="built_in">Date</span>.now())</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong><code>src/utils/request.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"><span class="keyword">import</span> { Message } <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> { getTimeStamp } <span class="keyword">from</span> <span class="string">'@/utils/auth'</span></span><br><span class="line"><span class="keyword">const</span> TimeOut = <span class="number">3600</span> <span class="comment">// 定义超时时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.create({</span><br><span class="line"><span class="comment">// 当执行 npm run dev  =&gt; .evn.development =&gt; /api =&gt; 跨域代理</span></span><br><span class="line">  <span class="attr">baseURL</span>: process.env.VUE_APP_BASE_API, <span class="comment">// npm  run dev  =&gt; /api npm run build =&gt;  /prod-api</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span> <span class="comment">// 设置超时时间</span></span><br><span class="line">})</span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> {</span><br><span class="line">  <span class="comment">// config 是请求的配置信息</span></span><br><span class="line">  <span class="comment">// 注入token</span></span><br><span class="line">  <span class="keyword">if</span> (store.getters.token) {</span><br><span class="line">    <span class="comment">// 只有在有token的情况下 才有必要去检查时间戳是否超时</span></span><br><span class="line">    <span class="keyword">if</span> (IsCheckTimeOut()) {</span><br><span class="line">      <span class="comment">// 如果它为true表示 过期了</span></span><br><span class="line">      <span class="comment">// token没用了 因为超时了</span></span><br><span class="line">      store.dispatch(<span class="string">'user/logout'</span>) <span class="comment">// 登出操作</span></span><br><span class="line">      <span class="comment">// 跳转到登录页</span></span><br><span class="line">      router.push(<span class="string">'/login'</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'token超时了'</span>))</span><br><span class="line">    }</span><br><span class="line">    config.headers[<span class="string">'Authorization'</span>] = <span class="string">`Bearer <span class="subst">${store.getters.token}</span>`</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> config <span class="comment">// 必须要返回的</span></span><br><span class="line">}, <span class="function"><span class="params">error</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> {</span><br><span class="line">  <span class="comment">// axios默认加了一层data</span></span><br><span class="line">  <span class="keyword">const</span> { success, message, data } = response.data</span><br><span class="line">  <span class="comment">//   要根据success的成功与否决定下面的操作</span></span><br><span class="line">  <span class="keyword">if</span> (success) {</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 业务已经错误了 还能进then ? 不能 ！ 应该进catch</span></span><br><span class="line">    Message.error(message) <span class="comment">// 提示错误消息</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(message))</span><br><span class="line">  }</span><br><span class="line">}, <span class="function"><span class="params">error</span> =&gt;</span> {</span><br><span class="line">  Message.error(error.message) <span class="comment">// 提示错误信息</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error) <span class="comment">// 返回执行错误 让当前的执行链跳出成功 直接进入 catch</span></span><br><span class="line">})</span><br><span class="line"><span class="comment">// 是否超时</span></span><br><span class="line"><span class="comment">// 超时逻辑  (当前时间  - 缓存中的时间) 是否大于 时间差</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsCheckTimeOut</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> currentTime = <span class="built_in">Date</span>.now() <span class="comment">// 当前时间戳</span></span><br><span class="line">  <span class="keyword">var</span> timeStamp = getTimeStamp() <span class="comment">// 缓存时间戳</span></span><br><span class="line">  <span class="keyword">return</span> (currentTime - timeStamp) / <span class="number">1000</span> &gt; TimeOut</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>**<code>本节注意</code>**：我们在调用登录接口的时候 一定是没有token的，所以token检查不会影响登录接口的调用</p>
<blockquote>
<p>同理，在登录的时候，如果登录成功，我们应该设置时间戳</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定义login action  也需要参数 调用action时 传递过来的参数</span></span><br><span class="line"><span class="comment">// async 标记的函数其实就是一个异步函数 -&gt; 本质是还是 一个promise</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">login</span>(<span class="params">context, data</span>)</span> {</span><br><span class="line">  <span class="comment">// 经过响应拦截器的处理之后 这里的result实际上就是 token</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> login(data) <span class="comment">// 实际上就是一个promise  result就是执行的结果</span></span><br><span class="line">  <span class="comment">// axios默认给数据加了一层data</span></span><br><span class="line">  <span class="comment">// 表示登录接口调用成功 也就是意味着你的用户名和密码是正确的</span></span><br><span class="line">  <span class="comment">// 现在有用户token</span></span><br><span class="line">  <span class="comment">// actions 修改state 必须通过mutations</span></span><br><span class="line">  context.commit(<span class="string">'setToken'</span>, result)</span><br><span class="line">  <span class="comment">// 写入时间戳</span></span><br><span class="line">  setTimeStamp() <span class="comment">// 将当前的最新时间写入缓存</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<blockquote>
<p>有主动处理就有被动处理，也就是后端告诉我们超时了，我们被迫做出反应，如果后端接口没有做处理，主动介入就是一种简单的方式</p>
</blockquote>
<p>**<code>本节任务</code>**：完成token超时的主动介入</p>
<h2 id="Token失效的被动处理"><a href="#Token失效的被动处理" class="headerlink" title="Token失效的被动处理"></a>Token失效的被动处理</h2><p>**<code>目标</code>**： 实现token失效的被动处理</p>
<blockquote>
<p>除了token的主动介入之外，我们还可以对token进行被动的处理，如图</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200818155842864.png" alt="image-20200818155842864"></p>
<p>token超时的错误码是**<code>10002</code>**</p>
<p><strong>代码实现</strong>  <strong><code>src/utils/request.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">error =&gt; {</span><br><span class="line">  <span class="comment">// error 信息 里面 response的对象</span></span><br><span class="line">  <span class="keyword">if</span> (error.response &amp;&amp; error.response.data &amp;&amp; error.response.data.code === <span class="number">10002</span>) {</span><br><span class="line">    <span class="comment">// 当等于10002的时候 表示 后端告诉我token超时了</span></span><br><span class="line">    store.dispatch(<span class="string">'user/logout'</span>) <span class="comment">// 登出action 删除token</span></span><br><span class="line">    router.push(<span class="string">'/login'</span>)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    Message.error(error.message) <span class="comment">// 提示错误信息</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>无论是主动介入还是被动处理，这些操作都是为了更好地处理token，减少错误异常的可能性</p>
</blockquote>
<p><strong><code>本节任务</code></strong>  Token失效的被动处理</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章节我一步步实现了如下的效果</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200716015113164.png" alt="image-20200716015113164"></p>
<p>实际的业务走向</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200827152601712.png" alt="image-20200827152601712"></p>
<p>实际上，我们的主页功能有一个重要的**<code>角色权限</code>**功能还没有完成，此功能等到我们完成基本业务之后再进行展开</p>
<p>中台大型后端平台的深入是一个**<code>抽丝剥茧</code>**的过程，循序渐进的明白每一步的操作是非常关键的。</p>
<h1 id="4-路由和页面"><a href="#4-路由和页面" class="headerlink" title="4.路由和页面"></a>4.路由和页面</h1><h2 id="路由页面整理"><a href="#路由页面整理" class="headerlink" title="路由页面整理"></a>路由页面整理</h2><p><strong><code>目标</code></strong> 删除基础模板中附带的多余页面</p>
<blockquote>
<p>基础模板帮我们提前内置了一些页面，本章节我们进行一下整理</p>
</blockquote>
<p>首先，我们需要知道类似这种大型中台项目的页面路由是如何设置的。</p>
<p><strong>简单项目</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200827153753307.png" alt="image-20200827153753307"></p>
<p><strong>当前项目结构</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200827155342126.png" alt="image-20200827155342126"></p>
<blockquote>
<p>为什么要拆成若干个路由模块呢？ </p>
</blockquote>
<p>因为复杂中台项目的页面众多，不可能把所有的业务都集中在一个文件上进行管理和维护，并且还有最重要的，前端的页面中主要分为两部分，一部分是所有人都可以访问的， 一部分是只有有权限的人才可以访问的，拆分多个模块便于更好的控制</p>
<p><strong>静态路由和动态路由</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200716150421791.png" alt="image-20200716150421791"></p>
<p>**<code>注意</code>**这里的动态路由并不是 <strong>路由传参</strong>的动态路由</p>
<p>了解完成路由设计之后，我们对当前的路由进行一下整理</p>
<p><strong>删除多余的静态路由表</strong>   <strong><code>src/router/index.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * constantRoutes</span></span><br><span class="line"><span class="comment"> * a base page that does not have permission requirements</span></span><br><span class="line"><span class="comment"> * all roles can be accessed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/login'</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/login/index'</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/404'</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/404'</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">component</span>: Layout,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">'/dashboard'</span>,</span><br><span class="line">    <span class="attr">children</span>: [{</span><br><span class="line">      <span class="attr">path</span>: <span class="string">'dashboard'</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">'Dashboard'</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/dashboard/index'</span>),</span><br><span class="line">      <span class="attr">meta</span>: { <span class="attr">title</span>: <span class="string">'Dashboard'</span>, <span class="attr">icon</span>: <span class="string">'dashboard'</span> }</span><br><span class="line">    }]</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 404 page must be placed at the end !!!</span></span><br><span class="line">  { <span class="attr">path</span>: <span class="string">'*'</span>, <span class="attr">redirect</span>: <span class="string">'/404'</span>, <span class="attr">hidden</span>: <span class="literal">true</span> }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>上面代码，我们只对登录页/404/主页进行了保留</p>
</blockquote>
<p>并且我们发现，删除了其他页面之后，左侧导航菜单的数据也只剩下了首页</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200716153900077.png" alt="image-20200716153900077"></p>
<p><strong>这是因为左侧导航菜单的数据来源于路由信息</strong></p>
<p><strong>删除多余的路由组件</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200716154315430.png" alt="image-20200716154315430"></p>
<blockquote>
<p>只保留以上三个路由组件的内容，后续慢慢增加</p>
</blockquote>
<p>同样的在api目录下，存在多余的api-table.js 一并删除</p>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**：完成业务路由页面的整理</p>
<h2 id="业务模块页面的快速搭建"><a href="#业务模块页面的快速搭建" class="headerlink" title="业务模块页面的快速搭建"></a>业务模块页面的快速搭建</h2><p>**<code>目标</code>**： 快速搭建人资项目的常规业务模块</p>
<h3 id="新建模块的页面和路由文件"><a href="#新建模块的页面和路由文件" class="headerlink" title="新建模块的页面和路由文件"></a>新建模块的页面和路由文件</h3><blockquote>
<p>截止到现在，我们已经完成了一个中台系统的基本轮廓，如图</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200716224038544.png" alt="image-20200716224038544"></p>
<p>接下来，我们可以将人力资源需要做的模块快速搭建相应的页面和路由</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">├── dashboard           <span class="comment"># 首页</span></span><br><span class="line">├── login               <span class="comment"># 登录</span></span><br><span class="line">├── 404                 <span class="comment"># 404</span></span><br><span class="line">├── departments         <span class="comment"># 组织架构</span></span><br><span class="line">├── employees           <span class="comment"># 员工</span></span><br><span class="line">├── setting             <span class="comment"># 公司设置</span></span><br><span class="line">├── salarys             <span class="comment"># 工资</span></span><br><span class="line">├── social              <span class="comment"># 社保</span></span><br><span class="line">├── attendances         <span class="comment"># 考勤</span></span><br><span class="line">├── approvals           <span class="comment"># 审批</span></span><br><span class="line">├── permission          <span class="comment"># 权限管理</span></span><br></pre></td></tr></tbody></table></figure>

<p>根据上图中的结构，在views目录下，建立对应的目录，给每个模块新建一个**<code>index.vue</code>**，作为每个模块的主页</p>
<p><strong>快速新建文件夹</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mkdir departments employees setting salarys social attendances approvals permission</span><br></pre></td></tr></tbody></table></figure>

<p>每个模块的内容，可以先按照标准的模板建立，如</p>
<p><strong>员工</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="dashboard-container"&gt;</span><br><span class="line">    &lt;div class="app-container"&gt;</span><br><span class="line">      &lt;h2&gt;</span><br><span class="line">        员工</span><br><span class="line">      &lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>根据以上的标准建立好对应页面之后，接下来建立每个模块的路由规则</p>
</blockquote>
<p>路由模块目录结构</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">├── router               <span class="comment"># 路由目录</span></span><br><span class="line"> ├── index.js            <span class="comment"># 路由主文件</span></span><br><span class="line"> ├── modules             <span class="comment"># 模块目录</span></span><br><span class="line">  ├── departments.js     <span class="comment"># 组织架构</span></span><br><span class="line">  ├── employees.js       <span class="comment"># 员工 </span></span><br><span class="line">  ├── setting.js         <span class="comment"># 公司设置</span></span><br><span class="line">  ├── salarys.js         <span class="comment"># 工资</span></span><br><span class="line">  ├── social.js          <span class="comment"># 社保</span></span><br><span class="line">  ├── attendances.js     <span class="comment"># 考勤</span></span><br><span class="line">  ├── approvals.js       <span class="comment"># 审批</span></span><br><span class="line">  ├── permission.js      <span class="comment"># 权限管理</span></span><br></pre></td></tr></tbody></table></figure>

<p>快速创建命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ touch departments.js employees.js setting.js salarys.js salarys.js social.js attendances.js approvals.js permission.js</span><br></pre></td></tr></tbody></table></figure>

<h3 id="设置每个模块的路由规则"><a href="#设置每个模块的路由规则" class="headerlink" title="设置每个模块的路由规则"></a>设置每个模块的路由规则</h3><blockquote>
<p>每个模块导出的内容表示该模块下的路由规则</p>
</blockquote>
<p>如员工 <strong>employees.js</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 导出属于员工的路由规则</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'@/layout'</span></span><br><span class="line"><span class="comment">//  {  path: '', component: '' }</span></span><br><span class="line"><span class="comment">// 每个子模块 其实 都是外层是layout  组件位于layout的二级路由里面</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">path</span>: <span class="string">'/employees'</span>, <span class="comment">// 路径</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">'employees'</span>, <span class="comment">// 给路由规则加一个name</span></span><br><span class="line">  <span class="attr">component</span>: Layout, <span class="comment">// 组件</span></span><br><span class="line">  <span class="comment">// 配置二级路的路由表</span></span><br><span class="line">  <span class="attr">children</span>: [{</span><br><span class="line">    <span class="attr">path</span>: <span class="string">''</span>, <span class="comment">// 这里当二级路由的path什么都不写的时候 表示该路由为当前二级路由的默认路由</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/employees'</span>),</span><br><span class="line">    <span class="comment">// 路由元信息  其实就是存储数据的对象 我们可以在这里放置一些信息</span></span><br><span class="line">    <span class="attr">meta</span>: {</span><br><span class="line">      <span class="attr">title</span>: <span class="string">'员工管理'</span> <span class="comment">// meta属性的里面的属性 随意定义 但是这里为什么要用title呢， 因为左侧导航会读取我们的路由里的meta里面的title作为显示菜单名称</span></span><br><span class="line">    }</span><br><span class="line">  }]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当你的访问地址 是 /employees的时候 layout组件会显示 此时 你的二级路由的默认组件  也会显示</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>上述代码中，我们用到了meta属性，该属性为一个对象，里面可放置自定义属性，主要用于读取一些配置和参数，并且值得**<code>注意</code><strong>的是：我们的meta写了二级默认路由上面，而不是一级路由，因为当存在二级路由的时候，访问当前路由信息访问的就是</strong><code>二级默认路由</code>**</p>
</blockquote>
<p>大家针对上述的设计，对上面的模块进行快速的搭建</p>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**：完成其他模块的页面和路由的快速搭建</p>
<h2 id="静态路由和动态路由临时合并，形成左侧菜单"><a href="#静态路由和动态路由临时合并，形成左侧菜单" class="headerlink" title="静态路由和动态路由临时合并，形成左侧菜单"></a>静态路由和动态路由临时合并，形成左侧菜单</h2><p>**<code>目标</code>**： 将静态路由和动态路由的路由表进行临时合并</p>
<blockquote>
<p>什么叫临时合并？</p>
</blockquote>
<p>在第一个小节中，我们讲过了，动态路由是需要权限进行访问的，但是权限的动态路由访问是很复杂的，我们稍后在进行讲解，所以为了更好地看到效果，我们可以先将 静态路由和动态路由进行合并</p>
<p><strong>路由主文件</strong>  <strong><code>src/router/index.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 引入多个模块的规则</span></span><br><span class="line"><span class="keyword">import</span> approvalsRouter <span class="keyword">from</span> <span class="string">'./modules/approvals'</span></span><br><span class="line"><span class="keyword">import</span> departmentsRouter <span class="keyword">from</span> <span class="string">'./modules/departments'</span></span><br><span class="line"><span class="keyword">import</span> employeesRouter <span class="keyword">from</span> <span class="string">'./modules/employees'</span></span><br><span class="line"><span class="keyword">import</span> permissionRouter <span class="keyword">from</span> <span class="string">'./modules/permission'</span></span><br><span class="line"><span class="keyword">import</span> attendancesRouter <span class="keyword">from</span> <span class="string">'./modules/attendances'</span></span><br><span class="line"><span class="keyword">import</span> salarysRouter <span class="keyword">from</span> <span class="string">'./modules/salarys'</span></span><br><span class="line"><span class="keyword">import</span> settingRouter <span class="keyword">from</span> <span class="string">'./modules/setting'</span></span><br><span class="line"><span class="keyword">import</span> socialRouter <span class="keyword">from</span> <span class="string">'./modules/social'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRoutes = [</span><br><span class="line">  approvalsRouter,</span><br><span class="line">  departmentsRouter,</span><br><span class="line">  employeesRouter,</span><br><span class="line">  permissionRouter,</span><br><span class="line">  attendancesRouter,</span><br><span class="line">  salarysRouter,</span><br><span class="line">  settingRouter,</span><br><span class="line">  socialRouter</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> createRouter = <span class="function">() =&gt;</span> <span class="keyword">new</span> Router({</span><br><span class="line">  <span class="comment">// mode: 'history', // require service support</span></span><br><span class="line">  <span class="attr">scrollBehavior</span>: <span class="function">() =&gt;</span> ({ <span class="attr">y</span>: <span class="number">0</span> }), <span class="comment">// 管理滚动行为 如果出现滚动 切换就让 让页面回到顶部</span></span><br><span class="line">  <span class="attr">routes</span>: [...constantRoutes, ...asyncRoutes] <span class="comment">// 临时合并所有的路由</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>通过上面的操作，我们将静态路由和动态路由进行了合并</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200827170403463.png" alt="image-20200827170403463"></p>
<p>当我们合并权限完成，我们惊奇的发现页面效果已经左侧的导航菜单 =》 路由页面</p>
<p>这是之前基础模板中对于左侧导航菜单的封装</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200720003233026.png" alt="image-20200720003233026"></p>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**： 将静态路由和动态路由临时合并，形成左侧菜单 </p>
<h2 id="左侧菜单的显示逻辑，设置菜单图标"><a href="#左侧菜单的显示逻辑，设置菜单图标" class="headerlink" title="左侧菜单的显示逻辑，设置菜单图标"></a>左侧菜单的显示逻辑，设置菜单图标</h2><p><strong><code>目标</code></strong>  解析左侧菜单的显示逻辑，  设置左侧导航菜单的图标内容</p>
<blockquote>
<p>上小节中，我们集成了路由，菜单就显示内容了，这是为什么 ？</p>
</blockquote>
<p><strong>阅读左侧菜单代码</strong></p>
<blockquote>
<p>我们发现如图的逻辑</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200828103109646.png" alt="image-20200828103109646"></p>
<p>由于，该项目不需要二级菜单的显示，所以对代码进行一下处理，只保留一级菜单路由</p>
<p><strong><code>src/layout/components/Sidebar/SidebarItem.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if="!item.hidden"&gt;</span><br><span class="line">    &lt;template v-if="hasOneShowingChild(item.children,item) &amp;&amp; (!onlyOneChild.children||onlyOneChild.noShowingChildren)&amp;&amp;!item.alwaysShow"&gt;</span><br><span class="line">      &lt;app-link v-if="onlyOneChild.meta" :to="resolvePath(onlyOneChild.path)"&gt;</span><br><span class="line">        &lt;el-menu-item :index="resolvePath(onlyOneChild.path)" :class="{'submenu-title-noDropdown':!isNest}"&gt;</span><br><span class="line">          &lt;item :icon="onlyOneChild.meta.icon||(item.meta&amp;&amp;item.meta.icon)" :title="onlyOneChild.meta.title" /&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">      &lt;/app-link&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- &lt;el-submenu v-else ref="subMenu" :index="resolvePath(item.path)" popper-append-to-body&gt;</span><br><span class="line">      &lt;template slot="title"&gt;</span><br><span class="line">        &lt;item v-if="item.meta" :icon="item.meta &amp;&amp; item.meta.icon" :title="item.meta.title" /&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;sidebar-item</span><br><span class="line">        v-for="child in item.children"</span><br><span class="line">        :key="child.path"</span><br><span class="line">        :is-nest="true"</span><br><span class="line">        :item="child"</span><br><span class="line">        :base-path="resolvePath(child.path)"</span><br><span class="line">        class="nest-menu"</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/el-submenu&gt; --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>**<code>本节注意</code><strong>：通过代码发现，当路由中的属性</strong><code>hidden</code>**为true时，表示该路由不显示在左侧菜单中</p>
<blockquote>
<p>与此同时，我们发现左侧菜单并不协调，是因为缺少图标。在本项目中，我们的图标采用了SVG的组件</p>
</blockquote>
<p>左侧菜单的图标实际上读取的是meta属性的icon，这个icon需要我们提前放置在**<code>src/icons/svg</code>**目录下</p>
<blockquote>
<p>该资源已经在菜单svg目录中提供，请将该目录下的所有svg放到**<code>src/icons/svg</code>**目录下</p>
</blockquote>
<p> 具体的icon名称可参考<a href="https://panjiachen.github.io/vue-element-admin/#/icon/index">线上地址</a></p>
<p>functional为true，表示该组件为一个函数式组件</p>
<p>函数式组件： 没有data状态，没有响应式数据，只会接收props属性， 没有this， 他就是一个函数</p>
<p><strong>模块对应icon</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">├── dashboard           <span class="comment"># dashboard</span></span><br><span class="line">├── departments         <span class="comment"># tree</span></span><br><span class="line">├── employees           <span class="comment"># people</span></span><br><span class="line">├── setting             <span class="comment"># setting</span></span><br><span class="line">├── salarys             <span class="comment"># money</span></span><br><span class="line">├── social              <span class="comment"># table</span></span><br><span class="line">├── attendances         <span class="comment"># skill</span></span><br><span class="line">├── approvals           <span class="comment"># tree-table</span></span><br><span class="line">├── permission          <span class="comment"># lock</span></span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200720010016813.png" alt="image-20200720010016813"></p>
<p>按照对应的icon设置图标</p>
<p><strong><code>本节任务：</code></strong> 理解左侧菜单的生成逻辑，并设置左侧菜单的图标</p>
<h1 id="5-组织结构"><a href="#5-组织结构" class="headerlink" title="5.组织结构"></a>5.组织结构</h1><h2 id="组织架构树形结构布局"><a href="#组织架构树形结构布局" class="headerlink" title="组织架构树形结构布局"></a>组织架构树形结构布局</h2><p>**<code>目标</code>**：使用element-UI组件布局组织架构的基本布局</p>
<h3 id="认识组织架构"><a href="#认识组织架构" class="headerlink" title="认识组织架构"></a>认识组织架构</h3><p><a href="%5Bhttp://czpm.itcast.cn/ihrm/#g=1&amp;p=%E7%BB%84%E7%BB%87%E6%9E%B6%E6%9E%84%5D(http://czpm.itcast.cn/ihrm/#g=1&amp;p=%E7%BB%84%E7%BB%87%E6%9E%B6%E6%9E%84)">组织架构产品prd</a></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200828105046683.png" alt="image-20200828105046683"></p>
<blockquote>
<p>一个企业的组织架构是该企业的灵魂，组织架构多常采用树形金字塔式结构，本章节，我们布局出页面的基本结构</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200720010954202.png" alt="image-20200720010954202"> </p>
<h3 id="实现组织架构的头部内容"><a href="#实现组织架构的头部内容" class="headerlink" title="实现组织架构的头部内容"></a>实现组织架构的头部内容</h3><p>首先实现头部的结构，采用element的<strong>行列布局</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-card class="tree-card"&gt;</span><br><span class="line">     &lt;!-- 用了一个行列布局 --&gt;</span><br><span class="line">     &lt;el-row type="flex" justify="space-between" align="middle" style="height: 40px"&gt;</span><br><span class="line">       &lt;el-col&gt;</span><br><span class="line">         &lt;span&gt;江苏传智播客教育科技股份有限公司&lt;/span&gt;</span><br><span class="line">       &lt;/el-col&gt;</span><br><span class="line">       &lt;el-col :span="4"&gt;</span><br><span class="line">         &lt;el-row type="flex" justify="end"&gt;</span><br><span class="line">           &lt;!-- 两个内容 --&gt;</span><br><span class="line">           &lt;el-col&gt;负责人&lt;/el-col&gt;</span><br><span class="line">           &lt;el-col&gt;</span><br><span class="line">             &lt;!-- 下拉菜单 element --&gt;</span><br><span class="line">             &lt;el-dropdown&gt;</span><br><span class="line">               &lt;span&gt;</span><br><span class="line">                 操作&lt;i class="el-icon-arrow-down" /&gt;</span><br><span class="line">               &lt;/span&gt;</span><br><span class="line">               &lt;!-- 下拉菜单 --&gt;</span><br><span class="line">               &lt;el-dropdown-menu slot="dropdown"&gt;</span><br><span class="line">                 &lt;el-dropdown-item&gt;添加子部门&lt;/el-dropdown-item&gt;</span><br><span class="line">               &lt;/el-dropdown-menu&gt;</span><br><span class="line">             &lt;/el-dropdown&gt;</span><br><span class="line">           &lt;/el-col&gt;</span><br><span class="line">         &lt;/el-row&gt;</span><br><span class="line">       &lt;/el-col&gt;</span><br><span class="line">     &lt;/el-row&gt;</span><br><span class="line">   &lt;/el-card&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>样式</strong></p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line"><span class="selector-class">.tree-card</span> {</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>  <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200720180221662.png" alt="image-20200720180221662"></p>
<h3 id="树形组件认识"><a href="#树形组件认识" class="headerlink" title="树形组件认识"></a>树形组件认识</h3><p>接下来，实现树形的结构，采用element的**<a href="https://element.eleme.cn/#/zh-CN/component/tree">tree组件</a>**， 如图效果</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200828105634138.png" alt="image-20200828105634138"></p>
<blockquote>
<p>树形组件属性</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
<th align="left">类型</th>
<th align="left">可选值</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">default-expand-all</td>
<td align="left">是否默认展开所有节点</td>
<td align="left">boolean</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">data</td>
<td align="left">展示数据</td>
<td align="left">array</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">node-key</td>
<td align="left">每个树节点用来作为唯一标识的属性，整棵树应该是唯一的</td>
<td align="left">String</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">props</td>
<td align="left">配置选项，具体看下表</td>
<td align="left">object</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
</tbody></table>
<p><strong>props属性</strong></p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
<th align="left">类型</th>
<th align="left">可选值</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">label</td>
<td align="left">指定节点标签为节点对象的某个属性值</td>
<td align="left">string, function(data, node)</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">children</td>
<td align="left">指定子树为节点对象的某个属性值</td>
<td align="left">string</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">disabled</td>
<td align="left">指定节点选择框是否禁用为节点对象的某个属性值</td>
<td align="left">boolean, function(data, node)</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">isLeaf</td>
<td align="left">指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效</td>
<td align="left">boolean, function(data, node)</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
</tbody></table>
<p><strong>data</strong>是组成树形数据的关键，如下的数据便能构建树形数据</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">[{</span><br><span class="line">         label: '一级 <span class="number">1</span>',</span><br><span class="line">         children: [{</span><br><span class="line">           label: '二级 <span class="number">1</span><span class="number">-1</span>',</span><br><span class="line">           children: [{</span><br><span class="line">             label: '三级 <span class="number">1</span><span class="number">-1</span><span class="number">-1</span>'</span><br><span class="line">           }]</span><br><span class="line">         }]</span><br><span class="line">       }, {</span><br><span class="line">         label: '一级 <span class="number">2</span>',</span><br><span class="line">         children: [{</span><br><span class="line">           label: '二级 <span class="number">2</span><span class="number">-1</span>',</span><br><span class="line">           children: [{</span><br><span class="line">             label: '三级 <span class="number">2</span><span class="number">-1</span><span class="number">-1</span>'</span><br><span class="line">           }]</span><br><span class="line">         }, {</span><br><span class="line">           label: '二级 <span class="number">2</span><span class="number">-2</span>',</span><br><span class="line">           children: [{</span><br><span class="line">             label: '三级 <span class="number">2</span><span class="number">-2</span><span class="number">-1</span>'</span><br><span class="line">           }]</span><br><span class="line">         }]</span><br><span class="line">       }, {</span><br><span class="line">         label: '一级 <span class="number">3</span>',</span><br><span class="line">         children: [{</span><br><span class="line">           label: '二级 <span class="number">3</span><span class="number">-1</span>',</span><br><span class="line">           children: [{</span><br><span class="line">             label: '三级 <span class="number">3</span><span class="number">-1</span><span class="number">-1</span>'</span><br><span class="line">           }]</span><br><span class="line">         }, {</span><br><span class="line">           label: '二级 <span class="number">3</span><span class="number">-2</span>',</span><br><span class="line">           children: [{</span><br><span class="line">             label: '三级 <span class="number">3</span><span class="number">-2</span><span class="number">-1</span>'</span><br><span class="line">           }]</span><br><span class="line">         }]</span><br><span class="line">       }]</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200720232914114.png" alt="image-20200720232914114"></p>
<h3 id="实现树形的静态组织架构"><a href="#实现树形的静态组织架构" class="headerlink" title="实现树形的静态组织架构"></a>实现树形的静态组织架构</h3><p>由此，我们首先实现静态数据的组织架构</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"> &lt;!--放置一个属性   这里的props和我们之前学习的父传子 的props没关系--&gt;</span><br><span class="line"> &lt;el-tree :data="departs" :props="defaultProps" /&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      defaultProps: {</span><br><span class="line">        label: 'name'</span><br><span class="line">      },</span><br><span class="line">      departs: [{ name: '总裁办', children: [{ name: '董事会' }] },</span><br><span class="line">        { name: '行政部' }, { name: '人事部' }]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>接下来，对每个层级节点增加显示内容，此时需要用到tree的插槽</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"> &lt;el-tree :data="departs" :props="defaultProps" :default-expand-all="true"&gt;</span><br><span class="line">          &lt;!-- 传入内容 插槽内容 会循环多次 有多少节点 就循环多少次 --&gt;</span><br><span class="line">          &lt;!-- 作用域插槽 slot-scope="obj" 接收传递给插槽的数据   data 每个节点的数据对象--&gt;</span><br><span class="line">          &lt;el-row slot-scope="{ data }" type="flex" justify="space-between" align="middle" style="height: 40px; width: 100%"&gt;</span><br><span class="line">            &lt;el-col&gt;</span><br><span class="line">              &lt;!-- 左侧内容 --&gt;</span><br><span class="line">              &lt;span&gt;{{ data.name }}&lt;/span&gt;</span><br><span class="line">            &lt;/el-col&gt;</span><br><span class="line">            &lt;el-col :span="4"&gt;</span><br><span class="line">              &lt;el-row type="flex" justify="end"&gt;</span><br><span class="line">                &lt;el-col&gt;{{ data.manager }}&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col&gt;</span><br><span class="line">                  &lt;!-- 放置下拉菜单 --&gt;</span><br><span class="line">                  &lt;el-dropdown&gt;</span><br><span class="line">                    &lt;!-- 内容 --&gt;</span><br><span class="line">                    &lt;span&gt;操作</span><br><span class="line">                      &lt;i class="el-icon-arrow-down" /&gt;</span><br><span class="line">                    &lt;/span&gt;</span><br><span class="line">                    &lt;!-- 具名插槽 --&gt;</span><br><span class="line">                    &lt;el-dropdown-menu slot="dropdown"&gt;</span><br><span class="line">                      &lt;!-- 下拉选项 --&gt;</span><br><span class="line">                      &lt;el-dropdown-item&gt;添加子部门&lt;/el-dropdown-item&gt;</span><br><span class="line">                      &lt;el-dropdown-item&gt;编辑部门&lt;/el-dropdown-item&gt;</span><br><span class="line">                      &lt;el-dropdown-item&gt;删除部门&lt;/el-dropdown-item&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;/el-dropdown-menu&gt;</span><br><span class="line">                  &lt;/el-dropdown&gt;</span><br><span class="line">                &lt;/el-col&gt;</span><br><span class="line">              &lt;/el-row&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 右侧内容 --&gt;</span><br><span class="line">            &lt;/el-col&gt;</span><br><span class="line">          &lt;/el-row&gt;        &lt;/el-tree&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      departs: [{ name: '总裁办', manager: '曹操', children: [{ name: '董事会', manager: '曹丕' }] },</span><br><span class="line">        { name: '行政部', manager: '刘备' },</span><br><span class="line">        { name: '人事部', manager: '孙权' }],</span><br><span class="line">      defaultProps: {</span><br><span class="line">        label: 'name' // 表示 从这个属性显示内容</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>最终形成静态结构效果</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200912150032528.png" alt="image-20200912150032528"></p>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**：完成树形结构的显示</p>
<h2 id="将树形的操作内容单独抽提成组件"><a href="#将树形的操作内容单独抽提成组件" class="headerlink" title="将树形的操作内容单独抽提成组件"></a>将树形的操作内容单独抽提成组件</h2><p>**<code>目标</code>**： 将树形的操作内容单独抽提成组件</p>
<h3 id="封装单独的树操作栏组件"><a href="#封装单独的树操作栏组件" class="headerlink" title="封装单独的树操作栏组件"></a>封装单独的树操作栏组件</h3><blockquote>
<p>通过第一个章节，我们发现，树形的顶级内容实际和子节点的内容是一致的，此时可以将该部分抽提成一个组件，节省代码</p>
</blockquote>
<p>组件 <strong><code>src/views/departments/components/tree-tools.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-row type="flex" justify="space-between" align="middle" style="height: 40px;width: 100%"&gt;</span><br><span class="line">    &lt;el-col&gt;</span><br><span class="line">      &lt;!-- 名称应该变成 对应的节点中的name --&gt;</span><br><span class="line">      &lt;span&gt;{{ treeNode.name }}&lt;/span&gt;</span><br><span class="line">    &lt;/el-col&gt;</span><br><span class="line">    &lt;el-col :span="4"&gt;</span><br><span class="line">      &lt;el-row type="flex" justify="end"&gt;</span><br><span class="line">        &lt;!-- 两个内容 --&gt;</span><br><span class="line">        &lt;el-col&gt;{{ treeNode.manager }}&lt;/el-col&gt;</span><br><span class="line">        &lt;el-col&gt;</span><br><span class="line">          &lt;!-- 下拉菜单 element --&gt;</span><br><span class="line">          &lt;el-dropdown&gt;</span><br><span class="line">            &lt;span&gt;</span><br><span class="line">              操作&lt;i class="el-icon-arrow-down" /&gt;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">            &lt;!-- 下拉菜单 --&gt;</span><br><span class="line">            &lt;el-dropdown-menu slot="dropdown"&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;添加子部门&lt;/el-dropdown-item&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;编辑部门&lt;/el-dropdown-item&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;删除部门&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;/el-dropdown-menu&gt;</span><br><span class="line">          &lt;/el-dropdown&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line">    &lt;/el-col&gt;</span><br><span class="line">  &lt;/el-row&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 该组件需要对外开放属性 外部需要提供一个对象 对象里需要有name  manager</span><br><span class="line">export default {</span><br><span class="line">  // props可以用数组来接收数据 也可以用对象来接收</span><br><span class="line">  // props: {   props属性: {  配置选项 }  }</span><br><span class="line">  props: {</span><br><span class="line">    //   定义一个props属性</span><br><span class="line">    treeNode: {</span><br><span class="line">      type: Object, // 对象类型</span><br><span class="line">      required: true // 要求对方使用您的组件的时候 必须传treeNode属性 如果不传 就会报错</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="在组织架构中应用操作栏组件"><a href="#在组织架构中应用操作栏组件" class="headerlink" title="在组织架构中应用操作栏组件"></a>在组织架构中应用操作栏组件</h3><p>接下来，在**<code>src/views/departments/index.vue</code>**进行代码的简化</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="dashboard-container"&gt;</span><br><span class="line">    &lt;div class="app-container"&gt;</span><br><span class="line">      &lt;!-- 实现页面的基本布局 --&gt;</span><br><span class="line">      &lt;el-card class="tree-card"&gt;</span><br><span class="line">        &lt;!-- 用了一个行列布局 --&gt;</span><br><span class="line">        &lt;!-- 缺少treeNode --&gt;</span><br><span class="line">        &lt;tree-tools :tree-node="company" /&gt;</span><br><span class="line">        &lt;!--放置一个属性   这里的props和我们之前学习的父传子 的props没关系--&gt;</span><br><span class="line">        &lt;el-tree :data="departs" :props="defaultProps" default-expand-all&gt;</span><br><span class="line">          &lt;!-- 说明el-tree里面的这个内容 就是插槽内容 =&gt; 填坑内容  =&gt; 有多少个节点循环多少次 --&gt;</span><br><span class="line">          &lt;!-- scope-scope 是 tree组件传给每个节点的插槽的内容的数据 --&gt;</span><br><span class="line">          &lt;!-- 顺序一定是 执行slot-scope的赋值 才去执行 props的传值 --&gt;</span><br><span class="line">          &lt;tree-tools slot-scope="{ data }" :tree-node="data" /&gt;</span><br><span class="line">        &lt;/el-tree&gt;</span><br><span class="line">      &lt;/el-card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>上面代码中，company变量需要在data中定义</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">company: { <span class="attr">name</span>: <span class="string">'江苏传智播客教育科技股份有限公司'</span>, <span class="attr">manager</span>: <span class="string">'负责人'</span> },</span><br></pre></td></tr></tbody></table></figure>

<p>同时，由于在两个位置都使用了该组件，但是放置在最上层的组件是不需要显示 **<code>删除部门</code><strong>和</strong><code>编辑部门</code>**的</p>
<p>所以，增加一个新的属性 **<code>isRoot（是否根节点）</code>**进行控制</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">props: {</span><br><span class="line">   <span class="attr">treeNode</span>: {</span><br><span class="line">     <span class="attr">required</span>: <span class="literal">true</span>, <span class="comment">// 设置当前数据为必填</span></span><br><span class="line">     <span class="attr">type</span>: <span class="built_in">Object</span> <span class="comment">// 类型是Object</span></span><br><span class="line">   },</span><br><span class="line">   <span class="attr">isRoot</span>: {</span><br><span class="line">     <span class="attr">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">     <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">   }</span><br><span class="line"> }</span><br><span class="line">&lt;tree-tools :tree-node=<span class="string">"company"</span> :is-root=<span class="string">"true"</span> /&gt;</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure>

<p>组件中， 根据isRoot判断显示</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 编辑部门和删除部门只会在子节点上显示 --&gt;</span><br><span class="line">     &lt;el-dropdown-item v-if="!isRoot"&gt;编辑部门&lt;/el-dropdown-item&gt;</span><br><span class="line">    &lt;el-dropdown-item v-if="!isRoot"&gt;删除部门&lt;/el-dropdown-item&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>通过封装，代码看上去更加紧凑，简洁，这就是封装的魅力</p>
</blockquote>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**：将树形内容单独抽提组件</p>
<h2 id="获取组织架构数据，并进行树形处理"><a href="#获取组织架构数据，并进行树形处理" class="headerlink" title="获取组织架构数据，并进行树形处理"></a>获取组织架构数据，并进行树形处理</h2><p>**<code>目标</code>**获取真实的组织架构数据，并将其转化成树形数据显示在页面上</p>
<h3 id="封装API接口，获取组织架构数据"><a href="#封装API接口，获取组织架构数据" class="headerlink" title="封装API接口，获取组织架构数据"></a>封装API接口，获取组织架构数据</h3><blockquote>
<p>现在基本的静态结构已经形成，接下来需要获取真实的数据</p>
</blockquote>
<p>首先，<strong>封装获取组织架构的请求</strong> <strong><code>src/api/departments.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 获取组织架构数据</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getDepartments</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/company/department'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>在钩子函数中调用接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> TreeTools <span class="keyword">from</span> <span class="string">'./components/tree-tools'</span></span><br><span class="line"><span class="keyword">import</span> { getDepartments } <span class="keyword">from</span> <span class="string">'@/api/departments'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">components</span>: {</span><br><span class="line">    TreeTools</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">company</span>: { }, <span class="comment">// 就是头部的数据结构</span></span><br><span class="line">      <span class="attr">departs</span>: [],</span><br><span class="line">      <span class="attr">defaultProps</span>: {</span><br><span class="line">        <span class="attr">label</span>: <span class="string">'name'</span> <span class="comment">// 表示 从这个属性显示内容</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.getDepartments() <span class="comment">// 调用自身的方法</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getDepartments</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> getDepartments()</span><br><span class="line">      <span class="built_in">this</span>.company = { <span class="attr">name</span>: result.companyName, <span class="attr">manager</span>: <span class="string">'负责人'</span> }</span><br><span class="line">      <span class="built_in">this</span>.departs = result.depts <span class="comment">// 需要将其转化成树形结构</span></span><br><span class="line">      <span class="built_in">console</span>.log(result)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="将数组数据转化成树形结构"><a href="#将数组数据转化成树形结构" class="headerlink" title="将数组数据转化成树形结构"></a>将数组数据转化成树形结构</h3><p>然后，我们需要将列表型的数据，转化成树形数据，这里需要用到<strong>递归算法</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200721010931214.png" alt="image-20200721010931214"></p>
<p>封装一个工具方法，**<code>src/utils/index.js</code>**</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  将列表型的数据转化成树形数据 =&gt; 递归算法 =&gt; 自身调用自身 =&gt; 一定条件不能一样， 否则就会死循环</span></span><br><span class="line"><span class="comment"> *  遍历树形 有一个重点 要先找一个头儿</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">tranListToTreeData</span>(<span class="params">list, rootValue</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> arr = []</span><br><span class="line">  list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (item.pid === rootValue) {</span><br><span class="line">      <span class="comment">// 找到之后 就要去找 item 下面有没有子节点</span></span><br><span class="line">      <span class="keyword">const</span> children = tranListToTreeData(list, item.id)</span><br><span class="line">      <span class="keyword">if</span> (children.length) {</span><br><span class="line">        <span class="comment">// 如果children的长度大于0 说明找到了子节点</span></span><br><span class="line">        item.children = children</span><br><span class="line">      }</span><br><span class="line">      arr.push(item) <span class="comment">// 将内容加入到数组中</span></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>调用转化方法，转化树形结构</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.company = { <span class="attr">name</span>: result.companyName, <span class="attr">manager</span>: <span class="string">'负责人'</span> } <span class="comment">// 这里定义一个空串  因为 它是根 所有的子节点的数据pid 都是 ""</span></span><br><span class="line"> <span class="built_in">this</span>.departs = transListToTreeData(result.depts, <span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>这样一来，树形数据就有了，下一章节，就可以针对部门进行操作</p>
<p><strong>提交代码</strong></p>
<p><strong><code>本节任务</code></strong> 获取组织架构数据，并进行树形处理</p>
<h2 id="删除部门功能实现"><a href="#删除部门功能实现" class="headerlink" title="删除部门功能实现"></a>删除部门功能实现</h2><p>**<code>目标</code>**实现操作功能的删除功能</p>
<h3 id="封装删除接口，注册下拉菜单事件"><a href="#封装删除接口，注册下拉菜单事件" class="headerlink" title="封装删除接口，注册下拉菜单事件"></a>封装删除接口，注册下拉菜单事件</h3><p>首先，封装删除功能模块 <strong><code>src/api/departments.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> *  根据id根据部门  接口是根据restful的规则设计的   删除 delete  新增 post  修改put 获取 get</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">delDepartments</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/company/department/<span class="subst">${id}</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'delete'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>然后，在tree-tools组件中，监听下拉菜单的点击事件  <strong><code>src/views/departments/index.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-dropdown @command="operateDepts"&gt;</span><br><span class="line">  &lt;span&gt;</span><br><span class="line">    操作&lt;i class="el-icon-arrow-down" /&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;!-- 下拉菜单 --&gt;</span><br><span class="line">  &lt;el-dropdown-menu slot="dropdown"&gt;</span><br><span class="line">    &lt;el-dropdown-item command="add"&gt;添加子部门&lt;/el-dropdown-item&gt;</span><br><span class="line">    &lt;!-- 编辑部门和删除部门只会在子节点上显示 --&gt;</span><br><span class="line">    &lt;el-dropdown-item v-if="!isRoot" command="edit"&gt;编辑部门&lt;/el-dropdown-item&gt;</span><br><span class="line">    &lt;el-dropdown-item v-if="!isRoot" command="del"&gt;删除部门&lt;/el-dropdown-item&gt;</span><br><span class="line">  &lt;/el-dropdown-menu&gt;</span><br><span class="line">&lt;/el-dropdown&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>dropdown下拉菜单的监听事件command</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 操作节点调用的方法</span></span><br><span class="line"><span class="function"><span class="title">operateDepts</span>(<span class="params">type</span>)</span> {</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">'add'</span>) {</span><br><span class="line">    <span class="comment">// 添加子部门的操作</span></span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'edit'</span>) {</span><br><span class="line">    <span class="comment">//  编辑部门的操作</span></span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">//  删除操作</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="调用删除接口，通知父组件更新数据"><a href="#调用删除接口，通知父组件更新数据" class="headerlink" title="调用删除接口，通知父组件更新数据"></a>调用删除接口，通知父组件更新数据</h3><blockquote>
<p>删除之前，提示用户是否删除，然后调用删除接口</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 操作节点调用的方法</span></span><br><span class="line"><span class="function"><span class="title">operateDepts</span>(<span class="params">type</span>)</span> {</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">'add'</span>) {</span><br><span class="line">    <span class="comment">// 添加子部门的操作</span></span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'edit'</span>) {</span><br><span class="line">    <span class="comment">//  编辑部门的操作</span></span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">//  删除操作</span></span><br><span class="line">    <span class="built_in">this</span>.$confirm(<span class="string">'确定要删除该部门吗'</span>).then(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="comment">// 如果点击了确定就会进入then</span></span><br><span class="line">      <span class="keyword">return</span> delDepartments(<span class="built_in">this</span>.treeNode.id) <span class="comment">// 返回promise对象</span></span><br><span class="line">    }).then(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="comment">//  如果删除成功了  就会进入这里</span></span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>上面代码中，我们已经成功删除了员工数据，但是怎么通知父组件进行更新呢</p>
</blockquote>
<p>在前面的课程中，我们已经学习过可以通过自定义事件**<code>this.$emit</code>**的方式来进行</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//  如果删除成功了  就会进入这里</span></span><br><span class="line">        <span class="built_in">this</span>.$emit(<span class="string">'delDepts'</span>) <span class="comment">// 触发自定义事件</span></span><br><span class="line">        <span class="built_in">this</span>.$message.success(<span class="string">'删除部门成功'</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>父组件监听事件 <strong><code>src/views/department/index.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;tree-tools slot-scope="obj" :tree-node="obj.data" @delDepts="getDepartments" /&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**：删除部门功能实现</p>
<h2 id="新增部门功能-建立组件"><a href="#新增部门功能-建立组件" class="headerlink" title="新增部门功能-建立组件"></a>新增部门功能-建立组件</h2><p>**<code>目标</code>**：实现新增部门功能的组件建立</p>
<h3 id="封装新增接口，新建组件中的弹层结构"><a href="#封装新增接口，新建组件中的弹层结构" class="headerlink" title="封装新增接口，新建组件中的弹层结构"></a>封装新增接口，新建组件中的弹层结构</h3><p>首先， 封装新增部门的api模块  <strong><code>src/api/departments.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  新增部门接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ****/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addDepartments</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/company/department'</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'post'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>然后，我们需要构建一个新增部门的窗体组件 <strong><code>src/views/department/components/add-dept.vue</code></strong></p>
<p>其中的交互设计如下</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200828162901390.png" alt="image-20200828162901390"></p>
<p><a href="%5Bhttp://czpm.itcast.cn/ihrm/#g=1&amp;p=%E7%BB%84%E7%BB%87%E6%9E%B6%E6%9E%84%5D(http://czpm.itcast.cn/ihrm/#g=1&amp;p=%E7%BB%84%E7%BB%87%E6%9E%B6%E6%9E%84)">设计要求</a></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 新增部门的弹层 --&gt;</span><br><span class="line">  &lt;el-dialog title="新增部门"&gt;</span><br><span class="line">    &lt;!-- 表单组件  el-form   label-width设置label的宽度   --&gt;</span><br><span class="line">    &lt;!-- 匿名插槽 --&gt;</span><br><span class="line">    &lt;el-form label-width="120px"&gt;</span><br><span class="line">      &lt;el-form-item label="部门名称"&gt;</span><br><span class="line">        &lt;el-input style="width:80%" placeholder="1-50个字符" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label="部门编码"&gt;</span><br><span class="line">        &lt;el-input style="width:80%" placeholder="1-50个字符" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label="部门负责人"&gt;</span><br><span class="line">        &lt;el-select style="width:80%" placeholder="请选择" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label="部门介绍"&gt;</span><br><span class="line">        &lt;el-input style="width:80%" placeholder="1-300个字符" type="textarea" :rows="3" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">    &lt;!-- el-dialog有专门放置底部操作栏的 插槽  具名插槽 --&gt;</span><br><span class="line">    &lt;el-row slot="footer" type="flex" justify="center"&gt;</span><br><span class="line">      &lt;!-- 列被分为24 --&gt;</span><br><span class="line">      &lt;el-col :span="6"&gt;</span><br><span class="line">        &lt;el-button type="primary" size="small"&gt;确定&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button size="small"&gt;取消&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">  &lt;/el-dialog&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="点击新增子部门显示弹层组件"><a href="#点击新增子部门显示弹层组件" class="headerlink" title="点击新增子部门显示弹层组件"></a>点击新增子部门显示弹层组件</h3><p>然后，我们需要用属性控制组件的显示或者隐藏</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 需要传入一个props变量来控制 显示或者隐藏</span></span><br><span class="line"><span class="attr">props</span>: {</span><br><span class="line">  <span class="attr">showDialog</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-dialog title="新增部门" :visible="showDialog"&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>在**<code>departments/index.vue</code>** 中引入该组件</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> AddDept <span class="keyword">from</span> <span class="string">'./components/add-dept'</span> <span class="comment">// 引入新增部门组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">components</span>: { AddDept }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>定义控制窗体显示的变量**<code>showDialog</code>**</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">   <span class="keyword">return</span> {</span><br><span class="line">     <span class="attr">showDialog</span>: <span class="literal">false</span> <span class="comment">// 显示窗体</span></span><br><span class="line">   }</span><br><span class="line"> },</span><br><span class="line">   &lt;!-- 放置新增弹层组件  --&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">add-dept</span> <span class="attr">:show-dialog</span>=<span class="string">"showDialog"</span> /&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<p>当点击新增部门时，弹出组件</p>
<blockquote>
<p> 注意，点击新增时tree-tools组件，所以这里，我们依然需要子组件调用父组件</p>
</blockquote>
<p><strong>子组件触发新增事件</strong>· <strong><code>src/views/departments/tree-tools.vue</code></strong> </p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (type === <span class="string">'add'</span>) {</span><br><span class="line">      <span class="comment">// 添加子部门的操作</span></span><br><span class="line">      <span class="comment">// 告诉父组件 显示弹层</span></span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">'addDepts'</span>, <span class="built_in">this</span>.treeNode) <span class="comment">// 为何传出treeNode 因为是添加子部门 需要当前部门的数据</span></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>父组件监听事件</strong>   </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;tree-tools slot-scope="obj" :tree-node="obj.data" @delDepts="getDepartments" @addDepts="addDepts"  /&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>方法中弹出层,记录在哪个节点下添加子部门</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">addDepts</span>(<span class="params">node</span>)</span> {</span><br><span class="line">     <span class="built_in">this</span>.showDialog = <span class="literal">true</span> <span class="comment">// 显示弹层</span></span><br><span class="line">     <span class="comment">// 因为node是当前的点击的部门， 此时这个部门应该记录下来,</span></span><br><span class="line">     <span class="built_in">this</span>.node = node</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200722084707863.png" alt="image-20200722084707863"></p>
<p>**<code>本节任务</code>**：新增部门功能-建立组件</p>
<h2 id="完成新增部门的规则校验"><a href="#完成新增部门的规则校验" class="headerlink" title="完成新增部门的规则校验"></a>完成新增部门的规则校验</h2><p><strong><code>目标</code></strong> 完成新增部门功能的规则校验和数据提交部分</p>
<h3 id="完成新增表单的基本校验条件"><a href="#完成新增表单的基本校验条件" class="headerlink" title="完成新增表单的基本校验条件"></a>完成新增表单的基本校验条件</h3><p>部门名称（name）：必填 1-50个字符  / 同级部门中禁止出现重复部门</p>
<p>部门编码（code）：必填 1-50个字符  / 部门编码在整个模块中都不允许重复</p>
<p>部门负责人（manager）：必填</p>
<p>部门介绍 ( introduce)：必填 1-300个字符</p>
<blockquote>
<p>定义数据结构</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">formData: {</span><br><span class="line">      <span class="attr">name</span>: <span class="string">''</span>, <span class="comment">// 部门名称</span></span><br><span class="line">      <span class="attr">code</span>: <span class="string">''</span>, <span class="comment">// 部门编码</span></span><br><span class="line">      <span class="attr">manager</span>: <span class="string">''</span>, <span class="comment">// 部门管理者</span></span><br><span class="line">      <span class="attr">introduce</span>: <span class="string">''</span> <span class="comment">// 部门介绍</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>完成表单校验需要的前置条件</p>
</blockquote>
<ul>
<li>el-form配置model和rules属性</li>
<li>el-form-item配置prop属性</li>
<li>表单进行v-model双向绑定</li>
</ul>
<h3 id="配置新增表单的基本校验规则"><a href="#配置新增表单的基本校验规则" class="headerlink" title="配置新增表单的基本校验规则"></a>配置新增表单的基本校验规则</h3><blockquote>
<p>根据这些要求，校验规则</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="comment">// 定义表单数据</span></span><br><span class="line">    <span class="attr">formData</span>: {</span><br><span class="line">      <span class="attr">name</span>: <span class="string">''</span>, <span class="comment">// 部门名称</span></span><br><span class="line">      <span class="attr">code</span>: <span class="string">''</span>, <span class="comment">// 部门编码</span></span><br><span class="line">      <span class="attr">manager</span>: <span class="string">''</span>, <span class="comment">// 部门管理者</span></span><br><span class="line">      <span class="attr">introduce</span>: <span class="string">''</span> <span class="comment">// 部门介绍</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 定义校验规则</span></span><br><span class="line">    <span class="attr">rules</span>: {</span><br><span class="line">      <span class="attr">name</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'部门名称不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">        { <span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">50</span>, <span class="attr">message</span>: <span class="string">'部门名称要求1-50个字符'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }],</span><br><span class="line">      <span class="attr">code</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'部门编码不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">        { <span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">50</span>, <span class="attr">message</span>: <span class="string">'部门编码要求1-50个字符'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }],</span><br><span class="line">      <span class="attr">manager</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'部门负责人不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }],</span><br><span class="line">      <span class="attr">introduce</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'部门介绍不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">        { <span class="attr">trigger</span>: <span class="string">'blur'</span>, <span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">300</span>, <span class="attr">message</span>: <span class="string">'部门介绍要求1-50个字符'</span> }]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="部门名称和部门编码的自定义校验"><a href="#部门名称和部门编码的自定义校验" class="headerlink" title="部门名称和部门编码的自定义校验"></a>部门名称和部门编码的自定义校验</h3><p>**<code>注意</code><strong>：部门名称和部门编码的规则 有两条我们需要通过</strong><code>自定义校验函数validator</code>**来实现</p>
<blockquote>
<p>首先，在校验名称和编码时，要获取最新的组织架构，这也是我们这里trigger采用blur的原因，因为change对于访问的频率过高，我们需要控制访问频率</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 首先获取最新的组织架构数据</span></span><br><span class="line"><span class="keyword">const</span> { depts } = <span class="keyword">await</span> getDepartments()</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>部门名称不能和**<code>同级别</code>**的重复，这里注意，我们需要找到所有同级别的数据，进行校验，所以还需要另一个参数pid</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">props: {</span><br><span class="line">    <span class="comment">//   用来控制窗体是否显示或者隐藏</span></span><br><span class="line">    <span class="attr">showDialog</span>: {</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 当前操作的节点</span></span><br><span class="line">    <span class="attr">treeNode</span>: {</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">add-dept</span> <span class="attr">:show-dialog</span>=<span class="string">"showDialog"</span> <span class="attr">:tree-node</span>=<span class="string">"node"</span> /&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<p>根据当前部门id，找到所有子部门相关的数据，判断是否重复</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 现在定义一个函数 这个函数的目的是 去找 同级部门下 是否有重复的部门名称</span></span><br><span class="line">   <span class="keyword">const</span> checkNameRepeat = <span class="keyword">async</span>(rule, value, callback) =&gt; {</span><br><span class="line">     <span class="comment">// 先要获取最新的组织架构数据</span></span><br><span class="line">     <span class="keyword">const</span> { depts } = <span class="keyword">await</span> getDepartments()</span><br><span class="line">     <span class="comment">// depts是所有的部门数据</span></span><br><span class="line">     <span class="comment">// 如何去找技术部所有的子节点</span></span><br><span class="line">     <span class="keyword">const</span> isRepeat = depts.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.pid === <span class="built_in">this</span>.treeNode.id).some(<span class="function"><span class="params">item</span> =&gt;</span> item.name === value)</span><br><span class="line">     isRepeat ? callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`同级部门下已经有<span class="subst">${value}</span>的部门了`</span>)) : callback()</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>

<p>检查部门编码的过程同理</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 检查编码重复</span></span><br><span class="line">   <span class="keyword">const</span> checkCodeRepeat = <span class="keyword">async</span>(rule, value, callback) =&gt; {</span><br><span class="line">     <span class="comment">// 先要获取最新的组织架构数据</span></span><br><span class="line">     <span class="keyword">const</span> { depts } = <span class="keyword">await</span> getDepartments()</span><br><span class="line">     <span class="keyword">const</span> isRepeat = depts.some(<span class="function"><span class="params">item</span> =&gt;</span> item.code === value &amp;&amp; value) <span class="comment">// 这里加一个 value不为空 因为我们的部门有可能没有code</span></span><br><span class="line">     isRepeat ? callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`组织架构中已经有部门使用<span class="subst">${value}</span>编码`</span>)) : callback()</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>

<p>在规则中定义</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定义校验规则</span></span><br><span class="line"> rules: {</span><br><span class="line">   name: [{ required: <span class="literal">true</span>, message: '部门名称不能为空', trigger: 'blur' },</span><br><span class="line">     { min: <span class="number">1</span>, max: <span class="number">50</span>, message: '部门名称要求<span class="number">1</span><span class="number">-50</span>个字符', trigger: 'blur' }, {</span><br><span class="line">       trigger: 'blur',</span><br><span class="line">       validator: checkNameRepeat <span class="comment">// 自定义函数的形式校验</span></span><br><span class="line">     }],</span><br><span class="line">   code: [{ required: <span class="literal">true</span>, message: '部门编码不能为空', trigger: 'blur' },</span><br><span class="line">     { min: <span class="number">1</span>, max: <span class="number">50</span>, message: '部门编码要求<span class="number">1</span><span class="number">-50</span>个字符', trigger: 'blur' }, {</span><br><span class="line">       trigger: 'blur',</span><br><span class="line">       validator: checkCodeRepeat</span><br><span class="line">     }],</span><br><span class="line">   manager: [{ required: <span class="literal">true</span>, message: '部门负责人不能为空', trigger: 'blur' }],</span><br><span class="line">   introduce: [{ required: <span class="literal">true</span>, message: '部门介绍不能为空', trigger: 'blur' },</span><br><span class="line">     { trigger: 'blur', min: <span class="number">1</span>, max: <span class="number">300</span>, message: '部门介绍要求<span class="number">1</span><span class="number">-50</span>个字符' }]</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="处理首部内容的pid数据"><a href="#处理首部内容的pid数据" class="headerlink" title="处理首部内容的pid数据"></a>处理首部内容的pid数据</h3><p>**<code>需要注意</code><strong>：在最根级的</strong><code>tree-tools</code>**组件中，由于treenode属性中没有id，id便是undefined，但是通过undefined进行等值判断是寻找不到对应的根节点的， 所以在传值时，我们将id属性设置为 <strong><code>“”</code></strong></p>
<p><strong><code>src/views/departments/index.vue</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getDepartments</span>(<span class="params"></span>)</span> {</span><br><span class="line">     <span class="keyword">const</span> result = <span class="keyword">await</span> getDepartments()</span><br><span class="line">     <span class="built_in">this</span>.departs = transListToTreeData(result.depts, <span class="string">''</span>)</span><br><span class="line">     <span class="built_in">this</span>.company = { <span class="attr">name</span>: result.companyName, <span class="attr">manager</span>: <span class="string">'负责人'</span>, <span class="attr">id</span>: <span class="string">''</span> }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**：完成新增部门的规则校验</p>
<h2 id="新增部门功能-部门负责人数据"><a href="#新增部门功能-部门负责人数据" class="headerlink" title="新增部门功能-部门负责人数据"></a>新增部门功能-部门负责人数据</h2><p>**<code>目标</code>**：获取新增表单中的部门负责人下拉数据</p>
<blockquote>
<p>在上节的表单中，部门负责人是下拉数据，我们应该从**<code>员工接口</code>**中获取该数据</p>
</blockquote>
<p>首先，封装获取简单员工列表的模块 <strong><code>src/api/employees.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取员工的简单列表</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getEmployeeSimple</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/sys/user/simple'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>然后，在**<code>add-dept.vue</code><strong>中的select聚焦事件</strong><code>focus</code>**中调用该接口，因为我们要获取实时的最新数据</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-select v-model="formData.manager" style="width:80%" placeholder="请选择" @focus="getEmployeeSimple"&gt;</span><br><span class="line">       &lt;!-- 需要循环生成选项   这里做一下简单的处理 显示的是用户名 存的也是用户名--&gt;</span><br><span class="line">       &lt;el-option v-for="item in peoples" :key="item.id" :label="item.username" :value="item.username" /&gt;</span><br><span class="line">     &lt;/el-select&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>获取员工列表</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  { getEmployeeSimple }   <span class="keyword">from</span> <span class="string">'@/api/employees'</span></span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="comment">// 获取员工简单列表数据</span></span><br><span class="line">    <span class="keyword">async</span>  <span class="function"><span class="title">getEmployeeSimple</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.peoples = <span class="keyword">await</span> getEmployeeSimple()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="attr">peoples</span>: [] <span class="comment">// 接收获取的员工简单列表的数据</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**：新增部门功能-部门负责人数据</p>
<h2 id="新增功能-提交-取消-关闭"><a href="#新增功能-提交-取消-关闭" class="headerlink" title="新增功能-提交-取消-关闭"></a>新增功能-提交-取消-关闭</h2><p>**<code>目标</code>**： 完成新增模块的提交-取消-关闭等功能</p>
<h3 id="校验通过，调用新增接口"><a href="#校验通过，调用新增接口" class="headerlink" title="校验通过，调用新增接口"></a>校验通过，调用新增接口</h3><blockquote>
<p>当点击新增页面的确定按钮时，我们需要完成对表单的整体校验，如果校验成功，进行提交</p>
</blockquote>
<p>首先，在点击确定时，校验表单</p>
<p><strong>给el-form定义一个ref属性</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form ref="deptForm" :model="formData" :rules="rules" label-width="120px"&gt;</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 点击确定时触发</span></span><br><span class="line"><span class="function"><span class="title">btnOK</span>(<span class="params"></span>)</span> {</span><br><span class="line">  <span class="built_in">this</span>.$refs.deptForm.validate(<span class="function"><span class="params">isOK</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (isOK) {</span><br><span class="line">      <span class="comment">// 表示可以提交了</span></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>然后，在校验通过时，调用新增接口</p>
<blockquote>
<p>因为是添加子部门，所以我们需要将新增的部门pid设置成当前部门的id，新增的部门就成了自己的子部门</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 点击确定时触发</span></span><br><span class="line"><span class="function"><span class="title">btnOK</span>(<span class="params"></span>)</span> {</span><br><span class="line">  <span class="built_in">this</span>.$refs.deptForm.validate(<span class="keyword">async</span> isOK =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (isOK) {</span><br><span class="line">      <span class="comment">// 表示可以提交了</span></span><br><span class="line">      <span class="keyword">await</span> addDepartments({ ...this.formData, <span class="attr">pid</span>: <span class="built_in">this</span>.treeNode.id }) <span class="comment">// 调用新增接口 添加父部门的id</span></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>同样，在新增成功之后，调用告诉父组件，重新拉取数据</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$emit(<span class="string">'addDepts'</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>父组件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;add-dept :show-dialog="showDialog" :tree-node="node" @addDepts="getDepartments" /&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong><code>本节注意</code><strong>：同学们可能会疑惑，我们</strong><code>tree-tools.vue</code></strong> 和**<code>add-dept.vue</code>**两个组件都触发了addDepts事件，不冲突吗？</p>
<p>这里，我们触发的自定义事件都是组件自身的，他们之间没有任何关系，只是名字相同而已，大家不要混淆</p>
<h3 id="利用sync修饰符关闭新增弹层"><a href="#利用sync修饰符关闭新增弹层" class="headerlink" title="利用sync修饰符关闭新增弹层"></a>利用sync修饰符关闭新增弹层</h3><blockquote>
<p>这里我们学习一个新的技巧，**<code>sync修饰符</code>**</p>
</blockquote>
<p> 按照常规，想要让父组件更新**<code>showDialog</code>**的话，需要这样做 </p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="built_in">this</span>.$emit(<span class="string">'changedialog'</span>, <span class="literal">false</span>) <span class="comment">//触发事件</span></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;child @changedialog=<span class="string">"method"</span> :showDialog=<span class="string">"showDialog"</span> /&gt;</span><br><span class="line"> <span class="function"><span class="title">method</span>(<span class="params">value</span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.showDialog = value</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>但是，vuejs为我们提供了**<code>sync修饰符</code>**，它提供了一种简写模式 也就是</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件 update:固定写法 (update:props名称, 值)</span></span><br><span class="line"><span class="built_in">this</span>.$emit(<span class="string">'update:showDialog'</span>, <span class="literal">false</span>) <span class="comment">//触发事件</span></span><br><span class="line"><span class="comment">// 父组件 sync修饰符</span></span><br><span class="line">&lt;child  :showDialog.sync=<span class="string">"showDialog"</span> /&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>只要用sync修饰，就可以省略父组件的监听和方法，直接将值赋值给showDialog</p>
<p><strong>取消按钮和关闭</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 点击确定时触发</span></span><br><span class="line">    <span class="function"><span class="title">btnOK</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.$refs.deptForm.validate(<span class="keyword">async</span> isOK =&gt; {</span><br><span class="line">        <span class="keyword">if</span> (isOK) {</span><br><span class="line">          <span class="comment">// 表示可以提交了</span></span><br><span class="line">          <span class="keyword">await</span> addDepartments({ ...this.formData, <span class="attr">pid</span>: <span class="built_in">this</span>.treeNode.id }) <span class="comment">// 调用新增接口 添加父部门的id</span></span><br><span class="line">          <span class="built_in">this</span>.$emit(<span class="string">'addDepts'</span>) <span class="comment">// 告诉父组件 新增数据成功 重新拉取数据</span></span><br><span class="line">          <span class="comment">// update:props名称</span></span><br><span class="line">          <span class="built_in">this</span>.$emit(<span class="string">'update:showDialog'</span>, <span class="literal">false</span>)</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="取消时重置数据和校验"><a href="#取消时重置数据和校验" class="headerlink" title="取消时重置数据和校验"></a>取消时重置数据和校验</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">btnCancel</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.$refs.deptForm.resetFields() <span class="comment">// 重置校验字段</span></span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">'update:showDialog'</span>, <span class="literal">false</span>) <span class="comment">// 关闭</span></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>

<p>需要在el-dialog中监听其close事件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-dialog title="新增部门" :visible="showDialog" @close="btnCancel"&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong><code>本节任务</code></strong> 新增功能-提交-取消-关闭</p>
<h2 id="编辑部门功能实现数据回写"><a href="#编辑部门功能实现数据回写" class="headerlink" title="编辑部门功能实现数据回写"></a>编辑部门功能实现数据回写</h2><p>**<code>目标</code>**：实现编辑部门的功能</p>
<h3 id="点击编辑弹出层，记录当前节点"><a href="#点击编辑弹出层，记录当前节点" class="headerlink" title="点击编辑弹出层，记录当前节点"></a>点击编辑弹出层，记录当前节点</h3><blockquote>
<p>编辑部门功能实际上和新增窗体采用的是一个组件，只不过我们需要将新增场景变成编辑场景</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200831112149246.png" alt="image-20200831112149246"></p>
<p>首先点击编辑部门时， 调用<strong>父组件编辑方法</strong> <strong><code>tree-tools.vue</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$emit(<span class="string">'editDepts'</span>, <span class="built_in">this</span>.treeNode)</span><br></pre></td></tr></tbody></table></figure>

<p><strong>父组件弹层，赋值当前编辑节点</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">         &lt;tree-tools slot-scope="obj" :tree-node="obj.data" @delDepts="getDepartments" @editDepts="editDepts" /&gt;</span><br><span class="line"></span><br><span class="line">// 编辑部门节点</span><br><span class="line">    editDepts(node) {</span><br><span class="line">      // 首先打开弹层</span><br><span class="line">      this.showDialog = true</span><br><span class="line">      this.node = node // 赋值操作的节点</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="父组件调用子组件的获取详情方法"><a href="#父组件调用子组件的获取详情方法" class="headerlink" title="父组件调用子组件的获取详情方法"></a>父组件调用子组件的获取详情方法</h3><blockquote>
<p>编辑时，我们需要获取点击部门的信息</p>
</blockquote>
<p><strong>封装获取部门信息的模块</strong> <strong><code>src/api/departments.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> * 获取部门详情</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getDepartDetail</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/company/department/<span class="subst">${id}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>在什么时候获取部门详情?</p>
</blockquote>
<p>我们可以在调用<strong>编辑方法</strong> **<code>editDepts</code><strong>中通过</strong><code>ref</code><strong>调用</strong><code>add-dept.vue</code>**的实例方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取部门详情</span></span><br><span class="line">   <span class="keyword">async</span>  <span class="function"><span class="title">getDepartDetail</span>(<span class="params">id</span>)</span> {</span><br><span class="line">     <span class="built_in">this</span>.formData = <span class="keyword">await</span> getDepartDetail(id)</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 点击编辑触发的父组件的方法</span></span><br><span class="line"> <span class="function"><span class="title">editDepts</span>(<span class="params">node</span>)</span> {</span><br><span class="line">   <span class="built_in">this</span>.showDialog = <span class="literal">true</span> <span class="comment">// 显示新增组件弹层</span></span><br><span class="line">   <span class="built_in">this</span>.node = node <span class="comment">// 存储传递过来的node数据</span></span><br><span class="line">   <span class="comment">// 我们需要在这个位置 调用子组件的方法</span></span><br><span class="line">   <span class="comment">// 父组件 调用子组件的方法</span></span><br><span class="line">   <span class="built_in">this</span>.$refs.addDept.getDepartDetail(node.id) <span class="comment">// 直接调用子组件中的方法 传入一个id</span></span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="根据计算属性显示控制标题"><a href="#根据计算属性显示控制标题" class="headerlink" title="根据计算属性显示控制标题"></a>根据计算属性显示控制标题</h3><blockquote>
<p>需要根据当前的场景区分显示的标题</p>
</blockquote>
<p>计算属性</p>
<blockquote>
<p>如何判断新增还是编辑</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">computed: {</span><br><span class="line">    <span class="function"><span class="title">showTitle</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.formData.id ? <span class="string">'编辑部门'</span> : <span class="string">'新增子部门'</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>

<p>同时发现，el-form中的resetFields不能重置非表单中的数据，所以在取消的位置需要强制加上 重置数据</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">btnCancel</span>(<span class="params"></span>)</span> {</span><br><span class="line">  <span class="comment">// 重置数据  因为resetFields 只能重置 表单上的数据 非表单上的 比如 编辑中id 不能重置</span></span><br><span class="line">  <span class="built_in">this</span>.formData = {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">code</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">manager</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">introduce</span>: <span class="string">''</span></span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 关闭弹层</span></span><br><span class="line">  <span class="built_in">this</span>.$emit(<span class="string">'update:showDialog'</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="comment">// 清除之前的校验  可以重置数据 只能重置 定义在data中的数据</span></span><br><span class="line">  <span class="built_in">this</span>.$refs.deptForm.resetFields()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h2 id="同时支持编辑和新增场景"><a href="#同时支持编辑和新增场景" class="headerlink" title="同时支持编辑和新增场景"></a>同时支持编辑和新增场景</h2><h3 id="封装编辑接口，保存区分场景"><a href="#封装编辑接口，保存区分场景" class="headerlink" title="封装编辑接口，保存区分场景"></a>封装编辑接口，保存区分场景</h3><blockquote>
<p>接下来，需要在点击确定时，同时支持新增部门和编辑部门两个场景，我们可以根据formData是否有id进行区分</p>
</blockquote>
<p><strong>封装编辑部门接口</strong>   <strong><code>src/api/departments.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编辑部门</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateDepartments</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/company/department/<span class="subst">${data.id}</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'put'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>点击确定时，进行场景区分</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 点击确定时触发</span></span><br><span class="line"> <span class="function"><span class="title">btnOK</span>(<span class="params"></span>)</span> {</span><br><span class="line">   <span class="built_in">this</span>.$refs.deptForm.validate(<span class="keyword">async</span> isOK =&gt; {</span><br><span class="line">     <span class="keyword">if</span> (isOK) {</span><br><span class="line">       <span class="comment">// 要分清楚现在是编辑还是新增</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.formData.id) {</span><br><span class="line">         <span class="comment">// 编辑模式  调用编辑接口</span></span><br><span class="line">         <span class="keyword">await</span> updateDepartments(<span class="built_in">this</span>.formData)</span><br><span class="line">       } <span class="keyword">else</span> {</span><br><span class="line">         <span class="comment">// 新增模式</span></span><br><span class="line">         <span class="keyword">await</span> addDepartments({ ...this.formData, <span class="attr">pid</span>: <span class="built_in">this</span>.treeNode.id }) <span class="comment">// 调用新增接口 添加父部门的id</span></span><br><span class="line">       }</span><br><span class="line">       <span class="comment">// 表示可以提交了</span></span><br><span class="line">       <span class="built_in">this</span>.$emit(<span class="string">'addDepts'</span>) <span class="comment">// 告诉父组件 新增数据成功 重新拉取数据</span></span><br><span class="line">       <span class="comment">// update:props名称</span></span><br><span class="line">       <span class="built_in">this</span>.$emit(<span class="string">'update:showDialog'</span>, <span class="literal">false</span>)</span><br><span class="line">     }</span><br><span class="line">   })</span><br><span class="line"> },</span><br></pre></td></tr></tbody></table></figure>

<h3 id="校验规则支持编辑场景下的校验"><a href="#校验规则支持编辑场景下的校验" class="headerlink" title="校验规则支持编辑场景下的校验"></a>校验规则支持编辑场景下的校验</h3><blockquote>
<p>除此之外，我们发现原来的校验规则实际和编辑部门有些冲突，所以需要进一步处理</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 现在定义一个函数 这个函数的目的是 去找 同级部门下 是否有重复的部门名称</span></span><br><span class="line"> <span class="keyword">const</span> checkNameRepeat = <span class="keyword">async</span>(rule, value, callback) =&gt; {</span><br><span class="line">   <span class="comment">// 先要获取最新的组织架构数据</span></span><br><span class="line">   <span class="keyword">const</span> { depts } = <span class="keyword">await</span> getDepartments()</span><br><span class="line">   <span class="comment">//  检查重复规则 需要支持两种 新增模式 / 编辑模式</span></span><br><span class="line">   <span class="comment">// depts是所有的部门数据</span></span><br><span class="line">   <span class="comment">// 如何去找技术部所有的子节点</span></span><br><span class="line">   <span class="keyword">let</span> isRepeat = <span class="literal">false</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.formData.id) {</span><br><span class="line">     <span class="comment">// 有id就是编辑模式</span></span><br><span class="line">     <span class="comment">// 编辑 张三 =&gt; 校验规则 除了我之外 同级部门下 不能有叫张三的</span></span><br><span class="line">     isRepeat = depts.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.id !== <span class="built_in">this</span>.formData.id &amp;&amp; item.pid === <span class="built_in">this</span>.treeNode.pid).some(<span class="function"><span class="params">item</span> =&gt;</span> item.name === value)</span><br><span class="line">   } <span class="keyword">else</span> {</span><br><span class="line">     <span class="comment">// 没id就是新增模式</span></span><br><span class="line">     isRepeat = depts.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.pid === <span class="built_in">this</span>.treeNode.id).some(<span class="function"><span class="params">item</span> =&gt;</span> item.name === value)</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   isRepeat ? callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`同级部门下已经有<span class="subst">${value}</span>的部门了`</span>)) : callback()</span><br><span class="line"> }</span><br><span class="line"> <span class="comment">// 检查编码重复</span></span><br><span class="line"> <span class="keyword">const</span> checkCodeRepeat = <span class="keyword">async</span>(rule, value, callback) =&gt; {</span><br><span class="line">   <span class="comment">// 先要获取最新的组织架构数据</span></span><br><span class="line">   <span class="comment">//  检查重复规则 需要支持两种 新增模式 / 编辑模式</span></span><br><span class="line">   <span class="keyword">const</span> { depts } = <span class="keyword">await</span> getDepartments()</span><br><span class="line">   <span class="keyword">let</span> isRepeat = <span class="literal">false</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.formData.id) {</span><br><span class="line">     <span class="comment">// 编辑模式  因为编辑模式下 不能算自己</span></span><br><span class="line">     isRepeat = depts.some(<span class="function"><span class="params">item</span> =&gt;</span> item.id !== <span class="built_in">this</span>.formData.id &amp;&amp; item.code === value &amp;&amp; value)</span><br><span class="line">   } <span class="keyword">else</span> {</span><br><span class="line">     <span class="comment">// 新增模式</span></span><br><span class="line">     isRepeat = depts.some(<span class="function"><span class="params">item</span> =&gt;</span> item.code === value &amp;&amp; value) <span class="comment">// 这里加一个 value不为空 因为我们的部门有可能没有code</span></span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   isRepeat ? callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`组织架构中已经有部门使用<span class="subst">${value}</span>编码`</span>)) : callback()</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>至此，整个组织架构， 我们完成了，组织架构读取 /  新增部门 / 删除部门  / 编辑部门</p>
</blockquote>
<p>如图</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200722134415195.png" alt="image-20200722134415195"></p>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**编辑部门功能实现</p>
<h2 id="给数据获取添加加载进度条"><a href="#给数据获取添加加载进度条" class="headerlink" title="给数据获取添加加载进度条"></a>给数据获取添加加载进度条</h2><p><strong><code>目标</code></strong>  给当前组织架构添加加载进度条</p>
<p>由于获取数据的延迟性，为了更好的体验，可以给页面增加一个Loading进度条，采用element的指令解决方案即可</p>
<p><strong>定义loading变量</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">loading: <span class="literal">false</span> <span class="comment">// 用来控制进度弹层的显示和隐藏</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>赋值变量给指令</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div v-loading="loading" class="dashboard-container"&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>获取方法前后设置变量</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getDepartments</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> getDepartments()</span><br><span class="line">      <span class="built_in">this</span>.departs = transListToTreeData(result.depts, <span class="string">''</span>)</span><br><span class="line">      <span class="built_in">this</span>.company = { <span class="attr">name</span>: result.companyName, <span class="attr">manager</span>: <span class="string">'负责人'</span>, <span class="attr">id</span>: <span class="string">''</span> }</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="6-公司和角色"><a href="#6-公司和角色" class="headerlink" title="6.公司和角色"></a>6.公司和角色</h1><h2 id="建立公司角色页面的基本结构"><a href="#建立公司角色页面的基本结构" class="headerlink" title="建立公司角色页面的基本结构"></a>建立公司角色页面的基本结构</h2><p>**<code>目标</code>**建立公司页面的基本结构</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200722221903217.png" alt="image-20200722221903217"></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200722221910776.png" alt="image-20200722221910776"></p>
<p>根据以上的结构，我们采用element-ui的组件实现</p>
<p><strong><code>src/views/setting/index.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="dashboard-container"&gt;</span><br><span class="line">    &lt;div class="app-container"&gt;</span><br><span class="line">      &lt;el-card&gt;</span><br><span class="line">        &lt;el-tabs&gt;</span><br><span class="line">          &lt;!-- 放置页签 --&gt;</span><br><span class="line">          &lt;el-tab-pane label="角色管理"&gt;</span><br><span class="line">            &lt;!-- 新增角色按钮 --&gt;</span><br><span class="line">            &lt;el-row style="height:60px"&gt;</span><br><span class="line">              &lt;el-button</span><br><span class="line">                icon="el-icon-plus"</span><br><span class="line">                size="small"</span><br><span class="line">                type="primary"</span><br><span class="line">              &gt;新增角色&lt;/el-button&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;!-- 表格 --&gt;</span><br><span class="line">            &lt;el-table border=""&gt;</span><br><span class="line">              &lt;el-table-column label="序号" width="120" /&gt;</span><br><span class="line">              &lt;el-table-column label="角色名称" width="240" /&gt;</span><br><span class="line">              &lt;el-table-column label="描述" /&gt;</span><br><span class="line">              &lt;el-table-column label="操作"&gt;</span><br><span class="line">                &lt;el-button size="small" type="success"&gt;分配权限&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button size="small" type="primary"&gt;编辑&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button size="small" type="danger"&gt;删除&lt;/el-button&gt;</span><br><span class="line">              &lt;/el-table-column&gt;</span><br><span class="line">            &lt;/el-table&gt;</span><br><span class="line">            &lt;!-- 分页组件 --&gt;</span><br><span class="line">            &lt;el-row type="flex" justify="center" align="middle" style="height: 60px"&gt;</span><br><span class="line">              &lt;!-- 分页组件 --&gt;</span><br><span class="line">              &lt;el-pagination layout="prev,pager,next" /&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">          &lt;/el-tab-pane&gt;</span><br><span class="line">          &lt;el-tab-pane label="公司信息"&gt;</span><br><span class="line">            &lt;el-alert</span><br><span class="line">              title="对公司名称、公司地址、营业执照、公司地区的更新，将使得公司资料被重新审核，请谨慎修改"</span><br><span class="line">              type="info"</span><br><span class="line">              show-icon</span><br><span class="line">              :closable="false"</span><br><span class="line">            /&gt;</span><br><span class="line">            &lt;el-form label-width="120px" style="margin-top:50px"&gt;</span><br><span class="line">              &lt;el-form-item label="公司名称"&gt;</span><br><span class="line">                &lt;el-input disabled style="width:400px" /&gt;</span><br><span class="line">              &lt;/el-form-item&gt;</span><br><span class="line">              &lt;el-form-item label="公司地址"&gt;</span><br><span class="line">                &lt;el-input disabled style="width:400px" /&gt;</span><br><span class="line">              &lt;/el-form-item&gt;</span><br><span class="line">              &lt;el-form-item label="邮箱"&gt;</span><br><span class="line">                &lt;el-input disabled style="width:400px" /&gt;</span><br><span class="line">              &lt;/el-form-item&gt;</span><br><span class="line">              &lt;el-form-item label="备注"&gt;</span><br><span class="line">                &lt;el-input type="textarea" :rows="3" disabled style="width:400px" /&gt;</span><br><span class="line">              &lt;/el-form-item&gt;</span><br><span class="line">            &lt;/el-form&gt;</span><br><span class="line">          &lt;/el-tab-pane&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/el-tabs&gt;</span><br><span class="line">      &lt;/el-card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**建立公司页面的基本结构</p>
<h2 id="读取公司角色信息"><a href="#读取公司角色信息" class="headerlink" title="读取公司角色信息"></a>读取公司角色信息</h2><p>**<code>目标</code>**： 封装公司角色请求，读取公司角色信息</p>
<h3 id="读取角色列表数据"><a href="#读取角色列表数据" class="headerlink" title="读取角色列表数据"></a>读取角色列表数据</h3><p>首先，封装读取角色的信息的请求 <strong><code>src/api/setting.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取角色列表</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRoleList</span>(<span class="params">params</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/sys/role'</span>,</span><br><span class="line">    params</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>params是查询参数，里面需要携带分页信息</p>
</blockquote>
<p>然后，在页面中调用接口获取数据，绑定表格数据 <strong><code>src/views/setting/index.vue</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { getRoleList } <span class="keyword">from</span> <span class="string">'@/api/setting'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">list</span>: [], <span class="comment">// 承接数组</span></span><br><span class="line">      <span class="attr">page</span>: {</span><br><span class="line">        <span class="comment">// 放置页码及相关数据</span></span><br><span class="line">        <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">pagesize</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">total</span>: <span class="number">0</span> <span class="comment">// 记录总数</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.getRoleList() <span class="comment">// 获取角色列表</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getRoleList</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="keyword">const</span> { total, rows } = <span class="keyword">await</span> getRoleList(<span class="built_in">this</span>.page)</span><br><span class="line">      <span class="built_in">this</span>.page.total = total</span><br><span class="line">      <span class="built_in">this</span>.list = rows</span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="title">changePage</span>(<span class="params">newPage</span>)</span> {</span><br><span class="line">      <span class="comment">// newPage是当前点击的页码</span></span><br><span class="line">      <span class="built_in">this</span>.page.page = newPage <span class="comment">// 将当前页码赋值给当前的最新页码</span></span><br><span class="line">      <span class="built_in">this</span>.getRoleList()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p> <strong>绑定表格数据</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-table border="" :data="list"&gt;</span><br><span class="line">            &lt;el-table-column align="center" type="index" label="序号" width="120" /&gt;</span><br><span class="line">            &lt;el-table-column align="center" prop="name" label="名称" width="240" /&gt;</span><br><span class="line">            &lt;el-table-column align="center" prop="description" label="描述" /&gt;</span><br><span class="line">            &lt;el-table-column align="center" label="操作"&gt;</span><br><span class="line">              &lt;el-button size="small" type="success"&gt;分配权限&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button size="small" type="primary"&gt;编辑&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button size="small" type="danger"&gt;删除&lt;/el-button&gt;</span><br><span class="line">            &lt;/el-table-column&gt;</span><br><span class="line"></span><br><span class="line">          &lt;/el-table&gt;</span><br><span class="line">      </span><br></pre></td></tr></tbody></table></figure>

<p><strong>绑定分页数据</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 放置分页组件 --&gt;</span><br><span class="line">        &lt;el-row type="flex" justify="center" align="middle" style="height:60px"&gt;</span><br><span class="line">          &lt;el-pagination</span><br><span class="line">            :current-page="page.page"</span><br><span class="line">            :page-size="page.pagesize"</span><br><span class="line">            :total="page.total"</span><br><span class="line">            layout="prev, pager, next"</span><br><span class="line">            @current-change="changePage"</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="读取公司信息数据"><a href="#读取公司信息数据" class="headerlink" title="读取公司信息数据"></a>读取公司信息数据</h3><blockquote>
<p>第二个tab页，我们同样需要读取数据</p>
</blockquote>
<p>封装读取公司信息的api  <strong><code>src/api/setting.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取公司信息</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getCompanyInfo</span>(<span class="params">companyId</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/company/<span class="subst">${companyId}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>绑定公司表单数据</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form label-width="120px" style="margin-top:50px"&gt;</span><br><span class="line">           &lt;el-form-item label="公司名称"&gt;</span><br><span class="line">             &lt;el-input v-model="formData.name" disabled style="width:400px" /&gt;</span><br><span class="line">           &lt;/el-form-item&gt;</span><br><span class="line">           &lt;el-form-item label="公司地址"&gt;</span><br><span class="line">             &lt;el-input v-model="formData.companyAddress" disabled style="width:400px" /&gt;</span><br><span class="line">           &lt;/el-form-item&gt;</span><br><span class="line">           &lt;el-form-item label="邮箱"&gt;</span><br><span class="line">             &lt;el-input v-model="formData.mailbox" disabled style="width:400px" /&gt;</span><br><span class="line">           &lt;/el-form-item&gt;</span><br><span class="line">           &lt;el-form-item label="备注"&gt;</span><br><span class="line">             &lt;el-input v-model="formData.remarks" type="textarea" :rows="3" disabled style="width:400px" /&gt;</span><br><span class="line">           &lt;/el-form-item&gt;</span><br><span class="line">         &lt;/el-form&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>请求中的companyId来自哪里？它来自我们登录成功之后的用户资料，所以我们需要在该组件中使用vuex数据</p>
</blockquote>
<p> <strong><code>src/store/getters.js</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">companyId: state =&gt; state.user.userInfo.companyId // 建立对于user模块的companyId的快捷访问</span><br><span class="line">computed: {</span><br><span class="line">  ...mapGetters(['companyId'])</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<p><strong>初始化时调用接口</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="comment">// 获取的公司的信息</span></span><br><span class="line">   <span class="keyword">async</span> <span class="function"><span class="title">getCompanyInfo</span>(<span class="params"></span>)</span> {</span><br><span class="line">     <span class="built_in">this</span>.formData = <span class="keyword">await</span> getCompanyInfo(<span class="built_in">this</span>.companyId)</span><br><span class="line">   }</span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> {</span><br><span class="line">   <span class="built_in">this</span>.getRoleList() <span class="comment">// 获取角色列表</span></span><br><span class="line">   <span class="built_in">this</span>.getCompanyInfo()</span><br><span class="line"> },</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**读取公司角色信息</p>
<h2 id="删除角色功能"><a href="#删除角色功能" class="headerlink" title="删除角色功能"></a>删除角色功能</h2><p><strong><code>目标</code></strong>  实现删除角色的功能</p>
<p><strong>封装删除角色的api</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** **</span></span><br><span class="line"><span class="comment"> *  删除角色</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ****/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteRole</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/role/<span class="subst">${id}</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'delete'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>删除功能实现</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">deleteRole</span>(<span class="params">id</span>)</span> {</span><br><span class="line">  <span class="comment">//  提示</span></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.$confirm(<span class="string">'确认删除该角色吗'</span>)</span><br><span class="line">    <span class="comment">// 只有点击了确定 才能进入到下方</span></span><br><span class="line">    <span class="keyword">await</span> deleteRole(id) <span class="comment">// 调用删除接口</span></span><br><span class="line">    <span class="built_in">this</span>.getRoleList() <span class="comment">// 重新加载数据</span></span><br><span class="line">    <span class="built_in">this</span>.$message.success(<span class="string">'删除角色成功'</span>)</span><br><span class="line">  } <span class="keyword">catch</span> (error) {</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>删除按钮注册事件</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 作用域插槽 --&gt;</span><br><span class="line">         &lt;template slot-scope="{ row }"&gt;</span><br><span class="line">                 &lt;el-button size="small" type="success"&gt;分配权限&lt;/el-button&gt;</span><br><span class="line">                 &lt;el-button size="small" type="primary"&gt;编辑&lt;/el-button&gt;</span><br><span class="line">                 &lt;el-button size="small" type="danger" @click="deleteRole(row.id)"&gt;删除&lt;/el-button&gt;</span><br><span class="line">         &lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<h2 id="编辑角色功能"><a href="#编辑角色功能" class="headerlink" title="编辑角色功能"></a>编辑角色功能</h2><p>**<code>目标</code>**： 实现编辑角色的功能</p>
<h3 id="封装编辑接口，新建编辑弹层"><a href="#封装编辑接口，新建编辑弹层" class="headerlink" title="封装编辑接口，新建编辑弹层"></a>封装编辑接口，新建编辑弹层</h3><p><strong>封装编辑角色的功能api</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> * 修改角色</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateRole</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/role/<span class="subst">${data.id}</span>`</span>,</span><br><span class="line">    data,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'put'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取角色详情</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRoleDetail</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/role/<span class="subst">${id}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>定义编辑弹层数据</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">showDialog: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 专门接收新增或者编辑的编辑的表单数据</span></span><br><span class="line"><span class="attr">roleForm</span>: {},</span><br><span class="line"><span class="attr">rules</span>: {</span><br><span class="line">  <span class="attr">name</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'角色名称不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }]</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<p><strong>编辑弹层结构</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-dialog title="编辑弹层" :visible="showDialog" @close="btnCancel"&gt;</span><br><span class="line">     &lt;el-form ref="roleForm" :model="roleForm" :rules="rules" label-width="120px"&gt;</span><br><span class="line">       &lt;el-form-item label="角色名称" prop="name"&gt;</span><br><span class="line">         &lt;el-input v-model="roleForm.name" /&gt;</span><br><span class="line">       &lt;/el-form-item&gt;</span><br><span class="line">       &lt;el-form-item label="角色描述"&gt;</span><br><span class="line">         &lt;el-input v-model="roleForm.description" /&gt;</span><br><span class="line">       &lt;/el-form-item&gt;</span><br><span class="line">     &lt;/el-form&gt;</span><br><span class="line">     &lt;!-- 底部 --&gt;</span><br><span class="line">     &lt;el-row slot="footer" type="flex" justify="center"&gt;</span><br><span class="line">       &lt;el-col :span="6"&gt;</span><br><span class="line">         &lt;el-button size="small" @click="btnCancel"&gt;取消&lt;/el-button&gt;</span><br><span class="line">         &lt;el-button size="small" type="primary" @click="btnOK"&gt;确定&lt;/el-button&gt;</span><br><span class="line">       &lt;/el-col&gt;</span><br><span class="line">     &lt;/el-row&gt;</span><br><span class="line">   &lt;/el-dialog&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="实现编辑功能，为新增功能留口"><a href="#实现编辑功能，为新增功能留口" class="headerlink" title="实现编辑功能，为新增功能留口"></a>实现编辑功能，为新增功能留口</h3><p><strong>编辑功能实现（为新增功能留口）</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">editRole</span>(<span class="params">id</span>)</span> {</span><br><span class="line">  <span class="built_in">this</span>.roleForm = <span class="keyword">await</span> getRoleDetail(id)</span><br><span class="line">  <span class="built_in">this</span>.showDialog = <span class="literal">true</span> <span class="comment">// 为了不出现闪烁的问题 先获取数据 再弹出层</span></span><br><span class="line">},</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">btnOK</span>(<span class="params"></span>)</span> {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.$refs.roleForm.validate()</span><br><span class="line">    <span class="comment">// 只有校验通过的情况下 才会执行await的下方内容</span></span><br><span class="line">    <span class="comment">// roleForm这个对象有id就是编辑 没有id就是新增</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.roleForm.id) {</span><br><span class="line">      <span class="keyword">await</span> updateRole(<span class="built_in">this</span>.roleForm)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// 新增业务</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 重新拉取数据</span></span><br><span class="line">    <span class="built_in">this</span>.getRoleList()</span><br><span class="line">    <span class="built_in">this</span>.$message.success(<span class="string">'操作成功'</span>)</span><br><span class="line">    <span class="built_in">this</span>.showDialog = <span class="literal">false</span></span><br><span class="line">  } <span class="keyword">catch</span> (error) {</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<p><strong>编辑按钮注册事件</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-button size="small" type="primary" @click="editRole(row.id)"&gt;编辑&lt;/el-button&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<h2 id="新增角色功能"><a href="#新增角色功能" class="headerlink" title="新增角色功能"></a>新增角色功能</h2><p>**<code>目标</code>**实现新增角色功能</p>
<p><strong>封装新增角色功能api</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> * 新增角色</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addRole</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/sys/role'</span>,</span><br><span class="line">    data,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'post'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>新增功能实现和编辑功能合并（处理关闭）</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">btnOK</span>(<span class="params"></span>)</span> {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.$refs.roleForm.validate()</span><br><span class="line">    <span class="comment">// 只有校验通过的情况下 才会执行await的下方内容</span></span><br><span class="line">    <span class="comment">// roleForm这个对象有id就是编辑 没有id就是新增</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.roleForm.id) {</span><br><span class="line">      <span class="keyword">await</span> updateRole(<span class="built_in">this</span>.roleForm)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// 新增业务</span></span><br><span class="line">      <span class="keyword">await</span> addRole(<span class="built_in">this</span>.roleForm)</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 重新拉取数据</span></span><br><span class="line">    <span class="built_in">this</span>.getRoleList()</span><br><span class="line">    <span class="built_in">this</span>.$message.success(<span class="string">'操作成功'</span>)</span><br><span class="line">    <span class="built_in">this</span>.showDialog = <span class="literal">false</span> <span class="comment">// 关闭弹层  =&gt;  触发el-dialog的事件close事件</span></span><br><span class="line">  } <span class="keyword">catch</span> (error) {</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  }</span><br><span class="line">},</span><br><span class="line"><span class="function"><span class="title">btnCancel</span>(<span class="params"></span>)</span> {</span><br><span class="line">  <span class="built_in">this</span>.roleForm = {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">''</span></span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 移除校验</span></span><br><span class="line">  <span class="built_in">this</span>.$refs.roleForm.resetFields()</span><br><span class="line">  <span class="built_in">this</span>.showDialog = <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>新增按钮注册事件</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-button type="primary" size="small" @click="showDialog = true"&gt;新增角色&lt;/el-button&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p><strong><code>本节任务</code></strong> 新增角色功能</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200831160134281.png" alt="image-20200831160134281"></p>
<p>我们完成了公司中角色管理的部分，但是并没有完成分配权限的部分，该部门会在权限设计和管理的部门重点提及</p>
<h1 id="7-员工管理"><a href="#7-员工管理" class="headerlink" title="7.员工管理"></a>7.员工管理</h1><h2 id="封装一个通用的工具栏"><a href="#封装一个通用的工具栏" class="headerlink" title="封装一个通用的工具栏"></a>封装一个通用的工具栏</h2><p>**<code>目标</code>**：封装一个通用的工具栏供大家使用</p>
<h3 id="通用工具栏的组件结构"><a href="#通用工具栏的组件结构" class="headerlink" title="通用工具栏的组件结构"></a>通用工具栏的组件结构</h3><blockquote>
<p>在后续的业务开发中，经常会用到一个类似下图的工具栏，作为公共组件，进行一下封装</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200723223704401.png" alt="image-20200723223704401"></p>
<p>组件 <strong><code>src/components/PageTools/index.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-card class="page-tools"&gt;</span><br><span class="line">    &lt;el-row type="flex" justify="space-between" align="middle"&gt;</span><br><span class="line">      &lt;el-col&gt;</span><br><span class="line">        &lt;div  v-if="showBefore" class="before"&gt;</span><br><span class="line">          &lt;i class="el-icon-info" /&gt;</span><br><span class="line">          &lt;!-- 定义前面得插槽 --&gt;</span><br><span class="line">          &lt;slot name="before" /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">      &lt;el-col&gt;</span><br><span class="line">        &lt;el-row type="flex" justify="end"&gt;</span><br><span class="line">           &lt;!-- 定义后面的插槽 --&gt;</span><br><span class="line">           &lt;slot name="after" /&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">  &lt;/el-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  props: {</span><br><span class="line">    showBefore: {</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang='scss'&gt;</span><br><span class="line"> .page-tools {</span><br><span class="line">    margin: 10px 0;</span><br><span class="line">    .before {</span><br><span class="line">      line-height: 34px;</span><br><span class="line">    i {</span><br><span class="line">      margin-right: 5px;</span><br><span class="line">      color: #409eff;</span><br><span class="line">    }</span><br><span class="line">    display: inline-block;</span><br><span class="line">    padding: 0px 10px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    border: 1px solid rgba(145, 213, 255, 1);</span><br><span class="line">    background: rgba(230, 247, 255, 1);</span><br><span class="line">  }</span><br><span class="line"> }</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="组件统一注册"><a href="#组件统一注册" class="headerlink" title="组件统一注册"></a>组件统一注册</h3><blockquote>
<p>为了方便所有的页面都可以不用引用该组件，可以进行全局注册</p>
</blockquote>
<p>提供注册入口 <strong><code>src/componets/index.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 该文件负责所有的公共的组件的全局注册   Vue.use</span></span><br><span class="line"><span class="keyword">import</span> PageTools <span class="keyword">from</span> <span class="string">'./PageTools'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">Vue</span>)</span> {</span><br><span class="line">    <span class="comment">//  注册全局的通用栏组件对象</span></span><br><span class="line">    Vue.component(<span class="string">'PageTools'</span>, PageTools)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>在入口处进行注册 <strong><code>src/main.js</code></strong></p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'@/components'</span></span><br><span class="line">Vue.use(Component) <span class="comment">// 注册自己的插件</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**： 封装一个通用的工具栏</p>
<h2 id="员工列表页面的基本布局和结构"><a href="#员工列表页面的基本布局和结构" class="headerlink" title="员工列表页面的基本布局和结构"></a>员工列表页面的基本布局和结构</h2><p>**<code>目标</code>**：实现员工列表页面的基本布局和结构</p>
<p><strong>结构代码</strong> <strong><code>src/employees/index.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="dashboard-container"&gt;</span><br><span class="line">    &lt;div class="app-container"&gt;</span><br><span class="line">      &lt;page-tools :show-before="true"&gt;</span><br><span class="line">        &lt;span slot="before"&gt;共166条记录&lt;/span&gt;</span><br><span class="line">        &lt;template slot="after"&gt;</span><br><span class="line">          &lt;el-button size="small" type="warning"&gt;导入&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button size="small" type="danger"&gt;导出&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button size="small" type="primary"&gt;新增员工&lt;/el-button&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/page-tools&gt;</span><br><span class="line">      &lt;!-- 放置表格和分页 --&gt;</span><br><span class="line">      &lt;el-card&gt;</span><br><span class="line">        &lt;el-table border&gt;</span><br><span class="line">          &lt;el-table-column label="序号" sortable="" /&gt;</span><br><span class="line">          &lt;el-table-column label="姓名" sortable="" /&gt;</span><br><span class="line">          &lt;el-table-column label="工号" sortable="" /&gt;</span><br><span class="line">          &lt;el-table-column label="聘用形式" sortable="" /&gt;</span><br><span class="line">          &lt;el-table-column label="部门" sortable="" /&gt;</span><br><span class="line">          &lt;el-table-column label="入职时间" sortable="" /&gt;</span><br><span class="line">          &lt;el-table-column label="账户状态" sortable="" /&gt;</span><br><span class="line">          &lt;el-table-column label="操作" sortable="" fixed="right" width="280"&gt;</span><br><span class="line">            &lt;template&gt;</span><br><span class="line">              &lt;el-button type="text" size="small"&gt;查看&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="text" size="small"&gt;转正&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="text" size="small"&gt;调岗&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="text" size="small"&gt;离职&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="text" size="small"&gt;角色&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="text" size="small"&gt;删除&lt;/el-button&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">        &lt;!-- 分页组件 --&gt;</span><br><span class="line">        &lt;el-row type="flex" justify="center" align="middle" style="height: 60px"&gt;</span><br><span class="line">          &lt;el-pagination layout="prev, pager, next" /&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">      &lt;/el-card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200831162222975.png" alt="image-20200831162222975"></p>
<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**：员工列表页面的基本布局和结构</p>
<h2 id="员工列表数据请求和分页加载"><a href="#员工列表数据请求和分页加载" class="headerlink" title="员工列表数据请求和分页加载"></a>员工列表数据请求和分页加载</h2><p>**<code>目标</code>**实现员工数据的加载和分页请求</p>
<p>首先，封装员工的加载请求 <strong><code>src/api/employees.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取员工的综合列表数据</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getEmployeeList</span>(<span class="params">params</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/sys/user'</span>,</span><br><span class="line">    params</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>然后，实现加载数据和分页的逻辑</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { getEmployeeList } <span class="keyword">from</span> <span class="string">'@/api/employees'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">list</span>: [], <span class="comment">// 接数据的</span></span><br><span class="line">      <span class="attr">page</span>: {</span><br><span class="line">        <span class="attr">page</span>: <span class="number">1</span>, <span class="comment">// 当前页码</span></span><br><span class="line">        <span class="attr">size</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">total</span>: <span class="number">0</span> <span class="comment">// 总数</span></span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.getEmployeeList()</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="function"><span class="title">changePage</span>(<span class="params">newPage</span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.page.page = newPage</span><br><span class="line">      <span class="built_in">this</span>.getEmployeeList()</span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getEmployeeList</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">const</span> { total, rows } = <span class="keyword">await</span> getEmployeeList(<span class="built_in">this</span>.page)</span><br><span class="line">      <span class="built_in">this</span>.page.total = total</span><br><span class="line">      <span class="built_in">this</span>.list = rows</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>绑定表格</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-card v-loading="loading"&gt;</span><br><span class="line">  &lt;el-table border :data="list"&gt;</span><br><span class="line">    &lt;el-table-column label="序号" sortable="" type="index" /&gt;</span><br><span class="line">    &lt;el-table-column label="姓名" sortable="" prop="username" /&gt;</span><br><span class="line">    &lt;el-table-column label="工号" sortable="" prop="workNumber" /&gt;</span><br><span class="line">    &lt;el-table-column label="聘用形式" sortable="" prop="formOfEmployment" /&gt;</span><br><span class="line">    &lt;el-table-column label="部门" sortable="" prop="departmentName" /&gt;</span><br><span class="line">    &lt;el-table-column label="入职时间" sortable="" prop="timeOfEntry" /&gt;</span><br><span class="line">    &lt;el-table-column label="账户状态" sortable="" prop="enableState" /&gt;</span><br><span class="line">    &lt;el-table-column label="操作" sortable="" fixed="right" width="280"&gt;</span><br><span class="line">      &lt;template&gt;</span><br><span class="line">        &lt;el-button type="text" size="small"&gt;查看&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type="text" size="small"&gt;转正&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type="text" size="small"&gt;调岗&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type="text" size="small"&gt;离职&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type="text" size="small"&gt;角色&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type="text" size="small"&gt;删除&lt;/el-button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">  &lt;/el-table&gt;</span><br><span class="line">  &lt;!-- 分页组件 --&gt;</span><br><span class="line">  &lt;el-row type="flex" justify="center" align="middle" style="height: 60px"&gt;</span><br><span class="line">    &lt;el-pagination</span><br><span class="line">      layout="prev, pager, next"</span><br><span class="line">      :page-size="page.size"</span><br><span class="line">      :current-page="page.page"</span><br><span class="line">      :total="page.total"</span><br><span class="line">      @current-change="changePage"</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/el-row&gt;</span><br><span class="line">&lt;/el-card&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**员工列表数据请求和分页加载</p>
<h2 id="员工列表中的数据进行格式化"><a href="#员工列表中的数据进行格式化" class="headerlink" title="员工列表中的数据进行格式化"></a>员工列表中的数据进行格式化</h2><p>**<code>目标</code>**：将列表中的内容进行格式化</p>
<h3 id="利用列格式化属性处理聘用形式"><a href="#利用列格式化属性处理聘用形式" class="headerlink" title="利用列格式化属性处理聘用形式"></a>利用列格式化属性处理聘用形式</h3><p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200724001315166.png" alt="image-20200724001315166"></p>
<blockquote>
<p>上小节中，列表中的<strong>聘用形式</strong>/<strong>入职时间</strong>和<strong>账户状态</strong>需要进行显示内容的处理</p>
</blockquote>
<p>那么聘用形式中<strong>1</strong>代表什么含义，这实际上是我们需要的枚举数据，该数据的存放文件位于我们提供的**<code>资源/枚举</code><strong>中，可以将枚举下的文件夹放于</strong><code>src/api</code>**文件夹下</p>
<p>针对<strong>聘用形式</strong>，可以使用<strong>el-table-column</strong>的<strong>formatter</strong>属性进行设置</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span>    EmployeeEnum <span class="keyword">from</span> <span class="string">'@/api/constant/employees'</span></span><br><span class="line">&lt;!-- 格式化聘用形式 --&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"聘用形式"</span> <span class="attr">sortable</span> <span class="attr">:formatter</span>=<span class="string">"formatEmployment"</span> /&gt;</span></span></span><br><span class="line">  <span class="comment">// 格式化聘用形式</span></span><br><span class="line">   <span class="function"><span class="title">formatEmployment</span>(<span class="params">row, column, cellValue, index</span>)</span> {</span><br><span class="line">     <span class="comment">// 要去找 1所对应的值</span></span><br><span class="line">     <span class="keyword">const</span> obj = EmployeeEnum.hireType.find(<span class="function"><span class="params">item</span> =&gt;</span> item.id === cellValue)</span><br><span class="line">     <span class="keyword">return</span> obj ? obj.value : <span class="string">'未知'</span></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="过滤器解决时间格式的处理"><a href="#过滤器解决时间格式的处理" class="headerlink" title="过滤器解决时间格式的处理"></a>过滤器解决时间格式的处理</h3><p>针对入职时间，我们可以采用<strong>作用域插槽</strong>进行处理</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-table-column label="入职时间" sortable prop="timeOfEntry"&gt;</span><br><span class="line">           &lt;template slot-scope="obj"&gt;</span><br><span class="line">             {{</span><br><span class="line">               obj.row.timeOfEntry | 过滤器</span><br><span class="line">             }}</span><br><span class="line">           &lt;/template&gt;</span><br><span class="line"> &lt;/el-table-column&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>问题来了，过滤器从哪里呢？</p>
</blockquote>
<p>在**<code>资源/过滤器</code><strong>中，我们提供了若干工具方法，我们可以将其转化成过滤器，首先将其拷贝到</strong><code>src</code>**</p>
<p>在**<code>main.js</code>**中将工具方法转化成过滤器</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> filters <span class="keyword">from</span> <span class="string">'@/filters'</span> <span class="comment">// 引入工具类</span></span><br><span class="line"><span class="comment">// 注册全局的过滤器</span></span><br><span class="line"><span class="built_in">Object</span>.keys(filters).forEach(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">  <span class="comment">// 注册过滤器</span></span><br><span class="line">  Vue.filter(key, filters[key])</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>好了，现在可以愉快的用过滤器的方式使用工具类的方法了</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-table-column label="入职时间" sortable="" align="center"&gt;</span><br><span class="line">     &lt;!-- 作用域插槽 --&gt;</span><br><span class="line">     &lt;template slot-scope="{ row }"&gt;{{ row.timeOfEntry | formatDate }}&lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>最后一项，账户状态，可以用开关组件switch进行显示</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-table-column label="账户状态" align="center" sortable="" prop="enableState"&gt;</span><br><span class="line">           &lt;template slot-scope="{ row }"&gt;</span><br><span class="line">             &lt;!-- 根据当前状态来确定 是否打开开关 --&gt;</span><br><span class="line">             &lt;el-switch :value="row.enableState === 1" /&gt;</span><br><span class="line">           &lt;/template&gt;</span><br><span class="line">   &lt;/el-table-column&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p><strong><code>本节任务</code></strong> 员工列表中的数据进行格式化</p>
<h2 id="删除员工功能"><a href="#删除员工功能" class="headerlink" title="删除员工功能"></a>删除员工功能</h2><p>**<code>目标</code>**实现删除员工的功能</p>
<p>首先封装 删除员工的请求</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除员工接口</span></span><br><span class="line"><span class="comment"> * ****/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">delEmployee</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/user/<span class="subst">${id}</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'delete'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>删除功能</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"> &lt;template slot-scope="{ row }"&gt;</span><br><span class="line">              &lt;el-button type="text" size="small"&gt;查看&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="text" size="small"&gt;转正&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="text" size="small"&gt;调岗&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="text" size="small"&gt;离职&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="text" size="small"&gt;角色&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="text" size="small" @click="deleteEmployee(row.id)"&gt;删除&lt;/el-button&gt;</span><br><span class="line">            &lt;/template&gt; </span><br><span class="line">    // 删除员工</span><br><span class="line">    async deleteEmployee(id) {</span><br><span class="line">      try {</span><br><span class="line">        await this.$confirm('您确定删除该员工吗')</span><br><span class="line">        await delEmployee(id)</span><br><span class="line">        this.getEmployeeList()</span><br><span class="line">        this.$message.success('删</span><br><span class="line">除员工成功')</span><br><span class="line">      } catch (error) {</span><br><span class="line">        console.log(error)</span><br><span class="line">      }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**： 删除员工功能</p>
<h2 id="新增员工功能-弹层-校验-部门"><a href="#新增员工功能-弹层-校验-部门" class="headerlink" title="新增员工功能-弹层-校验-部门"></a>新增员工功能-弹层-校验-部门</h2><p>**<code>目标</code>**：实现新增员工的功能</p>
<h3 id="新建员工弹层组件"><a href="#新建员工弹层组件" class="headerlink" title="新建员工弹层组件"></a>新建员工弹层组件</h3><blockquote>
<p>当我们点击新增员工时，我们需要一个类似的弹层</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200917110516195.png" alt="image-20200917110516195"></p>
<p>类似**<code>组织架构</code>**的组件，同样新建一个弹层组件 <strong><code>src/views/employees/components/add-employee.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-dialog title="新增员工" :visible="showDialog"&gt;</span><br><span class="line">    &lt;!-- 表单 --&gt;</span><br><span class="line">    &lt;el-form label-width="120px"&gt;</span><br><span class="line">      &lt;el-form-item label="姓名"&gt;</span><br><span class="line">        &lt;el-input style="width:50%" placeholder="请输入姓名" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label="手机"&gt;</span><br><span class="line">        &lt;el-input style="width:50%" placeholder="请输入手机号" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label="入职时间"&gt;</span><br><span class="line">        &lt;el-date-picker style="width:50%" placeholder="请选择入职时间" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label="聘用形式"&gt;</span><br><span class="line">        &lt;el-select style="width:50%" placeholder="请选择" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label="工号"&gt;</span><br><span class="line">        &lt;el-input style="width:50%" placeholder="请输入工号" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label="部门"&gt;</span><br><span class="line">        &lt;el-input style="width:50%" placeholder="请选择部门" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label="转正时间"&gt;</span><br><span class="line">        &lt;el-date-picker style="width:50%" placeholder="请选择转正时间" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">    &lt;!-- footer插槽 --&gt;</span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">      &lt;el-row type="flex" justify="center"&gt;</span><br><span class="line">        &lt;el-col :span="6"&gt;</span><br><span class="line">          &lt;el-button size="small"&gt;取消&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type="primary" size="small"&gt;确定&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/el-dialog&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  props: {</span><br><span class="line">    showDialog: {</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="引用弹出层，点击弹出"><a href="#引用弹出层，点击弹出" class="headerlink" title="引用弹出层，点击弹出"></a>引用弹出层，点击弹出</h3><p>父组件中引用，弹出层</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import AddDemployee from './components/add-employee'</span><br><span class="line">&lt;!-- 放置新增组件 --&gt;</span><br><span class="line"> &lt;add-employee :show-dialog.sync="showDialog" /&gt;</span><br></pre></td></tr></tbody></table></figure>



<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 放置新增组件 --&gt;</span><br><span class="line"> &lt;add-employee :show-dialog.sync="showDialog" /&gt;</span><br><span class="line"></span><br><span class="line"> &lt;el-button icon="plus" type="primary" size="small" @click="showDialog = true"&gt;新增员工&lt;/el-button&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="新增员工的表单校验"><a href="#新增员工的表单校验" class="headerlink" title="新增员工的表单校验"></a>新增员工的表单校验</h3><p><strong>封装新增员工</strong>api <strong><code>src/api/employees.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** **</span></span><br><span class="line"><span class="comment"> *  新增员工的接口</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addEmployee</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'post'</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/sys/user'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>针对员工属性，添加校验规则</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> EmployeeEnum <span class="keyword">from</span> <span class="string">'@/api/constant/employees'</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      EmployeeEnum, <span class="comment">// 在data中定义数据</span></span><br><span class="line">      <span class="comment">// 表单数据</span></span><br><span class="line">      <span class="attr">treeData</span>: [], <span class="comment">// 定义数组接收树形数据</span></span><br><span class="line">      <span class="attr">showTree</span>: <span class="literal">false</span>, <span class="comment">// 控制树形的显示或者隐藏</span></span><br><span class="line">      <span class="attr">loading</span>: <span class="literal">false</span>, <span class="comment">// 控制树的显示或者隐藏进度条</span></span><br><span class="line">      <span class="attr">formData</span>: {</span><br><span class="line">        <span class="attr">username</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="attr">mobile</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="attr">formOfEmployment</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="attr">workNumber</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="attr">departmentName</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="attr">timeOfEntry</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="attr">correctionTime</span>: <span class="string">''</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">rules</span>: {</span><br><span class="line">        <span class="attr">username</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'用户姓名不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }, {</span><br><span class="line">          <span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">4</span>, <span class="attr">message</span>: <span class="string">'用户姓名为1-4位'</span></span><br><span class="line">        }],</span><br><span class="line">        <span class="attr">mobile</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'手机号不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }, {</span><br><span class="line">          <span class="attr">pattern</span>: <span class="regexp">/^1[3-9]\d{9}$/</span>, message: <span class="string">'手机号格式不正确'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span></span><br><span class="line">        }],</span><br><span class="line">        <span class="attr">formOfEmployment</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'聘用形式不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }],</span><br><span class="line">        <span class="attr">workNumber</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'工号不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }],</span><br><span class="line">        <span class="attr">departmentName</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'部门不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'change'</span> }],</span><br><span class="line">        <span class="attr">timeOfEntry</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'入职时间'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<p>绑定数据和规则校验</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form :model="formData" :rules="rules" label-width="120px"&gt;</span><br><span class="line">  &lt;el-form-item label="姓名" prop="username"&gt;</span><br><span class="line">    &lt;el-input v-model="formData.username" style="width:50%" placeholder="请输入姓名" /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label="手机" prop="mobile"&gt;</span><br><span class="line">    &lt;el-input v-model="formData.mobile" style="width:50%" placeholder="请输入手机号" /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label="入职时间" prop="timeOfEntry"&gt;</span><br><span class="line">    &lt;el-date-picker v-model="formData.timeOfEntry" style="width:50%" placeholder="请选择日期" /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label="聘用形式" prop="formOfEmployment"&gt;</span><br><span class="line">    &lt;el-select v-model="formData.formOfEmployment" style="width:50%" placeholder="请选择" /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label="工号" prop="workNumber"&gt;</span><br><span class="line">    &lt;el-input v-model="formData.workNumber" style="width:50%" placeholder="请输入工号" /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label="部门" prop="departmentName"&gt;</span><br><span class="line">    &lt;el-input v-model="formData.departmentName" style="width:50%" placeholder="请选择部门" /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label="转正时间" prop="correctionTime"&gt;</span><br><span class="line">    &lt;el-date-picker v-model="formData.correctionTime" style="width:50%" placeholder="请选择日期" /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="加载部门数据转化树形"><a href="#加载部门数据转化树形" class="headerlink" title="加载部门数据转化树形"></a>加载部门数据转化树形</h3><p><strong>聘用形式和选择部门的处理</strong></p>
<blockquote>
<p> 员工的部门是从树形部门中选择一个部门</p>
</blockquote>
<p><strong>获取部门数据，转化树形</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { getDepartments } <span class="keyword">from</span> <span class="string">'@/api/departments'</span></span><br><span class="line"><span class="keyword">import</span> { transListToTreeData } <span class="keyword">from</span> <span class="string">'@/utils'</span></span><br><span class="line">  data () {</span><br><span class="line">      <span class="keyword">return</span> {</span><br><span class="line">             <span class="comment">// 表单数据</span></span><br><span class="line">       <span class="attr">treeData</span>: [], <span class="comment">// 定义数组接收树形数据</span></span><br><span class="line">       <span class="attr">showTree</span>: <span class="literal">false</span>, <span class="comment">// 控制树形的显示或者隐藏</span></span><br><span class="line">       <span class="attr">loading</span>: <span class="literal">false</span>, <span class="comment">// 控制树的显示或者隐藏进度条</span></span><br><span class="line">      }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">      <span class="keyword">async</span> <span class="function"><span class="title">getDepartments</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.showTree = <span class="literal">true</span></span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">const</span> { depts } = <span class="keyword">await</span> getDepartments()</span><br><span class="line">      <span class="comment">// depts是数组 但不是树形</span></span><br><span class="line">      <span class="built_in">this</span>.treeData = transListToTreeData(depts, <span class="string">''</span>)</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">false</span></span><br><span class="line">    },</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="点击部门赋值表单数据"><a href="#点击部门赋值表单数据" class="headerlink" title="点击部门赋值表单数据"></a>点击部门赋值表单数据</h3><p><strong>选择部门，赋值表单数据</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form-item label="部门" prop="departmentName"&gt;</span><br><span class="line">        &lt;el-input v-model="formData.departmentName" style="width:50%" placeholder="请选择部门" @focus="getDepartments" /&gt;</span><br><span class="line">        &lt;!-- 放置一个tree组件 --&gt;</span><br><span class="line">        &lt;el-tree</span><br><span class="line">          v-if="showTree"</span><br><span class="line">          v-loading="loading"</span><br><span class="line">          :data="treeData"</span><br><span class="line">          default-expand-all=""</span><br><span class="line">          :props="{ label: 'name' }"</span><br><span class="line">          @node-click="selectNode"</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br></pre></td></tr></tbody></table></figure>



<p><strong>点击部门时触发</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">selectNode</span>(<span class="params">node</span>)</span> {</span><br><span class="line">  <span class="built_in">this</span>.formData.departmentName = node.name</span><br><span class="line">  <span class="built_in">this</span>.showTree = <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>聘用形式</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form-item label="聘用形式" prop="formOfEmployment"&gt;</span><br><span class="line">    &lt;el-select v-model="formData.formOfEmployment" style="width:50%" placeholder="请选择"&gt;</span><br><span class="line">      &lt;!-- 遍历只能遍历组件的数据 --&gt;</span><br><span class="line">      &lt;el-option v-for="item in EmployeeEnum.hireType" :key="item.id" :label="item.value" :value="item.id" /&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br></pre></td></tr></tbody></table></figure>



<h2 id="新增员工功能-确定-取消"><a href="#新增员工功能-确定-取消" class="headerlink" title="新增员工功能-确定-取消"></a>新增员工功能-确定-取消</h2><p><strong>调用新增接口</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 点击确定时 校验整个表单</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">btnOK</span>(<span class="params"></span>)</span> {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.$refs.addEmployee.validate()</span><br><span class="line">    <span class="comment">// 调用新增接口</span></span><br><span class="line">    <span class="keyword">await</span> addEmployee(<span class="built_in">this</span>.formData) <span class="comment">// 新增员工</span></span><br><span class="line">    <span class="comment">// 告诉父组件更新数据</span></span><br><span class="line">    <span class="comment">// this.$parent 可以直接调用到父组件的实例 实际上就是父组件this</span></span><br><span class="line">    <span class="comment">// this.$emit</span></span><br><span class="line">    <span class="built_in">this</span>.$parent.getEmployeeList()</span><br><span class="line">    <span class="built_in">this</span>.$parent.showDialog = <span class="literal">false</span></span><br><span class="line">  } <span class="keyword">catch</span> (error) {</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  }</span><br><span class="line">},</span><br><span class="line"><span class="function"><span class="title">btnCancel</span>(<span class="params"></span>)</span> {</span><br><span class="line">  <span class="comment">// 重置原来的数据</span></span><br><span class="line">  <span class="built_in">this</span>.formData = {</span><br><span class="line">    <span class="attr">username</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">mobile</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">formOfEmployment</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">workNumber</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">departmentName</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">timeOfEntry</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">correctionTime</span>: <span class="string">''</span></span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">this</span>.$refs.addEmployee.resetFields() <span class="comment">// 重置校验结果</span></span><br><span class="line">  <span class="built_in">this</span>.$emit(<span class="string">'update:showDialog'</span>, <span class="literal">false</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>新增员工的功能和组织架构的功能极其类似，这里不做过多阐述</p>
</blockquote>
<p><strong>提交代码</strong></p>
<p><strong><code>本节任务</code></strong> 新增员工功能和弹层</p>
<h2 id="员工导入组件封装"><a href="#员工导入组件封装" class="headerlink" title="员工导入组件封装"></a>员工导入组件封装</h2><p>**<code>目标</code>**：封装一个导入excel数据的文件</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200726005308648.png" alt="image-20200726005308648"></p>
<p>首先封装一个类似的组件，首先需要注意的是，类似功能，vue-element-admin已经提供了，我们只需要改造即可 <a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/components/UploadExcel/index.vue">代码地址</a></p>
<blockquote>
<p>类似功能性的组件，我们只需要会使用和封装即可 </p>
</blockquote>
<p>excel导入功能需要使用npm包**<code>xlsx</code><strong>，所以需要安装</strong><code>xlsx</code>**插件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i xlsx</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>将vue-element-admin提供的导入功能新建一个组件，位置： <strong><code>src/components/UploadExcel</code></strong></p>
</blockquote>
<p><strong>注册全局的导入excel组件</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PageTools <span class="keyword">from</span> <span class="string">'./PageTools'</span></span><br><span class="line"><span class="keyword">import</span> UploadExcel <span class="keyword">from</span> <span class="string">'./UploadExcel'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">Vue</span>)</span> {</span><br><span class="line">    Vue.component(<span class="string">'PageTools'</span>, PageTools) <span class="comment">// 注册工具栏组件</span></span><br><span class="line">    Vue.component(<span class="string">'UploadExcel'</span>, UploadExcel) <span class="comment">// 注册导入excel组件</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>修改样式和布局</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div class="upload-excel"&gt;</span><br><span class="line">    &lt;div class="btn-upload"&gt;</span><br><span class="line">      &lt;el-button :loading="loading" size="mini" type="primary" @click="handleUpload"&gt;</span><br><span class="line">        点击上传</span><br><span class="line">      &lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input ref="excel-upload-input" class="excel-upload-input" type="file" accept=".xlsx, .xls" @change="handleClick"&gt;</span><br><span class="line">    &lt;div class="drop" @drop="handleDrop" @dragover="handleDragover" @dragenter="handleDragover"&gt;</span><br><span class="line">      &lt;i class="el-icon-upload" /&gt;</span><br><span class="line">      &lt;span&gt;将文件拖到此处&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped lang="scss"&gt;</span><br><span class="line">.upload-excel {</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">   margin-top: 100px;</span><br><span class="line">   .excel-upload-input{</span><br><span class="line">       display: none;</span><br><span class="line">        z-index: -9999;</span><br><span class="line">     }</span><br><span class="line">   .btn-upload , .drop{</span><br><span class="line">      border: 1px dashed #bbb;</span><br><span class="line">      width: 350px;</span><br><span class="line">      height: 160px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      line-height: 160px;</span><br><span class="line">   }</span><br><span class="line">   .drop{</span><br><span class="line">       line-height: 80px;</span><br><span class="line">       color: #bbb;</span><br><span class="line">      i {</span><br><span class="line">        font-size: 60px;</span><br><span class="line">        display: block;</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**：员工导入组件封装</p>
<h2 id="员工的导入"><a href="#员工的导入" class="headerlink" title="员工的导入"></a>员工的导入</h2><p>**<code>目标</code>**：实现员工的导入</p>
<h3 id="建立公共导入的页面路由"><a href="#建立公共导入的页面路由" class="headerlink" title="建立公共导入的页面路由"></a>建立公共导入的页面路由</h3><p><strong>新建一个公共的导入页面，挂载路由</strong> <strong><code>src/router/index.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/import'</span>,</span><br><span class="line">    <span class="attr">component</span>: Layout,</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>, <span class="comment">// 隐藏在左侧菜单中</span></span><br><span class="line">    <span class="attr">children</span>: [{</span><br><span class="line">      <span class="attr">path</span>: <span class="string">''</span>, <span class="comment">// 二级路由path什么都不写 表示二级默认路由</span></span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/import'</span>)</span><br><span class="line">    }]</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>

<p><strong>创建import路由组件</strong> <strong><code>src/views/import/index.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 公共导入组件 --&gt; </span><br><span class="line">  &lt;upload-excel :on-success="success" /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="分析excel导入代码，封装接口"><a href="#分析excel导入代码，封装接口" class="headerlink" title="分析excel导入代码，封装接口"></a>分析excel导入代码，封装接口</h3><blockquote>
<p>封装导入员工的api接口  </p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> *  封装一个导入员工的接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">importEmployee</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/sys/user/batch'</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'post'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="实现excel导入"><a href="#实现excel导入" class="headerlink" title="实现excel导入"></a>实现excel导入</h3><p><strong>获取导入的excel数据, 导入excel接口</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span>  <span class="function"><span class="title">success</span>(<span class="params">{ header, results }</span>)</span> {</span><br><span class="line">  <span class="comment">// 如果是导入员工</span></span><br><span class="line">    <span class="keyword">const</span> userRelations = {</span><br><span class="line">      <span class="string">'入职日期'</span>: <span class="string">'timeOfEntry'</span>,</span><br><span class="line">      <span class="string">'手机号'</span>: <span class="string">'mobile'</span>,</span><br><span class="line">      <span class="string">'姓名'</span>: <span class="string">'username'</span>,</span><br><span class="line">      <span class="string">'转正日期'</span>: <span class="string">'correctionTime'</span>,</span><br><span class="line">      <span class="string">'工号'</span>: <span class="string">'workNumber'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">const</span> arr = []</span><br><span class="line">   results.forEach(<span class="function"><span class="params">item</span> =&gt;</span> {</span><br><span class="line">      <span class="keyword">const</span> userInfo = {}</span><br><span class="line">      <span class="built_in">Object</span>.keys(item).forEach(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">        userInfo[userRelations[key]] = item[key]</span><br><span class="line">      })</span><br><span class="line">     arr.push(userInfo) </span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">await</span> importEmployee(arr) <span class="comment">// 调用导入接口</span></span><br><span class="line">    <span class="built_in">this</span>.$router.back()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>为了让这个页面可以服务更多的导入功能，我们可以在页面中用参数来判断，是否是导入员工</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">   <span class="keyword">return</span> {</span><br><span class="line">     <span class="attr">type</span>: <span class="built_in">this</span>.$route.query.type</span><br><span class="line">   }</span><br><span class="line"> },</span><br></pre></td></tr></tbody></table></figure>

<p>当excel中有日期格式的时候，实际转化的值为一个数字，我们需要一个方法进行转化</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">formatDate</span>(<span class="params">numb, format</span>)</span> {</span><br><span class="line">  <span class="keyword">const</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>((numb - <span class="number">1</span>) * <span class="number">24</span> * <span class="number">3600000</span> + <span class="number">1</span>)</span><br><span class="line">  time.setYear(time.getFullYear() - <span class="number">70</span>)</span><br><span class="line">  <span class="keyword">const</span> year = time.getFullYear() + <span class="string">''</span></span><br><span class="line">  <span class="keyword">const</span> month = time.getMonth() + <span class="number">1</span> + <span class="string">''</span></span><br><span class="line">  <span class="keyword">const</span> date = time.getDate() - <span class="number">1</span> + <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span> (format &amp;&amp; format.length === <span class="number">1</span>) {</span><br><span class="line">    <span class="keyword">return</span> year + format + month + format + date</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> year + (month &lt; <span class="number">10</span> ? <span class="string">'0'</span> + month : month) + (date &lt; <span class="number">10</span> ? <span class="string">'0'</span> + date : date)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>需要注意，**<code>导入的手机号不能和之前的存在的手机号重复</code>**</p>
</blockquote>
<p><strong>逻辑判断</strong> </p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span>  <span class="function"><span class="title">success</span>(<span class="params">{ header, results }</span>)</span> {</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.type === <span class="string">'user'</span>) {</span><br><span class="line">       <span class="keyword">const</span> userRelations = {</span><br><span class="line">         <span class="string">'入职日期'</span>: <span class="string">'timeOfEntry'</span>,</span><br><span class="line">         <span class="string">'手机号'</span>: <span class="string">'mobile'</span>,</span><br><span class="line">         <span class="string">'姓名'</span>: <span class="string">'username'</span>,</span><br><span class="line">         <span class="string">'转正日期'</span>: <span class="string">'correctionTime'</span>,</span><br><span class="line">         <span class="string">'工号'</span>: <span class="string">'workNumber'</span></span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">const</span> arr = []</span><br><span class="line">       <span class="comment">// 遍历所有的数组</span></span><br><span class="line">       results.forEach(<span class="function"><span class="params">item</span> =&gt;</span> {</span><br><span class="line">       <span class="comment">// 需要将每一个条数据里面的中文都换成英文</span></span><br><span class="line">         <span class="keyword">const</span> userInfo = {}</span><br><span class="line">         <span class="built_in">Object</span>.keys(item).forEach(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">         <span class="comment">// key是当前的中文名 找到对应的英文名</span></span><br><span class="line">           <span class="keyword">if</span> (userRelations[key] === <span class="string">'timeOfEntry'</span> || userRelations[key] === <span class="string">'correctionTime'</span>) {</span><br><span class="line">             userInfo[userRelations[key]] = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">this</span>.formatDate(item[key], <span class="string">'/'</span>)) <span class="comment">// 只有这样, 才能入库</span></span><br><span class="line">             <span class="keyword">return</span></span><br><span class="line">           }</span><br><span class="line">           userInfo[userRelations[key]] = item[key]</span><br><span class="line">         })</span><br><span class="line">         <span class="comment">// 最终userInfo变成了全是英文</span></span><br><span class="line">         arr.push(userInfo)</span><br><span class="line">       })</span><br><span class="line">       <span class="keyword">await</span> importEmployee(arr)</span><br><span class="line">       <span class="built_in">this</span>.$message.success(<span class="string">'导入成功'</span>)</span><br><span class="line">     }</span><br><span class="line">     <span class="built_in">this</span>.$router.back() <span class="comment">// 回到上一页</span></span><br><span class="line">   },</span><br><span class="line">   <span class="function"><span class="title">formatDate</span>(<span class="params">numb, format</span>)</span> {</span><br><span class="line">     <span class="keyword">const</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>((numb - <span class="number">1</span>) * <span class="number">24</span> * <span class="number">3600000</span> + <span class="number">1</span>)</span><br><span class="line">     time.setYear(time.getFullYear() - <span class="number">70</span>)</span><br><span class="line">     <span class="keyword">const</span> year = time.getFullYear() + <span class="string">''</span></span><br><span class="line">     <span class="keyword">const</span> month = time.getMonth() + <span class="number">1</span> + <span class="string">''</span></span><br><span class="line">     <span class="keyword">const</span> date = time.getDate() - <span class="number">1</span> + <span class="string">''</span></span><br><span class="line">     <span class="keyword">if</span> (format &amp;&amp; format.length === <span class="number">1</span>) {</span><br><span class="line">       <span class="keyword">return</span> year + format + month + format + date</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">return</span> year + (month &lt; <span class="number">10</span> ? <span class="string">'0'</span> + month : month) + (date &lt; <span class="number">10</span> ? <span class="string">'0'</span> + date : date)</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>员工页面跳转</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-button type="warning" size="small" @click="$router.push('/import?type=user')"&gt;导入&lt;/el-button&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>**<code>目标</code>**： 实现员工的导入</p>
<h2 id="员工导出excel功能"><a href="#员工导出excel功能" class="headerlink" title="员工导出excel功能"></a>员工导出excel功能</h2><p><strong>目标</strong>： 实现将员工数据导出功能</p>
<blockquote>
<p>日常业务中，我们经常遇到excel导出功能， 怎么使用呢</p>
</blockquote>
<p>Excel 的导入导出都是依赖于<a href="https://github.com/SheetJS/js-xlsx">js-xlsx</a>来实现的。</p>
<p>在 <code>js-xlsx</code>的基础上又封装了<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/vendor/Export2Excel.js">Export2Excel.js</a>来方便导出数据。</p>
<h3 id="安装excel所需依赖和按需加载"><a href="#安装excel所需依赖和按需加载" class="headerlink" title="安装excel所需依赖和按需加载"></a>安装excel所需依赖和按需加载</h3><p>由于 <code>Export2Excel</code>不仅依赖<code>js-xlsx</code>还依赖<code>file-saver</code>和<code>script-loader</code>。</p>
<p>所以你先需要安装如下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install xlsx file-saver -S</span><br><span class="line">npm install script-loader -S -D</span><br></pre></td></tr></tbody></table></figure>

<p>由于<code>js-xlsx</code>体积还是很大的，导出功能也不是一个非常常用的功能，所以使用的时候建议使用懒加载。使用方法如下：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'@/vendor/Export2Excel'</span>).then(<span class="function"><span class="params">excel</span> =&gt;</span> {</span><br><span class="line">  excel.export_json_to_excel({</span><br><span class="line">    <span class="attr">header</span>: tHeader, <span class="comment">//表头 必填</span></span><br><span class="line">    data, <span class="comment">//具体数据 必填</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">'excel-list'</span>, <span class="comment">//非必填</span></span><br><span class="line">    <span class="attr">autoWidth</span>: <span class="literal">true</span>, <span class="comment">//非必填</span></span><br><span class="line">    <span class="attr">bookType</span>: <span class="string">'xlsx'</span> <span class="comment">//非必填</span></span><br><span class="line">  })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<h3 id="excel导出参数的介绍"><a href="#excel导出参数的介绍" class="headerlink" title="excel导出参数的介绍"></a>excel导出参数的介绍</h3><blockquote>
<p>vue-element-admin提供了导出的功能模块，在课程资源/excel导出目录下，放置到src目录下</p>
</blockquote>
<p><strong>参数</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>header</td>
<td>导出数据的表头</td>
<td>Array</td>
<td>/</td>
<td>[]</td>
</tr>
<tr>
<td>data</td>
<td>导出的具体数据</td>
<td>Array</td>
<td>/</td>
<td>[[]]</td>
</tr>
<tr>
<td>filename</td>
<td>导出文件名</td>
<td>String</td>
<td>/</td>
<td>excel-list</td>
</tr>
<tr>
<td>autoWidth</td>
<td>单元格是否要自适应宽度</td>
<td>Boolean</td>
<td>true / false</td>
<td>true</td>
</tr>
<tr>
<td>bookType</td>
<td>导出文件类型</td>
<td>String</td>
<td>xlsx, csv, txt, <a href="https://github.com/SheetJS/js-xlsx#supported-output-formats">more</a></td>
<td>xlsx</td>
</tr>
</tbody></table>
<h3 id="excel导出基本的结构"><a href="#excel导出基本的结构" class="headerlink" title="excel导出基本的结构"></a>excel导出基本的结构</h3><blockquote>
<p>我们最重要的一件事，就是把表头和数据进行相应的对应</p>
</blockquote>
<p>因为数据中的key是英文，想要导出的表头是中文的话，需要将中文和英文做对应</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> headers = {</span><br><span class="line">     <span class="string">'手机号'</span>: <span class="string">'mobile'</span>,</span><br><span class="line">     <span class="string">'姓名'</span>: <span class="string">'username'</span>,</span><br><span class="line">     <span class="string">'入职日期'</span>: <span class="string">'timeOfEntry'</span>,</span><br><span class="line">     <span class="string">'聘用形式'</span>: <span class="string">'formOfEmployment'</span>,</span><br><span class="line">     <span class="string">'转正日期'</span>: <span class="string">'correctionTime'</span>,</span><br><span class="line">     <span class="string">'工号'</span>: <span class="string">'workNumber'</span>,</span><br><span class="line">     <span class="string">'部门'</span>: <span class="string">'departmentName'</span></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>

<p>然后，<strong>完成导出代码</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 导出excel数据</span></span><br><span class="line"><span class="function"><span class="title">exportData</span>(<span class="params"></span>)</span> {</span><br><span class="line">  <span class="comment">//  做操作</span></span><br><span class="line">  <span class="comment">// 表头对应关系</span></span><br><span class="line">  <span class="keyword">const</span> headers = {</span><br><span class="line">    <span class="string">'姓名'</span>: <span class="string">'username'</span>,</span><br><span class="line">    <span class="string">'手机号'</span>: <span class="string">'mobile'</span>,</span><br><span class="line">    <span class="string">'入职日期'</span>: <span class="string">'timeOfEntry'</span>,</span><br><span class="line">    <span class="string">'聘用形式'</span>: <span class="string">'formOfEmployment'</span>,</span><br><span class="line">    <span class="string">'转正日期'</span>: <span class="string">'correctionTime'</span>,</span><br><span class="line">    <span class="string">'工号'</span>: <span class="string">'workNumber'</span>,</span><br><span class="line">    <span class="string">'部门'</span>: <span class="string">'departmentName'</span></span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 懒加载</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'@/vendor/Export2Excel'</span>).then(<span class="keyword">async</span> excel =&gt; {</span><br><span class="line">    <span class="keyword">const</span> { rows } = <span class="keyword">await</span> getEmployeeList({ <span class="attr">page</span>: <span class="number">1</span>, <span class="attr">size</span>: <span class="built_in">this</span>.page.total })</span><br><span class="line">    <span class="keyword">const</span> data = <span class="built_in">this</span>.formatJson(headers, rows)</span><br><span class="line"></span><br><span class="line">    excel.export_json_to_excel({</span><br><span class="line">      <span class="attr">header</span>: <span class="built_in">Object</span>.keys(headers),</span><br><span class="line">      data,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">'员工信息表'</span>,</span><br><span class="line">      <span class="attr">autoWidth</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">bookType</span>: <span class="string">'xlsx'</span></span><br><span class="line"></span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 获取所有的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// excel.export_json_to_excel({</span></span><br><span class="line">    <span class="comment">//   header: ['姓名', '薪资'],</span></span><br><span class="line">    <span class="comment">//   data: [['张三', 12000], ['李四', 5000]],</span></span><br><span class="line">    <span class="comment">//   filename: '员工薪资表',</span></span><br><span class="line">    <span class="comment">//   autoWidth: true,</span></span><br><span class="line">    <span class="comment">//   bookType: 'csv'</span></span><br><span class="line">    <span class="comment">// })</span></span><br><span class="line">  })</span><br><span class="line">},</span><br><span class="line"><span class="comment">// 该方法负责将数组转化成二维数组</span></span><br><span class="line"><span class="function"><span class="title">formatJson</span>(<span class="params">headers, rows</span>)</span> {</span><br><span class="line">  <span class="comment">// 首先遍历数组</span></span><br><span class="line">  <span class="comment">// [{ username: '张三'},{},{}]  =&gt; [[’张三'],[],[]]</span></span><br><span class="line">  <span class="keyword">return</span> rows.map(<span class="function"><span class="params">item</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(headers).map(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">      <span class="keyword">if</span> (headers[key] === <span class="string">'timeOfEntry'</span> || headers[key] === <span class="string">'correctionTime'</span>) {</span><br><span class="line">        <span class="keyword">return</span> formatDate(item[headers[key]]) <span class="comment">// 返回格式化之前的时间</span></span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (headers[key] === <span class="string">'formOfEmployment'</span>) {</span><br><span class="line">        <span class="keyword">var</span> en = EmployeeEnum.hireType.find(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id === item[headers[key]])</span><br><span class="line">        <span class="keyword">return</span> en ? en.value : <span class="string">'未知'</span></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> item[headers[key]]</span><br><span class="line">    }) <span class="comment">// =&gt; ["张三", "13811"，"2018","1", "2018", "10002"]</span></span><br><span class="line">  })</span><br><span class="line">  <span class="comment">// return data</span></span><br><span class="line">  <span class="comment">// return rows.map(item =&gt; {</span></span><br><span class="line">  <span class="comment">//   // item是对象  =&gt; 转化成只有值的数组 =&gt; 数组值的顺序依赖headers  {username: '张三'  }</span></span><br><span class="line">  <span class="comment">//   // Object.keys(headers)  =&gt; ["姓名", "手机号",...]</span></span><br><span class="line">  <span class="comment">//   return Object.keys(headers).map(key =&gt; {</span></span><br><span class="line">  <span class="comment">//     return item[headers[key]]</span></span><br><span class="line">  <span class="comment">//   }) // /  得到 ['张三'，’129‘，’dd‘,'dd']</span></span><br><span class="line">  <span class="comment">// })</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="导出时间格式的处理"><a href="#导出时间格式的处理" class="headerlink" title="导出时间格式的处理"></a>导出时间格式的处理</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">formatJson</span>(<span class="params">headers, rows</span>)</span> {</span><br><span class="line">  <span class="keyword">return</span> rows.map(<span class="function"><span class="params">item</span> =&gt;</span> {</span><br><span class="line">    <span class="comment">// item是一个对象  { mobile: 132111,username: '张三'  }</span></span><br><span class="line">    <span class="comment">// ["手机号", "姓名", "入职日期" 。。]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(headers).map(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">      <span class="comment">// 需要判断 字段</span></span><br><span class="line">      <span class="keyword">if</span> (headers[key] === <span class="string">'timeOfEntry'</span> || headers[key] === <span class="string">'correctionTime'</span>) {</span><br><span class="line">        <span class="comment">// 格式化日期</span></span><br><span class="line">        <span class="keyword">return</span> formatDate(item[headers[key]])</span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (headers[key] === <span class="string">'formOfEmployment'</span>) {</span><br><span class="line">        <span class="keyword">const</span> obj = EmployeeEnum.hireType.find(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id === item[headers[key]])</span><br><span class="line">        <span class="keyword">return</span> obj ? obj.value : <span class="string">'未知'</span></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> item[headers[key]]</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// ["132", '张三’， ‘’，‘’，‘’d]</span></span><br><span class="line">  })</span><br><span class="line">  <span class="comment">// return rows.map(item =&gt; Object.keys(headers).map(key =&gt; item[headers[key]]))</span></span><br><span class="line">  <span class="comment">// 需要处理时间格式问题</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h3 id="扩展-复杂表头的导出"><a href="#扩展-复杂表头的导出" class="headerlink" title="扩展  复杂表头的导出"></a><strong><code>扩展</code></strong>  复杂表头的导出</h3><blockquote>
<p>当需要导出复杂表头的时候，vue-element-admin同样支持该类操作</p>
</blockquote>
<p><strong>vue-element-admin</strong> 提供的导出方法中有 <strong>multiHeader</strong>和<strong>merges</strong> 的参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>multiHeader</td>
<td>复杂表头的部分</td>
<td>Array</td>
<td>/</td>
<td>[[]]</td>
</tr>
<tr>
<td>merges</td>
<td>需要合并的部分</td>
<td>Array</td>
<td>/</td>
<td>[]</td>
</tr>
</tbody></table>
<p>multiHeader里面是一个二维数组，里面的一个元素是一行表头，假设你想得到一个如图的结构</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20201014152302636.png" alt="image-20201014152302636"></p>
<p>mutiHeader应该这样定义</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multiHeader = [[<span class="string">'姓名'</span>, <span class="string">'主要信息'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'部门'</span>]]</span><br></pre></td></tr></tbody></table></figure>

<p>multiHeader中的一行表头中的字段的个数需要和真正的列数相等，假设想要跨列，多余的空间需要定义成空串</p>
<p>它主要对应的是标准的表头</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> header = [<span class="string">'姓名'</span>, <span class="string">'手机号'</span>, <span class="string">'入职日期'</span>, <span class="string">'聘用形式'</span>, <span class="string">'转正日期'</span>, <span class="string">'工号'</span>, <span class="string">'部门'</span>]</span><br></pre></td></tr></tbody></table></figure>

<p>如果，我们要实现其合并的效果， 需要设定merges选项</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merges = [<span class="string">'A1:A2'</span>, <span class="string">'B1:F1'</span>, <span class="string">'G1:G2'</span>]</span><br></pre></td></tr></tbody></table></figure>

<p>merges的顺序是没关系的，只要配置这两个属性，就可以导出复杂表头的excel了</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">exportData</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">const</span> headers = {</span><br><span class="line">      <span class="string">'姓名'</span>: <span class="string">'username'</span>,</span><br><span class="line">      <span class="string">'手机号'</span>: <span class="string">'mobile'</span>,</span><br><span class="line">      <span class="string">'入职日期'</span>: <span class="string">'timeOfEntry'</span>,</span><br><span class="line">      <span class="string">'聘用形式'</span>: <span class="string">'formOfEmployment'</span>,</span><br><span class="line">      <span class="string">'转正日期'</span>: <span class="string">'correctionTime'</span>,</span><br><span class="line">      <span class="string">'工号'</span>: <span class="string">'workNumber'</span>,</span><br><span class="line">      <span class="string">'部门'</span>: <span class="string">'departmentName'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 导出excel</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="string">'@/vendor/Export2Excel'</span>).then(<span class="keyword">async</span> excel =&gt; {</span><br><span class="line">      <span class="comment">//  excel是引入文件的导出对象</span></span><br><span class="line">      <span class="comment">// 导出  header从哪里来</span></span><br><span class="line">      <span class="comment">// data从哪里来</span></span><br><span class="line">      <span class="comment">// 现在没有一个接口获取所有的数据</span></span><br><span class="line">      <span class="comment">// 获取员工的接口 页码 每页条数    100   1 10000</span></span><br><span class="line">      <span class="keyword">const</span> { rows } = <span class="keyword">await</span> getEmployeeList({ <span class="attr">page</span>: <span class="number">1</span>, <span class="attr">size</span>: <span class="built_in">this</span>.page.total })</span><br><span class="line">      <span class="keyword">const</span> data = <span class="built_in">this</span>.formatJson(headers, rows) <span class="comment">// 返回的data就是 要导出的结构</span></span><br><span class="line">      <span class="keyword">const</span> multiHeader = [[<span class="string">'姓名'</span>, <span class="string">'主要信息'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'部门'</span>]]</span><br><span class="line">      <span class="keyword">const</span> merges = [<span class="string">'A1:A2'</span>, <span class="string">'B1:F1'</span>, <span class="string">'G1:G2'</span>]</span><br><span class="line">      excel.export_json_to_excel({</span><br><span class="line">        <span class="attr">header</span>: <span class="built_in">Object</span>.keys(headers),</span><br><span class="line">        data,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">'员工资料表'</span>,</span><br><span class="line">        multiHeader, <span class="comment">// 复杂表头</span></span><br><span class="line">        merges <span class="comment">// 合并选项</span></span><br><span class="line">      })</span><br><span class="line"></span><br><span class="line">      <span class="comment">// excel.export_json_to_excel({</span></span><br><span class="line">      <span class="comment">//   header: ['姓名', '工资'],</span></span><br><span class="line">      <span class="comment">//   data: [['张三', 3000], ['李四', 5000]],</span></span><br><span class="line">      <span class="comment">//   filename: '员工工资表'</span></span><br><span class="line">      <span class="comment">// })</span></span><br><span class="line">      <span class="comment">// [{ username: '张三',mobile: 13112345678 }]  =&gt; [[]]</span></span><br><span class="line">      <span class="comment">// 要转化 数据结构 还要和表头的顺序对应上</span></span><br><span class="line">      <span class="comment">// 要求转出的标题是中文</span></span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 将表头数据和数据进行对应</span></span><br><span class="line">  <span class="comment">// [{}]  =&gt;   [[]]</span></span><br><span class="line">  <span class="function"><span class="title">formatJson</span>(<span class="params">headers, rows</span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> rows.map(<span class="function"><span class="params">item</span> =&gt;</span> {</span><br><span class="line">      <span class="comment">// item是一个对象  { mobile: 132111,username: '张三'  }</span></span><br><span class="line">      <span class="comment">// ["手机号", "姓名", "入职日期" 。。]</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.keys(headers).map(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">// 需要判断 字段</span></span><br><span class="line">        <span class="keyword">if</span> (headers[key] === <span class="string">'timeOfEntry'</span> || headers[key] === <span class="string">'correctionTime'</span>) {</span><br><span class="line">          <span class="comment">// 格式化日期</span></span><br><span class="line">          <span class="keyword">return</span> formatDate(item[headers[key]])</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (headers[key] === <span class="string">'formOfEmployment'</span>) {</span><br><span class="line">          <span class="keyword">const</span> obj = EmployeeEnum.hireType.find(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id === item[headers[key]])</span><br><span class="line">          <span class="keyword">return</span> obj ? obj.value : <span class="string">'未知'</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> item[headers[key]]</span><br><span class="line">      })</span><br><span class="line">      <span class="comment">// ["132", '张三’， ‘’，‘’，‘’d]</span></span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// return rows.map(item =&gt; Object.keys(headers).map(key =&gt; item[headers[key]]))</span></span><br><span class="line">    <span class="comment">// 需要处理时间格式问题</span></span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**实现将员工数据导出功能</p>
<h2 id="员工详情页创建和布局"><a href="#员工详情页创建和布局" class="headerlink" title="员工详情页创建和布局"></a>员工详情页创建和布局</h2><p>**<code>目标</code>**：创建员工详情的主要布局页面和基本布局</p>
<h3 id="详情页的基本布局和路由"><a href="#详情页的基本布局和路由" class="headerlink" title="详情页的基本布局和路由"></a>详情页的基本布局和路由</h3><p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200726130305221.png" alt="image-20200726130305221"></p>
<p><strong>建立详情页路由</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'detail/:id'</span>, <span class="comment">// query传参 动态路由传参</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/employees/detail'</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>, <span class="comment">// 不在左侧菜单显示</span></span><br><span class="line">    <span class="attr">meta</span>: {</span><br><span class="line">      <span class="attr">title</span>: <span class="string">'员工详情'</span> <span class="comment">// 标记当前路由规则的中文名称 后续在做左侧菜单时 使用</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>建立基本架构</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div class="dashboard-container"&gt;</span><br><span class="line">    &lt;div class="app-container"&gt;</span><br><span class="line">      &lt;el-card&gt;</span><br><span class="line">        &lt;el-tabs&gt;</span><br><span class="line">          &lt;el-tab-pane label="登录账户设置"&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 放置表单 --&gt;</span><br><span class="line">            &lt;el-form label-width="120px" style="margin-left: 120px; margin-top:30px"&gt;</span><br><span class="line">              &lt;el-form-item label="姓名:"&gt;</span><br><span class="line">                &lt;el-input style="width:300px" /&gt;</span><br><span class="line">              &lt;/el-form-item&gt;</span><br><span class="line">              &lt;el-form-item label="密码:"&gt;</span><br><span class="line">                &lt;el-input style="width:300px" type="password" /&gt;</span><br><span class="line">              &lt;/el-form-item&gt;</span><br><span class="line">              &lt;el-form-item&gt;</span><br><span class="line">                &lt;el-button type="primary"&gt;更新&lt;/el-button&gt;</span><br><span class="line">              &lt;/el-form-item&gt;</span><br><span class="line">            &lt;/el-form&gt;</span><br><span class="line">          &lt;/el-tab-pane&gt;</span><br><span class="line">          &lt;el-tab-pane label="个人详情" /&gt;</span><br><span class="line">          &lt;el-tab-pane label="岗位信息" /&gt;</span><br><span class="line">        &lt;/el-tabs&gt;</span><br><span class="line">      &lt;/el-card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>列表跳转到详情</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-button type="text" size="small" @click="$router.push(`/employees/detail/${obj.row.id}`)"&gt;查看&lt;/el-button&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="读取和保存用户信息的接口"><a href="#读取和保存用户信息的接口" class="headerlink" title="读取和保存用户信息的接口"></a>读取和保存用户信息的接口</h3><p><strong>加载个人基本信息</strong> &gt; 该接口已经在之前提供过了 <strong><code>src/api/user.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> *  获取某个用户的基本信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserDetailById</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/user/<span class="subst">${id}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>保存个人基本信息</strong>  <strong><code>src/api/employees.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 保存员工的基本信息</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">saveUserDetailById</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/user/<span class="subst">${data.id}</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'put'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="实现用户名和密码的修改"><a href="#实现用户名和密码的修改" class="headerlink" title="实现用户名和密码的修改"></a>实现用户名和密码的修改</h3><p><strong><code>注意</code><strong>：这里有个缺陷，接口中读取的是后端的密文，我们并不能解密，所以当我们没有任何修改就保存时，会校验失败，因为密文超过了规定的12位长度，为了真的修改密码，我们设定了一个临时的字段 <strong>password2</strong>，用它来存储我们的修改值，最后保存的时候，把</strong>password2</strong>传给<strong>password</strong></p>
<p><strong>用户名和密码的修改</strong>  <strong><code>src/views/employees/detail.vue</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { getUserDetailById } <span class="keyword">from</span> <span class="string">'@/api/user'</span></span><br><span class="line"><span class="keyword">import</span> { saveUserDetailById } <span class="keyword">from</span> <span class="string">'@/api/employees'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">userId</span>: <span class="built_in">this</span>.$route.params.id, <span class="comment">// 这样可以后面直接通过 this.userId进行获取数据</span></span><br><span class="line">      <span class="attr">userInfo</span>: {</span><br><span class="line">        <span class="comment">//   专门存放基本信息</span></span><br><span class="line">        <span class="attr">username</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="attr">password2</span>: <span class="string">''</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">rules</span>: {</span><br><span class="line">        <span class="attr">username</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'姓名不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }],</span><br><span class="line">        <span class="attr">password2</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'密码不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">          { <span class="attr">min</span>: <span class="number">6</span>, <span class="attr">max</span>: <span class="number">9</span>, <span class="attr">message</span>: <span class="string">'密码长度6-9位'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.getUserDetailById()</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getUserDetailById</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.userInfo = <span class="keyword">await</span> getUserDetailById(<span class="built_in">this</span>.userId)</span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">saveUser</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 校验</span></span><br><span class="line">        <span class="keyword">await</span> <span class="built_in">this</span>.$refs.userForm.validate()</span><br><span class="line">        <span class="keyword">await</span> saveUserDetailById({ ...this.userInfo, <span class="attr">password</span>: <span class="built_in">this</span>.userInfo.password2 }) <span class="comment">// 将新密码的值替换原密码的值</span></span><br><span class="line">        <span class="built_in">this</span>.$message.success(<span class="string">'保存成功'</span>)</span><br><span class="line">      } <span class="keyword">catch</span> (error) {</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>绑定表单数据</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 放置表单 --&gt;</span><br><span class="line">           &lt;el-form ref="userForm" :model="userInfo" :rules="rules" label-width="120px" style="margin-left: 120px; margin-top:30px"&gt;</span><br><span class="line">             &lt;el-form-item label="姓名:" prop="username"&gt;</span><br><span class="line">               &lt;el-input v-model="userInfo.username" style="width:300px" /&gt;</span><br><span class="line">             &lt;/el-form-item&gt;</span><br><span class="line">             &lt;el-form-item label="新密码:" prop="password2"&gt;</span><br><span class="line">               &lt;el-input v-model="userInfo.password2" style="width:300px" type="password" /&gt;</span><br><span class="line">             &lt;/el-form-item&gt;</span><br><span class="line">             &lt;el-form-item&gt;</span><br><span class="line">               &lt;el-button type="primary" @click="saveUser"&gt;更新&lt;/el-button&gt;</span><br><span class="line">             &lt;/el-form-item&gt;</span><br><span class="line">           &lt;/el-form&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<h2 id="个人组件和岗位组件封装"><a href="#个人组件和岗位组件封装" class="headerlink" title="个人组件和岗位组件封装"></a>个人组件和岗位组件封装</h2><h3 id="封装个人详情组件"><a href="#封装个人详情组件" class="headerlink" title="封装个人详情组件"></a>封装个人详情组件</h3><blockquote>
<p>我们将员工个人信息分为三部分，账户，个人， 岗位，这个小节我们对个人组件和岗位组件进行封装</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200901105323305.png" alt="image-20200901105323305"></p>
<p><strong>封装个人组件</strong>   <strong><code>src/views/employees/components/user-info.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="user-info"&gt;</span><br><span class="line">    &lt;!-- 个人信息 --&gt;</span><br><span class="line">    &lt;el-form label-width="220px"&gt;</span><br><span class="line">      &lt;!-- 工号 入职时间 --&gt;</span><br><span class="line">      &lt;el-row class="inline-info"&gt;</span><br><span class="line">        &lt;el-col :span="12"&gt;</span><br><span class="line">          &lt;el-form-item label="工号"&gt;</span><br><span class="line">            &lt;el-input v-model="userInfo.workNumber" class="inputW" /&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">        &lt;el-col :span="12"&gt;</span><br><span class="line">          &lt;el-form-item label="入职时间"&gt;</span><br><span class="line">            &lt;el-date-picker</span><br><span class="line">              v-model="userInfo.timeOfEntry"</span><br><span class="line">              type="date"</span><br><span class="line">              class="inputW"</span><br><span class="line">              value-format="YYYY-MM-DD"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line">      &lt;!-- 姓名 部门 --&gt;</span><br><span class="line">      &lt;el-row class="inline-info"&gt;</span><br><span class="line">        &lt;el-col :span="12"&gt;</span><br><span class="line">          &lt;el-form-item label="姓名"&gt;</span><br><span class="line">            &lt;el-input v-model="userInfo.username" class="inputW" /&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">        &lt;el-col :span="12"&gt;</span><br><span class="line">          &lt;el-form-item label="部门"&gt;</span><br><span class="line">            &lt;el-input v-model="userInfo.departmentName" class="inputW" /&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line">      &lt;!--手机 聘用形式  --&gt;</span><br><span class="line">      &lt;el-row class="inline-info"&gt;</span><br><span class="line">        &lt;el-col :span="12"&gt;</span><br><span class="line">          &lt;el-form-item label="手机"&gt;</span><br><span class="line">            &lt;el-input v-model="userInfo.mobile" /&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">        &lt;el-col :span="12"&gt;</span><br><span class="line">          &lt;el-form-item label="聘用形式"&gt;</span><br><span class="line">            &lt;el-select v-model="userInfo.formOfEmployment" class="inputW"&gt;</span><br><span class="line">              &lt;el-option</span><br><span class="line">                v-for="item in EmployeeEnum.hireType"</span><br><span class="line">                :key="item.id"</span><br><span class="line">                :label="item.value"</span><br><span class="line">                :value="item.id"</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/el-select&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line">      &lt;!-- 员工照片 --&gt;</span><br><span class="line">      &lt;el-row class="inline-info"&gt;</span><br><span class="line">        &lt;el-col :span="12"&gt;</span><br><span class="line">          &lt;el-form-item label="员工头像"&gt;</span><br><span class="line">            &lt;!-- 放置上传图片 --&gt;</span><br><span class="line">           </span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line">      &lt;!-- 保存个人信息 --&gt;</span><br><span class="line">      &lt;el-row class="inline-info" type="flex" justify="center"&gt;</span><br><span class="line">        &lt;el-col :span="12"&gt;</span><br><span class="line">          &lt;el-button type="primary" @click="saveUser"&gt;保存更新&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button @click="$router.back()"&gt;返回&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">    &lt;!-- 基础信息 --&gt;</span><br><span class="line">    &lt;el-form label-width="220px"&gt;</span><br><span class="line">      &lt;div class="block"&gt;</span><br><span class="line">        &lt;div class="title"&gt;基础信息&lt;/div&gt;</span><br><span class="line">        &lt;el-form-item label="最高学历"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.theHighestDegreeOfEducation" class="inputW2"&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for="item in EmployeeEnum.highestDegree"</span><br><span class="line">              :key="item.value"</span><br><span class="line">              :label="item.label"</span><br><span class="line">              :value="item.value"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;!-- 个人头像 --&gt;</span><br><span class="line">        &lt;!-- 员工照片 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-form-item label="员工照片"&gt;</span><br><span class="line">          &lt;!-- 放置上传图片 --&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="国家/地区"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.nationalArea" class="inputW2"&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for="item in EmployeeEnum.isOverseas"</span><br><span class="line">              :key="item.value"</span><br><span class="line">              :label="item.label"</span><br><span class="line">              :value="item.value"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="护照号"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.passportNo" placeholder="正规护照格式" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="身份证号"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.idNumber" placeholder="正规身份证格式" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="籍贯"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.nativePlace" placeholder="籍贯地址" class="inputW5" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="民族"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.nation" placeholder="请输入民族" class="inputW2" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="婚姻状况"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.maritalStatus" class="inputW2"&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for="item in EmployeeEnum.maritaStatus"</span><br><span class="line">              :key="item.value"</span><br><span class="line">              :label="item.label"</span><br><span class="line">              :value="item.value"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="生日"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.birthday" placeholder="示例 0323" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="年龄"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.age" type="number" class="inputW2" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="星座"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.constellation" class="inputW2"&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for="item in EmployeeEnum.constellation"</span><br><span class="line">              :key="item.value"</span><br><span class="line">              :label="item.label"</span><br><span class="line">              :value="item.value"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="血型"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.bloodType" class="inputW2"&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for="item in EmployeeEnum.bloodType"</span><br><span class="line">              :key="item.value"</span><br><span class="line">              :label="item.label"</span><br><span class="line">              :value="item.value"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="户籍所在地"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.domicile" class="inputW5" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="政治面貌"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.politicalOutlook" class="inputW2" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="入党时间"&gt;</span><br><span class="line">          &lt;el-date-picker</span><br><span class="line">            v-model="formData.timeToJoinTheParty"</span><br><span class="line">            type="date"</span><br><span class="line">            placeholder="选择日期"</span><br><span class="line">            class="inputW"</span><br><span class="line">            value-format="yyyy-MM-dd"</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="存档机构"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.archivingOrganization" placeholder="请输入" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="子女状态"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.stateOfChildren" placeholder="请输入" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="子女有无商业险"&gt;</span><br><span class="line">          &lt;el-radio-group v-model="formData.doChildrenHaveCommercialInsurance"&gt;</span><br><span class="line">            &lt;el-radio label="1"&gt;有&lt;/el-radio&gt;</span><br><span class="line">            &lt;el-radio label="2"&gt;无&lt;/el-radio&gt;</span><br><span class="line">          &lt;/el-radio-group&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="有无违法违纪状态"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.isThereAnyViolationOfLawOrDiscipline" placeholder="请输入" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="有无重大病史"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.areThereAnyMajorMedicalHistories" placeholder="请输入" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 通讯信息 --&gt;</span><br><span class="line">      &lt;div class="block"&gt;</span><br><span class="line">        &lt;div class="title"&gt;通讯信息&lt;/div&gt;</span><br><span class="line">        &lt;el-form-item label="QQ"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.qq" placeholder="请输入" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="微信"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.wechat" placeholder="请输入" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="现居住地"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.placeOfResidence" placeholder="请输入" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="通讯地址"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.postalAddress" placeholder="请输入" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="联系手机"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.contactTheMobilePhone" placeholder="11位字符" maxlength="11" class="inputW" @change.native="handlePhone(2)" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="个人邮箱"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.personalMailbox" placeholder="请输入" type="mail" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="紧急联系人"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.emergencyContact" placeholder="请输入" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="紧急联系电话"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.emergencyContactNumber" placeholder="11位字符" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 账号信息 --&gt;</span><br><span class="line">      &lt;div class="block"&gt;</span><br><span class="line">        &lt;div class="title"&gt;账号信息&lt;/div&gt;</span><br><span class="line">        &lt;el-form-item label="社保电脑号"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.socialSecurityComputerNumber" placeholder="请输入" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="公积金账号"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.providentFundAccount" placeholder="请输入" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="银行卡号"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.bankCardNumber" placeholder="请输入" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="开户行"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.openingBank" placeholder="请输入" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 教育信息 --&gt;</span><br><span class="line">      &lt;div class="block"&gt;</span><br><span class="line">        &lt;div class="title"&gt;教育信息&lt;/div&gt;</span><br><span class="line">        &lt;el-form-item label="学历类型"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.educationalType" placeholder="请选择"&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for="item in EmployeeEnum.educationType"</span><br><span class="line">              :key="item.value"</span><br><span class="line">              :label="item.label"</span><br><span class="line">              :value="item.value"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="毕业学校"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.graduateSchool" placeholder="请输入" class="inputW2" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="入学时间"&gt;</span><br><span class="line">          &lt;el-date-picker v-model="formData.enrolmentTime" type="data" placeholder="请输入时间" class="inputW" value-format="yyyy-MM-dd" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="毕业时间"&gt;</span><br><span class="line">          &lt;el-date-picker v-model="formData.graduationTime" type="data" placeholder="请输入时间" class="inputW" value-format="yyyy-MM-dd" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="专业"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.major" placeholder="请输入" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 从业信息 --&gt;</span><br><span class="line">      &lt;div class="block"&gt;</span><br><span class="line">        &lt;div class="title"&gt;从业信息&lt;/div&gt;</span><br><span class="line">        &lt;el-form-item label="上家公司"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.homeCompany" placeholder="请输入" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="职称"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.title" placeholder="请输入" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="有无竞业限制"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.isThereAnyCompetitionRestriction" placeholder="请输入" style="width:80%" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="备注"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.remarks" type="textarea" placeholder="请输入备注" style="width:80%" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;!-- 保存员工信息 --&gt;</span><br><span class="line">        &lt;el-row class="inline-info" type="flex" justify="center"&gt;</span><br><span class="line">          &lt;el-col :span="12"&gt;</span><br><span class="line">            &lt;el-button type="primary" @click="savePersonal"&gt;保存更新&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button @click="$router.back()"&gt;返回&lt;/el-button&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>本章节个人数据过于**<code>繁杂，庞大</code>**，同学们在开发期间，拷贝代码即可，我们只写关键部位的代码</p>
</blockquote>
<p><strong>定义user-info的数据</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> EmployeeEnum <span class="keyword">from</span> <span class="string">'@/api/constant/employees'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">userId</span>: <span class="built_in">this</span>.$route.params.id,</span><br><span class="line">      EmployeeEnum, <span class="comment">// 员工枚举数据</span></span><br><span class="line">      <span class="attr">userInfo</span>: {},</span><br><span class="line">      <span class="attr">formData</span>: {</span><br><span class="line">        <span class="attr">userId</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="attr">username</span>: <span class="string">''</span>, <span class="comment">// 用户名</span></span><br><span class="line">        <span class="attr">sex</span>: <span class="string">''</span>, <span class="comment">// 性别</span></span><br><span class="line">        <span class="attr">mobile</span>: <span class="string">''</span>, <span class="comment">// 手机</span></span><br><span class="line">        <span class="attr">companyId</span>: <span class="string">''</span>, <span class="comment">// 公司id</span></span><br><span class="line">        <span class="attr">departmentName</span>: <span class="string">''</span>, <span class="comment">// 部门名称</span></span><br><span class="line">        <span class="comment">//  onTheJobStatus: '', // 在职状态 no</span></span><br><span class="line">        <span class="attr">dateOfBirth</span>: <span class="string">''</span>, <span class="comment">// 出生日期</span></span><br><span class="line">        <span class="attr">timeOfEntry</span>: <span class="string">''</span>, <span class="comment">// 入职时间</span></span><br><span class="line">        <span class="attr">theHighestDegreeOfEducation</span>: <span class="string">''</span>, <span class="comment">// 最高学历</span></span><br><span class="line">        <span class="attr">nationalArea</span>: <span class="string">''</span>, <span class="comment">// 国家</span></span><br><span class="line">        <span class="attr">passportNo</span>: <span class="string">''</span>, <span class="comment">// 护照号</span></span><br><span class="line">        <span class="attr">idNumber</span>: <span class="string">''</span>, <span class="comment">// 身份证号</span></span><br><span class="line">        <span class="attr">idCardPhotoPositive</span>: <span class="string">''</span>, <span class="comment">// 身份证照正</span></span><br><span class="line">        <span class="attr">idCardPhotoBack</span>: <span class="string">''</span>, <span class="comment">// 身份证照正</span></span><br><span class="line">        <span class="attr">nativePlace</span>: <span class="string">''</span>, <span class="comment">// 籍贯</span></span><br><span class="line">        <span class="attr">nation</span>: <span class="string">''</span>, <span class="comment">// 民族</span></span><br><span class="line">        <span class="attr">englishName</span>: <span class="string">''</span>, <span class="comment">// 英文名字</span></span><br><span class="line">        <span class="attr">maritalStatus</span>: <span class="string">''</span>, <span class="comment">// 婚姻状况</span></span><br><span class="line">        <span class="attr">staffPhoto</span>: <span class="string">''</span>, <span class="comment">// 员工照片</span></span><br><span class="line">        <span class="attr">birthday</span>: <span class="string">''</span>, <span class="comment">// 生日</span></span><br><span class="line">        <span class="attr">zodiac</span>: <span class="string">''</span>, <span class="comment">// 属相</span></span><br><span class="line">        <span class="attr">age</span>: <span class="string">''</span>, <span class="comment">// 年龄</span></span><br><span class="line">        <span class="attr">constellation</span>: <span class="string">''</span>, <span class="comment">// 星座</span></span><br><span class="line">        <span class="attr">bloodType</span>: <span class="string">''</span>, <span class="comment">// 血型</span></span><br><span class="line">        <span class="attr">domicile</span>: <span class="string">''</span>, <span class="comment">// 户籍所在地</span></span><br><span class="line">        <span class="attr">politicalOutlook</span>: <span class="string">''</span>, <span class="comment">// 政治面貌</span></span><br><span class="line">        <span class="attr">timeToJoinTheParty</span>: <span class="string">''</span>, <span class="comment">// 入党时间</span></span><br><span class="line">        <span class="attr">archivingOrganization</span>: <span class="string">''</span>, <span class="comment">// 存档机构</span></span><br><span class="line">        <span class="attr">stateOfChildren</span>: <span class="string">''</span>, <span class="comment">// 子女状态</span></span><br><span class="line">        <span class="attr">doChildrenHaveCommercialInsurance</span>: <span class="string">'1'</span>, <span class="comment">// 保险状态</span></span><br><span class="line">        <span class="attr">isThereAnyViolationOfLawOrDiscipline</span>: <span class="string">''</span>, <span class="comment">// 违法违纪状态</span></span><br><span class="line">        <span class="attr">areThereAnyMajorMedicalHistories</span>: <span class="string">''</span>, <span class="comment">// 重大病史</span></span><br><span class="line">        <span class="attr">qq</span>: <span class="string">''</span>, <span class="comment">// QQ</span></span><br><span class="line">        <span class="attr">wechat</span>: <span class="string">''</span>, <span class="comment">// 微信</span></span><br><span class="line">        <span class="attr">residenceCardCity</span>: <span class="string">''</span>, <span class="comment">// 居住证城市</span></span><br><span class="line">        <span class="attr">dateOfResidencePermit</span>: <span class="string">''</span>, <span class="comment">// 居住证办理日期</span></span><br><span class="line">        <span class="attr">residencePermitDeadline</span>: <span class="string">''</span>, <span class="comment">// 居住证截止日期</span></span><br><span class="line">        <span class="attr">placeOfResidence</span>: <span class="string">''</span>, <span class="comment">// 现居住地</span></span><br><span class="line">        <span class="attr">postalAddress</span>: <span class="string">''</span>, <span class="comment">// 通讯地址</span></span><br><span class="line">        <span class="attr">contactTheMobilePhone</span>: <span class="string">''</span>, <span class="comment">// 联系手机</span></span><br><span class="line">        <span class="attr">personalMailbox</span>: <span class="string">''</span>, <span class="comment">// 个人邮箱</span></span><br><span class="line">        <span class="attr">emergencyContact</span>: <span class="string">''</span>, <span class="comment">// 紧急联系人</span></span><br><span class="line">        <span class="attr">emergencyContactNumber</span>: <span class="string">''</span>, <span class="comment">// 紧急联系电话</span></span><br><span class="line">        <span class="attr">socialSecurityComputerNumber</span>: <span class="string">''</span>, <span class="comment">// 社保电脑号</span></span><br><span class="line">        <span class="attr">providentFundAccount</span>: <span class="string">''</span>, <span class="comment">// 公积金账号</span></span><br><span class="line">        <span class="attr">bankCardNumber</span>: <span class="string">''</span>, <span class="comment">// 银行卡号</span></span><br><span class="line">        <span class="attr">openingBank</span>: <span class="string">''</span>, <span class="comment">// 开户行</span></span><br><span class="line">        <span class="attr">educationalType</span>: <span class="string">''</span>, <span class="comment">// 学历类型</span></span><br><span class="line">        <span class="attr">graduateSchool</span>: <span class="string">''</span>, <span class="comment">// 毕业学校</span></span><br><span class="line">        <span class="attr">enrolmentTime</span>: <span class="string">''</span>, <span class="comment">// 入学时间</span></span><br><span class="line">        <span class="attr">graduationTime</span>: <span class="string">''</span>, <span class="comment">// 毕业时间</span></span><br><span class="line">        <span class="attr">major</span>: <span class="string">''</span>, <span class="comment">// 专业</span></span><br><span class="line">        <span class="attr">graduationCertificate</span>: <span class="string">''</span>, <span class="comment">// 毕业证书</span></span><br><span class="line">        <span class="attr">certificateOfAcademicDegree</span>: <span class="string">''</span>, <span class="comment">// 学位证书</span></span><br><span class="line">        <span class="attr">homeCompany</span>: <span class="string">''</span>, <span class="comment">// 上家公司</span></span><br><span class="line">        <span class="attr">title</span>: <span class="string">''</span>, <span class="comment">// 职称</span></span><br><span class="line">        <span class="attr">resume</span>: <span class="string">''</span>, <span class="comment">// 简历</span></span><br><span class="line">        <span class="attr">isThereAnyCompetitionRestriction</span>: <span class="string">''</span>, <span class="comment">// 有无竞业限制</span></span><br><span class="line">        <span class="attr">proofOfDepartureOfFormerCompany</span>: <span class="string">''</span>, <span class="comment">// 前公司离职证明</span></span><br><span class="line">        <span class="attr">remarks</span>: <span class="string">''</span> <span class="comment">// 备注</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>在detail.vue组件中，注册并使用</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-tab-pane label="个人详情"&gt;</span><br><span class="line">           &lt;!-- 放置个人详情 --&gt;</span><br><span class="line">           &lt;component :is="userComponent" /&gt;</span><br><span class="line">           &lt;!-- &lt;user-info /&gt; --&gt;</span><br><span class="line"> &lt;/el-tab-pane&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>在以上代码中，我们使用了动态组件<strong>component</strong>，它通过 **<code>is</code><strong>属性来绑定需要显示在该位置的组件，is属性可以直接为</strong><code>注册组件</code>**的组件名称即可</p>
<h3 id="封装岗位组件"><a href="#封装岗位组件" class="headerlink" title="封装岗位组件"></a>封装岗位组件</h3><p>同理，封装岗位组件</p>
<p><strong>封装岗位组件</strong>  <strong><code>src/views/employee/components/job-info.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class="job-info"&gt;</span><br><span class="line">    &lt;!-- 基础信息 --&gt;</span><br><span class="line">    &lt;el-form label-width="220px"&gt;</span><br><span class="line">      &lt;div class="block"&gt;</span><br><span class="line">        &lt;div class="title"&gt;基础信息&lt;/div&gt;</span><br><span class="line">        &lt;el-form-item label="岗位"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.post" placeholder="请输入" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;!-- &lt;el-form-item label="转正日期"&gt;</span><br><span class="line">          &lt;el-date-picker</span><br><span class="line">            v-model="formData.dateOfCorrection"</span><br><span class="line">            type="date"</span><br><span class="line">            placeholder="选择日期"</span><br><span class="line">            value-format="yyyy-MM-dd"</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/el-form-item&gt; --&gt;</span><br><span class="line">        &lt;el-form-item label="转正状态"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.stateOfCorrection" placeholder="请选择" disabled&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for="item in EmployeeEnum.stateOfCorrection"</span><br><span class="line">              :key="item.value"</span><br><span class="line">              :value="item.value"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="职级"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.rank" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="转正评价"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.correctionEvaluation" type="textarea" placeholder="1-300位字符" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="汇报对象"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.reportId" filterable placeholder="请选择" class="inputW"&gt;</span><br><span class="line">            &lt;el-option v-for="item in depts" :key="item.id" :label="item.username" :value="item.id" /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="HRBP"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.hrbp" filterable placeholder="请选择" class="inputW"&gt;</span><br><span class="line">            &lt;el-option v-for="item in depts" :key="item.id" :label="item.username" :value="item.id" class="inputW" /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item class="formInfo" label="调整司龄(天)："&gt;</span><br><span class="line">          &lt;el-input v-model="formData.adjustmentAgedays" type="number" placeholder="请输入" class="inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="首次参加工作时间"&gt;</span><br><span class="line">          &lt;el-date-picker</span><br><span class="line">            v-model="formData.workingTimeForTheFirstTime"</span><br><span class="line">            type="date"</span><br><span class="line">            placeholder="选择日期"</span><br><span class="line">            value-format="yyyy-MM-dd"</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="调整工龄"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.adjustmentOfLengthOfService" placeholder="0.00年" class="inputW" disabled /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 合同信息 --&gt;</span><br><span class="line">      &lt;div class="block"&gt;</span><br><span class="line">        &lt;div class="title"&gt;合同信息&lt;/div&gt;</span><br><span class="line">        &lt;el-form-item class="formInfo" label="首次合同开始时间："&gt;</span><br><span class="line">          &lt;el-date-picker</span><br><span class="line">            v-model="formData.initialContractStartTime"</span><br><span class="line">            type="date"</span><br><span class="line">            placeholder="选择日期"</span><br><span class="line">            value-format="yyyy-MM-dd"</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="首次合同结束时间"&gt;</span><br><span class="line">          &lt;el-date-picker</span><br><span class="line">            v-model="formData.firstContractTerminationTime"</span><br><span class="line">            type="date"</span><br><span class="line">            placeholder="选择日期"</span><br><span class="line">            value-format="yyyy-MM-dd"</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="现合同开始时间"&gt;</span><br><span class="line">          &lt;el-date-picker</span><br><span class="line">            v-model="formData.currentContractStartTime"</span><br><span class="line">            type="date"</span><br><span class="line">            placeholder="选择日期"</span><br><span class="line">            value-format="yyyy-MM-dd"</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="现合同结束时间"&gt;</span><br><span class="line">          &lt;el-date-picker</span><br><span class="line">            v-model="formData.closingTimeOfCurrentContract  "</span><br><span class="line">            type="date"</span><br><span class="line">            placeholder="选择日期"</span><br><span class="line">            value-format="yyyy-MM-dd"</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="合同期限"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.contractPeriod" class="filter-item"&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for="item in EmployeeEnum.contractPeriod"</span><br><span class="line">              :key="item.value"</span><br><span class="line">              :label="item.label"</span><br><span class="line">              :value="item.value"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="续签次数"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.renewalNumber" class="filter-item"&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for="item in EmployeeEnum.renewalCount"</span><br><span class="line">              :key="item.id"</span><br><span class="line">              :label="item.value"</span><br><span class="line">              :value="item.id"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 招聘信息 --&gt;</span><br><span class="line">      &lt;div class="block"&gt;</span><br><span class="line">        &lt;div class="title"&gt;招聘信息&lt;/div&gt;</span><br><span class="line">        &lt;el-form-item label="其他招聘渠道"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.otherRecruitmentChannels" placeholder="请选择"&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for="item in EmployeeEnum.resumeSource"</span><br><span class="line">              :key="item.id"</span><br><span class="line">              :label="item.value"</span><br><span class="line">              :value="item.value"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="招聘渠道"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.recruitmentChannels" placeholder="请选择"&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for="item in EmployeeEnum.resumeSource"</span><br><span class="line">              :key="item.value"</span><br><span class="line">              :label="item.label"</span><br><span class="line">              :value="item.value"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="社招/校招"&gt;</span><br><span class="line">          &lt;el-select v-model="formData.socialRecruitment" placeholder="请选择"&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for="item in EmployeeEnum.hireSourceType"</span><br><span class="line">              :key="item.value"</span><br><span class="line">              :label="item.label"</span><br><span class="line">              :value="item.value"</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="推荐企业/人"&gt;</span><br><span class="line">          &lt;el-input v-model="formData.recommenderBusinessPeople" placeholder="请输入" class="infoPosition inputW" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 从业信息 --&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type="primary" @click="saveJob"&gt;保存更新&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button @click="$router.back()"&gt;返回&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>定义岗位数据</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> EmployeeEnum <span class="keyword">from</span> <span class="string">'@/api/constant/employees'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">userId</span>: <span class="built_in">this</span>.$route.params.id,</span><br><span class="line">      <span class="attr">depts</span>: [],</span><br><span class="line">      EmployeeEnum,</span><br><span class="line">      <span class="attr">formData</span>: {</span><br><span class="line">        <span class="attr">adjustmentAgedays</span>: <span class="string">''</span>, <span class="comment">// 调整司龄天</span></span><br><span class="line">        <span class="attr">adjustmentOfLengthOfService</span>: <span class="string">''</span>, <span class="comment">// 调整工龄天</span></span><br><span class="line">        <span class="attr">closingTimeOfCurrentContract</span>: <span class="string">''</span>, <span class="comment">// 现合同结束时间</span></span><br><span class="line">        <span class="attr">companyId</span>: <span class="string">''</span>, <span class="comment">// 公司ID</span></span><br><span class="line">        <span class="attr">contractDocuments</span>: <span class="string">''</span>, <span class="comment">// 合同文件</span></span><br><span class="line">        <span class="attr">contractPeriod</span>: <span class="string">''</span>, <span class="comment">// 合同期限</span></span><br><span class="line">        <span class="attr">correctionEvaluation</span>: <span class="string">''</span>, <span class="comment">//  转正评价</span></span><br><span class="line">        <span class="attr">currentContractStartTime</span>: <span class="string">''</span>, <span class="comment">// 现合同开始时间</span></span><br><span class="line">        <span class="attr">firstContractTerminationTime</span>: <span class="string">''</span>, <span class="comment">// 首次合同结束时间</span></span><br><span class="line">        <span class="attr">hrbp</span>: <span class="string">''</span>, <span class="comment">// HRBP</span></span><br><span class="line">        <span class="attr">initialContractStartTime</span>: <span class="string">''</span>, <span class="comment">// 首次合同开始时间</span></span><br><span class="line">        <span class="attr">otherRecruitmentChannels</span>: <span class="string">''</span>, <span class="comment">// 其他招聘渠道</span></span><br><span class="line">        <span class="attr">post</span>: <span class="string">''</span>, <span class="comment">// 岗位</span></span><br><span class="line">        <span class="attr">rank</span>: <span class="literal">null</span>, <span class="comment">// 职级</span></span><br><span class="line">        <span class="attr">recommenderBusinessPeople</span>: <span class="string">''</span>, <span class="comment">// 推荐企业人</span></span><br><span class="line">        <span class="attr">recruitmentChannels</span>: <span class="string">''</span>, <span class="comment">// 招聘渠道</span></span><br><span class="line">        <span class="attr">renewalNumber</span>: <span class="string">''</span>, <span class="comment">// 续签次数</span></span><br><span class="line">        <span class="attr">reportId</span>: <span class="string">''</span>, <span class="comment">// 汇报对象</span></span><br><span class="line">        <span class="attr">reportName</span>: <span class="literal">null</span>, <span class="comment">// 汇报对象</span></span><br><span class="line">        <span class="attr">socialRecruitment</span>: <span class="string">''</span>, <span class="comment">// 社招校招</span></span><br><span class="line">        <span class="attr">stateOfCorrection</span>: <span class="string">''</span>, <span class="comment">// 转正状态</span></span><br><span class="line">        <span class="attr">taxableCity</span>: <span class="string">''</span>, <span class="comment">// 纳税城市</span></span><br><span class="line">        <span class="attr">userId</span>: <span class="string">''</span>, <span class="comment">// 员工ID</span></span><br><span class="line">        <span class="attr">workMailbox</span>: <span class="string">''</span>, <span class="comment">// 工作邮箱</span></span><br><span class="line">        <span class="attr">workingCity</span>: <span class="string">''</span>, <span class="comment">// 工作城市</span></span><br><span class="line">        <span class="attr">workingTimeForTheFirstTime</span>: <span class="string">''</span> <span class="comment">// 首次参加工作时间</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>在detail.vue组件中，注册并使用</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-tab-pane label="岗位详情"&gt;</span><br><span class="line">           &lt;!-- 放置岗位详情 --&gt;</span><br><span class="line">           &lt;component :is="JobInfo" /&gt;</span><br><span class="line"> &lt;/el-tab-pane&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>**<code>本节任务</code>**：完成个人组件和岗位组件封装</p>
<h2 id="员工个人信息和岗位信息-读取-保存"><a href="#员工个人信息和岗位信息-读取-保存" class="headerlink" title="员工个人信息和岗位信息-读取-保存"></a>员工个人信息和岗位信息-读取-保存</h2><p>**<code>目标</code>**：实现个人信息的岗位信息的读取和校验，保存</p>
<h3 id="读取个人保存个人信息"><a href="#读取个人保存个人信息" class="headerlink" title="读取个人保存个人信息"></a>读取个人保存个人信息</h3><blockquote>
<p>这个环节里面大部分都是繁杂的属性和重复的过程，所以该环节直接将过程代码拷贝到项目中即可</p>
</blockquote>
<p>封装 <strong>读取个人信息</strong> <strong>保存个人信息</strong>  <strong>读取岗位信息</strong> <strong>保存岗位信息</strong>  </p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> *  读取用户详情的基础信息</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getPersonalDetail</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/employees/<span class="subst">${id}</span>/personalInfo`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> *  更新用户详情的基础信息</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updatePersonal</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/employees/<span class="subst">${data.userId}</span>/personalInfo`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'put'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** **</span></span><br><span class="line"><span class="comment"> * 获取用户的岗位信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ****/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getJobDetail</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/employees/<span class="subst">${id}</span>/jobs`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存岗位信息</span></span><br><span class="line"><span class="comment"> * ****/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateJob</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/employees/<span class="subst">${data.userId}</span>/jobs`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'put'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>读取，保存个人信息</strong>  <strong><code>user-info</code></strong>  需要注意：这里的保存实际上分成了两个接口，这是接口的设计，我们只能遵守</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { getPersonalDetail, updatePersonal, saveUserDetailById } <span class="keyword">from</span> <span class="string">'@/api/employees'</span></span><br><span class="line"><span class="keyword">import</span> { getUserDetailById } <span class="keyword">from</span> <span class="string">'@/api/user'</span></span><br><span class="line"> <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.getPersonalDetail()</span><br><span class="line">    <span class="built_in">this</span>.getUserDetailById()</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getPersonalDetail</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.formData = <span class="keyword">await</span> getPersonalDetail(<span class="built_in">this</span>.userId) <span class="comment">// 获取员工数据</span></span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">savePersonal</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="keyword">await</span> updatePersonal({ ...this.formData, <span class="attr">id</span>: <span class="built_in">this</span>.userId })</span><br><span class="line">      <span class="built_in">this</span>.$message.success(<span class="string">'保存成功'</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">saveUser</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="comment">//  调用父组件</span></span><br><span class="line">      <span class="keyword">await</span> saveUserDetailById(<span class="built_in">this</span>.userInfo)</span><br><span class="line">      <span class="built_in">this</span>.$message.success(<span class="string">'保存成功'</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getUserDetailById</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.userInfo = <span class="keyword">await</span> getUserDetailById(<span class="built_in">this</span>.userId)</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="读取保存岗位信息"><a href="#读取保存岗位信息" class="headerlink" title="读取保存岗位信息"></a>读取保存岗位信息</h3><p><strong>读取，保存岗位信息</strong>  <strong><code>job-info</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { getEmployeeSimple, updateJob, getJobDetail } <span class="keyword">from</span> <span class="string">'@/api/employees'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> {</span><br><span class="line">  <span class="built_in">this</span>.getJobDetail()</span><br><span class="line">  <span class="built_in">this</span>.getEmployeeSimple()</span><br><span class="line">},</span><br><span class="line"><span class="attr">methods</span>: {</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">getJobDetail</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.formData = <span class="keyword">await</span> getJobDetail(<span class="built_in">this</span>.userId)</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 获取员工列表</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">getEmployeeSimple</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.depts = <span class="keyword">await</span> getEmployeeSimple()</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 保存岗位信息</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">saveJob</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">await</span> updateJob(<span class="built_in">this</span>.formData)</span><br><span class="line">    <span class="built_in">this</span>.$message.success(<span class="string">'保存岗位信息成功'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p><strong><code>本节任务</code></strong> 实现个人信息的岗位信息的读取和校验，保存</p>
<h2 id="配置腾讯云Cos"><a href="#配置腾讯云Cos" class="headerlink" title="配置腾讯云Cos"></a>配置腾讯云Cos</h2><p>**<code>目标</code>**： 配置一个腾讯云cos</p>
<blockquote>
<p>由于上课的开发的特殊性，我们不希望把所有的图片都上传到我们自己的官方服务器上，这里我们可以采用一个腾讯云的图片方案</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200805200831035.png" alt="image-20200805200831035"></p>
<blockquote>
<p>上边图的意思就是说，我们找一个可以免费上传图片的服务器，帮我们**<code>代管图片</code><strong>，我们在自己的数据库里只保存一个地址就行， 这其实也是很多项目的处理方案，会有一个</strong><code>公共的文件服务器</code>**</p>
</blockquote>
<p>第一步，我们必须先拥有一个<a href="https://cloud.tencent.com/login?s_url=https://console.cloud.tencent.com/">腾迅云</a>的开发者账号(<strong>小心腾讯云的广告电话</strong>)</p>
<blockquote>
<p>请按照腾讯云的注册方式，注册自己的账号</p>
</blockquote>
<p>第二步，实名认证</p>
<blockquote>
<p>选择个人账户</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200805201013078.png" alt="image-20200805201013078"></p>
<p><strong>填写个人身份信息</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200805201230001.png" alt="image-20200805201230001"></p>
<p>下一步，扫描二维码授权</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200805201318977.png" alt="image-20200805201318977"></p>
<p><strong>手机端授权</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200805201422567.png" alt="image-20200805201422567"></p>
<p>点击<strong>领取免费产品</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200805201513338.png" alt="image-20200805201513338"></p>
<p><strong>选择对象存储COS</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200805201559233.png" alt="image-20200805201559233"></p>
<blockquote>
<p>我们免费拥有**<code>6个月的50G流量</code>**的对象存储空间使用权限，足够我们上传用户头像的使用了</p>
</blockquote>
<p><strong>点击0元试用，开通服务</strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200805201750662.png" alt="image-20200805201750662"></p>
<p>到这一步，账号的部分就操作完毕，接下来，我们需要来创建一个存储图片的存储桶</p>
<p>登录 <a href="https://console.cloud.tencent.com/cos5">对象存储控制台</a> ，<a href="https://cloud.tencent.com/document/product/436/13309">创建存储桶</a>。设置存储桶的权限为 <strong><code>公有读，私有写</code></strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200806135409338.png" alt="image-20200806135409338"></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200916231600661.png" alt="image-20200916231600661"></p>
<p>设置cors规则</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200916231949174.png" alt="image-20200916231949174"></p>
<p>AllowHeader 需配成<code>*</code>，如下图所示。</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200805211749522.png" alt="image-20200805211749522"></p>
<blockquote>
<p>因为我们本身没有域名，所以这里设置成**<code>*</code>**，仅限于测试，正式环境的话，这里需要配置真实的域名地址</p>
</blockquote>
<p>到这里，我们的腾讯云存储桶就设置好了。</p>
<h2 id="封装上传图片组件-上传组件需求分析"><a href="#封装上传图片组件-上传组件需求分析" class="headerlink" title="封装上传图片组件-上传组件需求分析"></a>封装上传图片组件-上传组件需求分析</h2><p><strong><code>目标</code></strong> 梳理整个的上传过程</p>
<p><strong>初始化cos对象参数</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SecretId</td>
<td align="left">开发者拥有的项目身份识别 ID，用以身份认证，可在 <a href="https://console.cloud.tencent.com/capi">API 密钥管理</a> 页面获取</td>
</tr>
<tr>
<td align="left">SecretKey</td>
<td align="left">开发者拥有的项目身份密钥，可在 <a href="https://console.cloud.tencent.com/capi">API 密钥管理</a> 页面获取</td>
</tr>
</tbody></table>
<blockquote>
<p>注意，上述的参数我们在本次开发过程中，直接将参数放置在前端代码中存储，但是腾讯云本身是不建议这么做的，因为**<code>敏感信息</code>**放在前端很容易被捕获，由于我们本次是测试研发，所以这个过程可以忽略</p>
<p>正确的做法应该是，通过网站调用接口换取敏感信息</p>
</blockquote>
<p><a href="https://cloud.tencent.com/document/product/436/11459">相关文档</a></p>
<p>实例化 上传sdk</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cos = <span class="keyword">new</span> COS({</span><br><span class="line">    <span class="attr">SecretId</span>: <span class="string">'COS_SECRETID'</span>, <span class="comment">// 身份识别 ID</span></span><br><span class="line">    <span class="attr">SecretKey</span>: <span class="string">'COS_SECRETKEY'</span>, <span class="comment">// 身份密钥</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>到目前为止，我们上传图片准备的内容就已经OK，接下来，我们在**<code>src/componets</code>** 新建一个**<code>ImageUpload</code>** 组件</p>
</blockquote>
<p>该组件需要满足什么要求呢？</p>
<ol>
<li>可以显示传入的图片地址</li>
<li>可以删除传入的图片地址</li>
<li>可以上传图片到云服务器</li>
<li>上传到腾讯云之后，可以返回图片地址，显示  </li>
<li>上传成功之后，可以回调成功函数</li>
</ol>
<p>这个上传组件简单吗？</p>
<p><strong><code>no ! ! !</code></strong></p>
<p>看似需求很明确，但是它真正的实现很复杂，我们通过一个图来看一下</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200806174643390.png" alt="image-20200806174643390"></p>
<p>从上图中，我们可以看到，实际上是有两种场景的，本地场景和已经上传的场景</p>
<p>下个章节，针对这个场景我们进行开发</p>
<h2 id="封装上传组件-代码实现"><a href="#封装上传组件-代码实现" class="headerlink" title="封装上传组件-代码实现"></a>封装上传组件-代码实现</h2><p>**<code>目标</code>**实现上传组件的代码部分</p>
<blockquote>
<p>JavaScript SDK 需浏览器支持基本的 HTML5 特性（支持 IE10 以上浏览器），以便支持 ajax 上传文件和计算文件 MD5 值。</p>
</blockquote>
<h3 id="新建文件上传组件"><a href="#新建文件上传组件" class="headerlink" title="新建文件上传组件"></a>新建文件上传组件</h3><p><strong>安装JavaScript SDK</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i cos-js-sdk-v5 --save</span><br></pre></td></tr></tbody></table></figure>

<p><strong>新建上传图片组件</strong> <strong><code>src/components/ImageUpload/index.vue</code></strong></p>
<blockquote>
<p>上传组件，我们可以沿用element的el-upload组件,并且采用照片墙的模式 <strong><code>list-type="picture-card"</code></strong></p>
</blockquote>
<p><strong>放置el-upload组件</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-upload list-type="picture-card"&gt;</span><br><span class="line">     &lt;i class="el-icon-plus" /&gt;</span><br><span class="line">  &lt;/el-upload&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>全局注册组件</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PageTools <span class="keyword">from</span> <span class="string">'./PageTools'</span></span><br><span class="line"><span class="keyword">import</span> UploadExcel <span class="keyword">from</span> <span class="string">'./UploadExcel'</span></span><br><span class="line"><span class="keyword">import</span> ImageUpload <span class="keyword">from</span> <span class="string">'./ImageUpload'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">Vue</span>)</span> {</span><br><span class="line">    Vue.component(<span class="string">'PageTools'</span>, PageTools) <span class="comment">// 注册工具栏组件</span></span><br><span class="line">    Vue.component(<span class="string">'UploadExcel'</span>, UploadExcel) <span class="comment">// 注册导入excel组件</span></span><br><span class="line">    Vue.component(<span class="string">'ImageUpload'</span>, ImageUpload) <span class="comment">// 注册导入上传组件</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="点击图片进行预览"><a href="#点击图片进行预览" class="headerlink" title="点击图片进行预览"></a>点击图片进行预览</h3><p><strong>限定上传的图片数量和action</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-upload list-type="picture-card" :limit="1" action="#"&gt;</span><br><span class="line">  &lt;/el-upload&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>action为什么给#， 因为前面我们讲过了，我们要上传到腾讯云，需要自定义的上传方式,action给个#防止报错</p>
</blockquote>
<p><strong>预览</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">fileList</span>: [], <span class="comment">// 图片地址设置为数组 </span></span><br><span class="line">      <span class="attr">showDialog</span>: <span class="literal">false</span>, <span class="comment">// 控制显示弹层</span></span><br><span class="line">      <span class="attr">imgUrl</span>: <span class="string">''</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="function"><span class="title">preview</span>(<span class="params">file</span>)</span> {</span><br><span class="line">    <span class="comment">// 这里应该弹出一个层 层里是点击的图片地址</span></span><br><span class="line">    <span class="built_in">this</span>.imgUrl = file.url</span><br><span class="line">    <span class="built_in">this</span>.showDialog = <span class="literal">true</span></span><br><span class="line">},  </span><br></pre></td></tr></tbody></table></figure>

<p><strong>预览弹层</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-dialog title="图片" :visible.sync="showDialog"&gt;</span><br><span class="line">    &lt;img :src="imgUrl" style="width:100%" alt=""&gt;</span><br><span class="line"> &lt;/el-dialog&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="根据上传数量控制上传按钮"><a href="#根据上传数量控制上传按钮" class="headerlink" title="根据上传数量控制上传按钮"></a>根据上传数量控制上传按钮</h3><p><strong>控制上传显示</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">computed: {</span><br><span class="line">   <span class="comment">// 设定一个计算属性 判断是否已经上传完了一张</span></span><br><span class="line">   <span class="function"><span class="title">fileComputed</span>(<span class="params"></span>)</span> {</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.fileList.length === <span class="number">1</span></span><br><span class="line">   }</span><br><span class="line"> },</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"> &lt;el-upload</span><br><span class="line">      :on-preview=<span class="string">"preview"</span></span><br><span class="line">      :on-remove=<span class="string">"handleRemove"</span></span><br><span class="line">      :on-change=<span class="string">"changeFile"</span></span><br><span class="line">      :file-list=<span class="string">"fileList"</span></span><br><span class="line">      list-type=<span class="string">"picture-card"</span></span><br><span class="line">      action=<span class="string">"#"</span></span><br><span class="line">      :limit=<span class="string">"1"</span></span><br><span class="line">      :class=<span class="string">"{disabled: fileComputed }"</span></span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.disabled .el-upload--picture-card {</span><br><span class="line">  display: none</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="删除图片和添加图片"><a href="#删除图片和添加图片" class="headerlink" title="删除图片和添加图片"></a>删除图片和添加图片</h3><p><strong>删除文件</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">handleRemove</span>(<span class="params">file</span>)</span> {</span><br><span class="line">   <span class="comment">// file是点击删除的文件</span></span><br><span class="line"> <span class="comment">//   将原来的文件给排除掉了 剩下的就是最新的数组了</span></span><br><span class="line">   <span class="built_in">this</span>.fileList = <span class="built_in">this</span>.fileList.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.uid !== file.uid)</span><br><span class="line"> },</span><br></pre></td></tr></tbody></table></figure>

<p><strong>添加文件</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 修改文件时触发</span></span><br><span class="line"><span class="comment">// 此时可以用fileList 因为该方法会进来很多遍 不能每次都去push</span></span><br><span class="line"><span class="comment">// fileList因为fileList参数是当前传进来的最新参数 我们只需要将其转化成数组即可 需要转化成一个新的数组</span></span><br><span class="line"><span class="comment">// [] =&gt; [...fileList] [] =&gt; fileList.map()</span></span><br><span class="line"><span class="comment">// 上传成功之后 还会进来 需要实现上传代码的逻辑 这里才会成功</span></span><br><span class="line"><span class="function"><span class="title">changeFile</span>(<span class="params">file, fileList</span>)</span> {</span><br><span class="line">  <span class="built_in">this</span>.fileList = fileList.map(<span class="function"><span class="params">item</span> =&gt;</span> item)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="上传之前检查"><a href="#上传之前检查" class="headerlink" title="上传之前检查"></a>上传之前检查</h3><blockquote>
<p>控制上传图片的类型和上传大小， 如果不满足条件 返回false上传就会停止</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeUpload</span>(<span class="params">file</span>)</span> {</span><br><span class="line">  <span class="comment">// 要开始做文件上传的检查了</span></span><br><span class="line">  <span class="comment">// 文件类型 文件大小</span></span><br><span class="line">  <span class="keyword">const</span> types = [<span class="string">'image/jpeg'</span>, <span class="string">'image/gif'</span>, <span class="string">'image/bmp'</span>, <span class="string">'image/png'</span>]</span><br><span class="line">  <span class="keyword">if</span> (!types.includes(file.type)) {</span><br><span class="line">    <span class="built_in">this</span>.$message.error(<span class="string">'上传图片只能是 JPG、GIF、BMP、PNG 格式!'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  }</span><br><span class="line">  <span class="comment">//  检查大小</span></span><br><span class="line">  <span class="keyword">const</span> maxSize = <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">  <span class="keyword">if</span> (maxSize &lt; file.size) {</span><br><span class="line">    <span class="built_in">this</span>.$message.error(<span class="string">'图片大小最大不能超过5M'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="上传动作调用上传腾讯云"><a href="#上传动作调用上传腾讯云" class="headerlink" title="上传动作调用上传腾讯云"></a>上传动作调用上传腾讯云</h3><p><strong>上传动作为el-upload的http-request属性</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">:http-request=<span class="string">"upload"</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 自定义上传动作 有个参数 有个file对象，是我们需要上传到腾讯云服务器的内容</span></span><br><span class="line">   <span class="function"><span class="title">upload</span>(<span class="params">params</span>)</span> {</span><br><span class="line">     <span class="built_in">console</span>.log(params.file)</span><br><span class="line">   }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>我们需要在该方法中，调用腾讯云的上传方法</p>
</blockquote>
<p><a href="https://cloud.tencent.com/document/product/436/35649#.E7.AE.80.E5.8D.95.E4.B8.8A.E4.BC.A0.E5.AF.B9.E8.B1.A1">腾讯云文档地址</a></p>
<p>身份ID和密钥可以通过腾讯云平台获取</p>
<p>登录 <a href="https://console.cloud.tencent.com/capi">访问管理控制台</a> ，获取您的项目 SecretId 和 SecretKey。</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200805211539544.png" alt="image-20200805211539544"></p>
<p>实现代码</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 进行上传操作</span></span><br><span class="line"><span class="function"><span class="title">upload</span>(<span class="params">params</span>)</span> {</span><br><span class="line"><span class="comment">//   console.log(params.file)</span></span><br><span class="line">  <span class="keyword">if</span> (params.file) {</span><br><span class="line">    <span class="comment">// 执行上传操作</span></span><br><span class="line">    cos.putObject({</span><br><span class="line">      <span class="attr">Bucket</span>: <span class="string">'shuiruohanyu-106-1302806742'</span>, <span class="comment">// 存储桶</span></span><br><span class="line">      <span class="attr">Region</span>: <span class="string">'ap-beijing'</span>, <span class="comment">// 地域</span></span><br><span class="line">      <span class="attr">Key</span>: params.file.name, <span class="comment">// 文件名</span></span><br><span class="line">      <span class="attr">Body</span>: params.file, <span class="comment">// 要上传的文件对象</span></span><br><span class="line">      <span class="attr">StorageClass</span>: <span class="string">'STANDARD'</span> <span class="comment">// 上传的模式类型 直接默认 标准模式即可</span></span><br><span class="line">      <span class="comment">// 上传到腾讯云 =》 哪个存储桶 哪个地域的存储桶 文件  格式  名称 回调</span></span><br><span class="line">    }, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>{</span><br><span class="line">      <span class="comment">// data返回数据之后 应该如何处理</span></span><br><span class="line">      <span class="built_in">console</span>.log(err || data)</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="上传成功之后处理返回数据"><a href="#上传成功之后处理返回数据" class="headerlink" title="上传成功之后处理返回数据"></a>上传成功之后处理返回数据</h3><blockquote>
<p>如何处理返回成功的返回数据</p>
</blockquote>
<p>确定要上传记录id</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeUpload</span>(<span class="params">file</span>)</span> {</span><br><span class="line">    <span class="comment">//   先检查文件类型</span></span><br><span class="line">    <span class="keyword">const</span> types = [<span class="string">'image/jpeg'</span>, <span class="string">'image/gif'</span>, <span class="string">'image/bmp'</span>, <span class="string">'image/png'</span>]</span><br><span class="line">    <span class="keyword">if</span> (!types.some(<span class="function"><span class="params">item</span> =&gt;</span> item === file.type)) {</span><br><span class="line">      <span class="comment">//   如果不存在</span></span><br><span class="line">      <span class="built_in">this</span>.$message.error(<span class="string">'上传图片只能是 JPG、GIF、BMP、PNG 格式!'</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 上传终止</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 检查文件大小  5M 1M = 1024KB 1KB = 1024B</span></span><br><span class="line">    <span class="keyword">const</span> maxSize = <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">    <span class="keyword">if</span> (file.size &gt; maxSize) {</span><br><span class="line">      <span class="comment">//   超过了限制的文件大小</span></span><br><span class="line">      <span class="built_in">this</span>.$message.error(<span class="string">'上传的图片大小不能大于5M'</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//   已经确定当前上传的就是当前的这个file了</span></span><br><span class="line">    <span class="built_in">this</span>.currentFileUid = file.uid</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 最后一定要return  true</span></span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>处理返回数据</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 进行上传操作</span></span><br><span class="line"><span class="function"><span class="title">upload</span>(<span class="params">params</span>)</span> {</span><br><span class="line"><span class="comment">//   console.log(params.file)</span></span><br><span class="line">  <span class="keyword">if</span> (params.file) {</span><br><span class="line">    <span class="comment">// 执行上传操作</span></span><br><span class="line">    cos.putObject({</span><br><span class="line">      <span class="attr">Bucket</span>: <span class="string">'shuiruohanyu-106-1302806742'</span>, <span class="comment">// 存储桶</span></span><br><span class="line">      <span class="attr">Region</span>: <span class="string">'ap-beijing'</span>, <span class="comment">// 地域</span></span><br><span class="line">      <span class="attr">Key</span>: params.file.name, <span class="comment">// 文件名</span></span><br><span class="line">      <span class="attr">Body</span>: params.file, <span class="comment">// 要上传的文件对象</span></span><br><span class="line">      <span class="attr">StorageClass</span>: <span class="string">'STANDARD'</span> <span class="comment">// 上传的模式类型 直接默认 标准模式即可</span></span><br><span class="line">      <span class="comment">// 上传到腾讯云 =》 哪个存储桶 哪个地域的存储桶 文件  格式  名称 回调</span></span><br><span class="line">    }, <span class="function">(<span class="params">err, data</span>) =&gt;</span> {</span><br><span class="line">      <span class="comment">// data返回数据之后 应该如何处理</span></span><br><span class="line">      <span class="built_in">console</span>.log(err || data)</span><br><span class="line">      <span class="comment">// data中有一个statusCode === 200 的时候说明上传成功</span></span><br><span class="line">      <span class="keyword">if</span> (!err &amp;&amp; data.statusCode === <span class="number">200</span>) {</span><br><span class="line">        <span class="comment">//   此时说明文件上传成功  要获取成功的返回地址</span></span><br><span class="line">        <span class="comment">// fileList才能显示到上传组件上 此时我们要将fileList中的数据的url地址变成 现在上传成功的地址</span></span><br><span class="line">        <span class="comment">// 目前虽然是一张图片 但是请注意 我们的fileList是一个数组</span></span><br><span class="line">        <span class="comment">// 需要知道当前上传成功的是哪一张图片</span></span><br><span class="line">        <span class="built_in">this</span>.fileList = <span class="built_in">this</span>.fileList.map(<span class="function"><span class="params">item</span> =&gt;</span> {</span><br><span class="line">          <span class="comment">// 去找谁的uid等于刚刚记录下来的id</span></span><br><span class="line">          <span class="keyword">if</span> (item.uid === <span class="built_in">this</span>.currentFileUid) {</span><br><span class="line">            <span class="comment">// 将成功的地址赋值给原来的url属性</span></span><br><span class="line">            <span class="keyword">return</span> { <span class="attr">url</span>: <span class="string">'http://'</span> + data.Location, <span class="attr">upload</span>: <span class="literal">true</span> }</span><br><span class="line">            <span class="comment">// upload 为true 表示这张图片已经上传完毕 这个属性要为我们后期应用的时候做标记</span></span><br><span class="line">            <span class="comment">// 保存  =&gt; 图片有大有小 =&gt; 上传速度有快又慢 =&gt;要根据有没有upload这个标记来决定是否去保存</span></span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">return</span> item</span><br><span class="line">        })</span><br><span class="line">        <span class="comment">// 将上传成功的地址 回写到了fileList中 fileList变化  =》 upload组件 就会根据fileList的变化而去渲染视图</span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>我们在fileList中设置了属性为upload为true的属性，表示该图片已经上传成功了，如果fileList还有upload不为true的数据，那就表示该图片还没有上传完毕</p>
</blockquote>
<h3 id="上传的进度条显示"><a href="#上传的进度条显示" class="headerlink" title="上传的进度条显示"></a>上传的进度条显示</h3><blockquote>
<p>为了再上传图片过程中显示进度条，我们可以使用element-ui的进度条显示当前的上传进度</p>
</blockquote>
<p><strong>放置进度条</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-progress v-if="showPercent" style="width: 180px" :percentage="percent" /&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>通过腾讯云sdk监听上传进度</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">cos.putObject({</span><br><span class="line">         <span class="comment">// 配置</span></span><br><span class="line">         <span class="attr">Bucket</span>: <span class="string">'laogao-1302806742'</span>, <span class="comment">// 存储桶名称</span></span><br><span class="line">         <span class="attr">Region</span>: <span class="string">'ap-guangzhou'</span>, <span class="comment">// 存储桶地域</span></span><br><span class="line">         <span class="attr">Key</span>: params.file.name, <span class="comment">// 文件名作为key</span></span><br><span class="line">         <span class="attr">StorageClass</span>: <span class="string">'STANDARD'</span>, <span class="comment">// 此类写死</span></span><br><span class="line">         <span class="attr">Body</span>: params.file, <span class="comment">// 将本地的文件赋值给腾讯云配置</span></span><br><span class="line">         <span class="comment">// 进度条</span></span><br><span class="line">         <span class="attr">onProgress</span>: <span class="function">(<span class="params">params</span>) =&gt;</span> {</span><br><span class="line">           <span class="built_in">this</span>.percent = params.percent * <span class="number">100</span></span><br><span class="line">         }</span><br><span class="line">       }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>完整代码</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 放置一个上传组件 --&gt;</span><br><span class="line">    &lt;!-- action这里不写上传地址 因为我们是调用腾讯云cos 不是一个地址可以搞定的 要用自定义的上传 --&gt;</span><br><span class="line">    &lt;el-upload</span><br><span class="line">      :on-preview="preview"</span><br><span class="line">      :on-remove="handleRemove"</span><br><span class="line">      :on-change="changeFile"</span><br><span class="line">      :before-upload="beforeUpload"</span><br><span class="line">      :file-list="fileList"</span><br><span class="line">      :http-request="upload"</span><br><span class="line">      list-type="picture-card"</span><br><span class="line">      action="#"</span><br><span class="line">      :limit="1"</span><br><span class="line">      :class="{disabled: fileComputed }"</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;i class="el-icon-plus" /&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">    &lt;!-- 进度条 --&gt;</span><br><span class="line">    &lt;el-progress v-if="showPercent" style="width: 180px" :percentage="percent" /&gt;</span><br><span class="line">    &lt;!-- 放置一个弹层 --&gt;</span><br><span class="line">    &lt;!-- sync修饰符自动将弹层关闭了 --&gt;</span><br><span class="line">    &lt;el-dialog title="图片" :visible.sync="showDialog"&gt;</span><br><span class="line">      &lt;img :src="imgUrl" style="width:100%" alt=""&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import COS from 'cos-js-sdk-v5' // 引入腾讯云的包</span><br><span class="line">// 需要实例化</span><br><span class="line">const cos = new COS({</span><br><span class="line">  SecretId: 'AKID0mqfEWqlUzIbeSkGRL6c7ML6c0B93To9',</span><br><span class="line">  SecretKey: 'JFwNZdeRF2iOp03FFsGNDm44vWFitmNF'</span><br><span class="line">}) // 实例化的包 已经具有了上传的能力 可以上传到该账号里面的存储桶了</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      fileList: [],</span><br><span class="line">      showDialog: false, // 控制图片的显示或者隐藏</span><br><span class="line">      imgUrl: '', // 存储点击的图片地址</span><br><span class="line">      currentFileUid: '', // 用一个变量 记住当前上传的图片id</span><br><span class="line">      percent: 0,</span><br><span class="line">      showPercent: false // 默认不显示进度条</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    // 设定一个计算属性 判断是否已经上传完了一张</span><br><span class="line">    fileComputed() {</span><br><span class="line">      return this.fileList.length === 1</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    preview(file) {</span><br><span class="line">      // 这里应该弹出一个层 层里是点击的图片地址</span><br><span class="line">      this.imgUrl = file.url</span><br><span class="line">      this.showDialog = true</span><br><span class="line">    },</span><br><span class="line">    handleRemove(file) {</span><br><span class="line">      // file是点击删除的文件</span><br><span class="line">    //   将原来的文件给排除掉了 剩下的就是最新的数组了</span><br><span class="line">      this.fileList = this.fileList.filter(item =&gt; item.uid !== file.uid)</span><br><span class="line">    },</span><br><span class="line">    // 修改文件时触发</span><br><span class="line">    // 此时可以用fileList 因为该方法会进来很多遍 不能每次都去push</span><br><span class="line">    // fileList因为fileList参数是当前传进来的最新参数 我们只需要将其转化成数组即可 需要转化成一个新的数组</span><br><span class="line">    // [] =&gt; [...fileList] [] =&gt; fileList.map()</span><br><span class="line">    // 上传成功之后 还会进来 需要实现上传代码的逻辑 这里才会成功</span><br><span class="line">    changeFile(file, fileList) {</span><br><span class="line">      this.fileList = fileList.map(item =&gt; item)</span><br><span class="line">    },</span><br><span class="line">    beforeUpload(file) {</span><br><span class="line">      // 要开始做文件上传的检查了</span><br><span class="line">      // 文件类型 文件大小</span><br><span class="line">      const types = ['image/jpeg', 'image/gif', 'image/bmp', 'image/png']</span><br><span class="line">      if (!types.includes(file.type)) {</span><br><span class="line">        this.$message.error('上传图片只能是 JPG、GIF、BMP、PNG 格式!')</span><br><span class="line">        return false</span><br><span class="line">      }</span><br><span class="line">      //  检查大小</span><br><span class="line">      const maxSize = 5 * 1024 * 1024</span><br><span class="line">      if (maxSize &lt; file.size) {</span><br><span class="line">        this.$message.error('图片大小最大不能超过5M')</span><br><span class="line">        return false</span><br><span class="line">      }</span><br><span class="line">      // file.uid</span><br><span class="line">      this.currentFileUid = file.uid // 记住当前的uid</span><br><span class="line">      this.showPercent = true</span><br><span class="line">      return true</span><br><span class="line">    },</span><br><span class="line">    // 自定义上传动作 有个参数 有个file对象，是我们需要上传到腾讯云服务器的内容</span><br><span class="line">    upload(params) {</span><br><span class="line">      if (params.file) {</span><br><span class="line">        //  上传文件到腾讯云</span><br><span class="line">        cos.putObject({</span><br><span class="line">          // 配置</span><br><span class="line">          Bucket: 'laogao-1302806742', // 存储桶名称</span><br><span class="line">          Region: 'ap-guangzhou', // 存储桶地域</span><br><span class="line">          Key: params.file.name, // 文件名作为key</span><br><span class="line">          StorageClass: 'STANDARD', // 此类写死</span><br><span class="line">          Body: params.file, // 将本地的文件赋值给腾讯云配置</span><br><span class="line">          // 进度条</span><br><span class="line">          onProgress: (params) =&gt; {</span><br><span class="line">            this.percent = params.percent * 100</span><br><span class="line">          }</span><br><span class="line">        }, (err, data) =&gt; {</span><br><span class="line">          // 需要判断错误与成功</span><br><span class="line">          if (!err &amp;&amp; data.statusCode === 200) {</span><br><span class="line">            // 如果没有失败表示成功了</span><br><span class="line">            // 此时认为上传成功了</span><br><span class="line">            // this.currentFileUid</span><br><span class="line">            // 仍然有个小问题， 比如此时我们正在上传，但是调用了保存，保存在上传过程中进行，</span><br><span class="line">            // 此时上传还没有完成  此时可以这样做 ： 给所有上传成功的图片 加一个属性 upload: true</span><br><span class="line">            this.fileList = this.fileList.map(item =&gt; {</span><br><span class="line">              if (item.uid === this.currentFileUid) {</span><br><span class="line">                //   upload为true表示 该图片已经成功上传到服务器，地址已经是腾讯云的地址了  就不可以执行保存了</span><br><span class="line">                return { url: 'http://' + data.Location, upload: true } // 将本地的地址换成腾讯云地址</span><br><span class="line">              }</span><br><span class="line">              return item</span><br><span class="line">            })</span><br><span class="line">            setTimeout(() =&gt; {</span><br><span class="line">              this.showPercent = false // 隐藏进度条</span><br><span class="line">              this.percent = 0 // 进度归0</span><br><span class="line">            }, 2000)</span><br><span class="line"></span><br><span class="line">            // 将腾讯云地址写入到fileList上 ，保存的时候 就可以从fileList中直接获取图片地址</span><br><span class="line"></span><br><span class="line">            // 此时注意，我们应该记住 当前上传的是哪个图片  上传成功之后，将图片的地址赋值回去</span><br><span class="line">          }</span><br><span class="line">        })</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.disabled .el-upload--picture-card {</span><br><span class="line">  display: none</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>上传动作中，用到了上个小节中，我们注册的腾讯云cos的**<code>存储桶名称</code><strong>和</strong><code>地域名称</code>**</p>
</blockquote>
<p>通过上面的代码，我们会发现，我们把上传之后的图片信息都给了**<code>fileList数据</code><strong>，那么在应用时，就可以直接获取该实例的</strong><code>fileList数据即可</code>**</p>
<p><strong>提交代码</strong></p>
<p><strong><code>本节任务</code></strong> 完成上传组件的封装</p>
<h2 id="在员工详情中应用上传组件"><a href="#在员工详情中应用上传组件" class="headerlink" title="在员工详情中应用上传组件"></a>在员工详情中应用上传组件</h2><p>**<code>目标</code>**：应用封装好的上传组件</p>
<h3 id="将员工的头像和证件照赋值给上传组件"><a href="#将员工的头像和证件照赋值给上传组件" class="headerlink" title="将员工的头像和证件照赋值给上传组件"></a>将员工的头像和证件照赋值给上传组件</h3><p>在**<code>user-info.vue</code>**中放置上传组件</p>
<p><strong>员工头像</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 员工照片 --&gt;</span><br><span class="line">    &lt;el-row class="inline-info"&gt;</span><br><span class="line">      &lt;el-col :span="12"&gt;</span><br><span class="line">        &lt;el-form-item label="员工头像"&gt;</span><br><span class="line">          &lt;!-- 放置上传图片 --&gt;</span><br><span class="line">          &lt;image-upload ref="staffPhoto" /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>读取时赋值头像</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 读取上半部分的内容</span></span><br><span class="line">   <span class="keyword">async</span> <span class="function"><span class="title">getUserDetailById</span>(<span class="params"></span>)</span> {</span><br><span class="line">     <span class="built_in">this</span>.userInfo = <span class="keyword">await</span> getUserDetailById(<span class="built_in">this</span>.userId)</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.userInfo.staffPhoto) {</span><br><span class="line">       <span class="comment">// 这里我们赋值，同时需要给赋值的地址一个标记 upload: true</span></span><br><span class="line">       <span class="built_in">this</span>.$refs.staffPhoto.fileList = [{ <span class="attr">url</span>: <span class="built_in">this</span>.userInfo.staffPhoto, <span class="attr">upload</span>: <span class="literal">true</span> }]</span><br><span class="line">     }</span><br><span class="line">   },</span><br></pre></td></tr></tbody></table></figure>

<p><strong>员工证件照</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form-item label="员工照片"&gt;</span><br><span class="line">        &lt;!-- 放置上传图片 --&gt;</span><br><span class="line">        &lt;!-- ref不要重名 --&gt;</span><br><span class="line">        &lt;image-upload ref="myStaffPhoto" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>读取时赋值照片</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 读取下半部分内容</span></span><br><span class="line">   <span class="keyword">async</span>  <span class="function"><span class="title">getPersonalDetail</span>(<span class="params"></span>)</span> {</span><br><span class="line">     <span class="built_in">this</span>.formData = <span class="keyword">await</span> getPersonalDetail(<span class="built_in">this</span>.userId)</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.formData.staffPhoto) {</span><br><span class="line">       <span class="built_in">this</span>.$refs.myStaffPhoto.fileList = [{ <span class="attr">url</span>: <span class="built_in">this</span>.formData.staffPhoto, <span class="attr">upload</span>: <span class="literal">true</span> }]</span><br><span class="line">     }</span><br><span class="line">   },</span><br></pre></td></tr></tbody></table></figure>

<h3 id="保存时处理头像和证件照的保存"><a href="#保存时处理头像和证件照的保存" class="headerlink" title="保存时处理头像和证件照的保存"></a>保存时处理头像和证件照的保存</h3><p><strong>当点击保存更新时，获取图片的内容</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span>  <span class="function"><span class="title">saveUser</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="comment">// 去读取 员工上传的头像</span></span><br><span class="line">    <span class="keyword">const</span> fileList = <span class="built_in">this</span>.$refs.staffPhoto.fileList <span class="comment">// 读取上传组件的数据</span></span><br><span class="line">    <span class="keyword">if</span> (fileList.some(<span class="function"><span class="params">item</span> =&gt;</span> !item.upload)) {</span><br><span class="line">      <span class="comment">//  如果此时去找 upload为false的图片 找到了说明 有图片还没有上传完成</span></span><br><span class="line">      <span class="built_in">this</span>.$message.warning(<span class="string">'您当前还有图片没有上传完成！'</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 通过合并 得到一个新对象</span></span><br><span class="line">    <span class="keyword">await</span> saveUserDetailById({ ...this.userInfo, <span class="attr">staffPhoto</span>: fileList &amp;&amp; fileList.length ? fileList[<span class="number">0</span>].url : <span class="string">''</span> })</span><br><span class="line">    <span class="built_in">this</span>.$message.success(<span class="string">'保存基本信息成功'</span>)</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>上面代码中，upload如果为true，表示该图片已经完成上传，以此来判断图片是否已经上传完成</p>
</blockquote>
<p><strong>保存时读取头像</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">savePersonal</span>(<span class="params"></span>)</span> {</span><br><span class="line">   <span class="keyword">const</span> fileList = <span class="built_in">this</span>.$refs.myStaffPhoto.fileList</span><br><span class="line">   <span class="keyword">if</span> (fileList.some(<span class="function"><span class="params">item</span> =&gt;</span> !item.upload)) {</span><br><span class="line">     <span class="comment">//  如果此时去找 upload为false的图片 找到了说明 有图片还没有上传完成</span></span><br><span class="line">     <span class="built_in">this</span>.$message.warning(<span class="string">'您当前还有图片没有上传完成！'</span>)</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">await</span> updatePersonal({ ...this.formData, <span class="attr">staffPhoto</span>: fileList &amp;&amp; fileList.length ? fileList[<span class="number">0</span>].url : <span class="string">''</span> })</span><br><span class="line">   <span class="built_in">this</span>.$message.success(<span class="string">'保存基础信息成功'</span>)</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p><strong><code>本节任务</code></strong> ： 在员工详情中应用上传组件</p>
<h2 id="员工列表显示图片"><a href="#员工列表显示图片" class="headerlink" title="员工列表显示图片"></a>员工列表显示图片</h2><p>**<code>目标</code>**：在员工列表中心显示图片</p>
<blockquote>
<p>员工的头像可以在列表项中添加一列来进行显示</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-table-column label="头像" align="center"&gt;</span><br><span class="line">            &lt;template slot-scope="{row}"&gt;</span><br><span class="line">              &lt;img</span><br><span class="line">                slot="reference"</span><br><span class="line">                v-imageerror="require('@/assets/common/bigUserHeader.png')"</span><br><span class="line">                :src="row.staffPhoto "</span><br><span class="line">                style="border-radius: 50%; width: 100px; height: 100px; padding: 10px"</span><br><span class="line">                alt=""</span><br><span class="line">              &gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>我们尝试用之前的指令来处理图片的异常问题，但是发现只有两三张图片能显示</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20201028172654637.png" alt="image-20201028172654637"></p>
<blockquote>
<p>这是因为有的员工的头像的地址为空，给img赋值空的src不能触发错误事件，针对这一特点，我们需要对指令进行升级</p>
</blockquote>
<p>插入节点的钩子里面判断空， 然后在组件更新之后的钩子中同样判断空</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> imageerror = {</span><br><span class="line">  <span class="function"><span class="title">inserted</span>(<span class="params">dom, options</span>)</span> {</span><br><span class="line">    <span class="comment">//   图片异常的逻辑</span></span><br><span class="line">    <span class="comment">//  监听img标签的错误事件  因为图片加载失败 会触发  onerror事件</span></span><br><span class="line">    dom.src = dom.src || options.value</span><br><span class="line"></span><br><span class="line">    dom.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      <span class="comment">// 图片失败  赋值一个默认的图片</span></span><br><span class="line">      dom.src = options.value</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="title">componentUpdated</span>(<span class="params">dom, options</span>)</span> {</span><br><span class="line">    dom.src = dom.src || options.value</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>这样我们可以看到每个用户的头像了，如果没有头像则显示默认图片</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20201028173333103.png" alt="image-20201028173333103"></p>
<p>**<code>任务</code>**：员工列表显示图片</p>
<h2 id="图片地址生成二维码"><a href="#图片地址生成二维码" class="headerlink" title="图片地址生成二维码"></a>图片地址生成二维码</h2><p><strong><code>目标</code></strong> 将图片地址生成二维码显示</p>
<blockquote>
<p>我们想完成这样一个功能，当我们拥有头像地址时，将头像地址生成一个二维码，用手机扫码来访问</p>
</blockquote>
<p>首先，需要安装生成二维码的插件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i qrcode</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>qrcode的用法是</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">QrCode.toCanvas(dom, info)</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>dom为一个canvas的dom对象， info为转化二维码的信息</p>
</blockquote>
<p>我们尝试将canvas标签放到dialog的弹层中</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-dialog title="二维码" :visible.sync="showCodeDialog" @opened="showQrCode" @close="imgUrl=''"&gt;</span><br><span class="line">  &lt;el-row type="flex" justify="center"&gt;</span><br><span class="line">    &lt;canvas ref="myCanvas" /&gt;</span><br><span class="line">  &lt;/el-row&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>在点击员工的图片时，显示弹层，并将图片地址转化成二维码</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">showQrCode</span>(<span class="params">url</span>)</span> {</span><br><span class="line">  <span class="comment">// url存在的情况下 才弹出层</span></span><br><span class="line">  <span class="keyword">if</span> (url) {</span><br><span class="line">    <span class="built_in">this</span>.showCodeDialog = <span class="literal">true</span> <span class="comment">// 数据更新了 但是我的弹层会立刻出现吗 ？页面的渲染是异步的！！！！</span></span><br><span class="line">    <span class="comment">// 有一个方法可以在上一次数据更新完毕，页面渲染完毕之后</span></span><br><span class="line">    <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="comment">// 此时可以确认已经有ref对象了</span></span><br><span class="line">      QrCode.toCanvas(<span class="built_in">this</span>.$refs.myCanvas, url) <span class="comment">// 将地址转化成二维码</span></span><br><span class="line">      <span class="comment">// 如果转化的二维码后面信息 是一个地址的话 就会跳转到该地址 如果不是地址就会显示内容</span></span><br><span class="line">    })</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">this</span>.$message.warning(<span class="string">'该用户还未上传头像'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20201028180651472.png" alt="image-20201028180651472"></p>
<h2 id="打印员工信息"><a href="#打印员工信息" class="headerlink" title="打印员工信息"></a>打印员工信息</h2><p><strong><code>目标</code></strong> 完成个人信息和工作信息的打印功能</p>
<h3 id="新建打印页面及路由"><a href="#新建打印页面及路由" class="headerlink" title="新建打印页面及路由"></a>新建打印页面及路由</h3><p><strong>创建页面组件</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="dashboard-container" id="myPrint"&gt;</span><br><span class="line">    &lt;div class="app-container"&gt;</span><br><span class="line">      &lt;el-card&gt;</span><br><span class="line">        &lt;el-breadcrumb separator="/" class="titInfo "&gt;</span><br><span class="line">          &lt;el-breadcrumb-item :to="{ path: '/' }"&gt;首页&lt;/el-breadcrumb-item&gt;</span><br><span class="line">          &lt;el-breadcrumb-item&gt;</span><br><span class="line">            &lt;router-link :to="{'path':'/employees'}"&gt;员工管理&lt;/router-link&gt;</span><br><span class="line">          &lt;/el-breadcrumb-item&gt;</span><br><span class="line">          &lt;el-breadcrumb-item&gt;打印&lt;/el-breadcrumb-item&gt;</span><br><span class="line">        &lt;/el-breadcrumb&gt;</span><br><span class="line">        &lt;div v-if="type === 'personal'"&gt;</span><br><span class="line">          &lt;h2 class="centInfo"&gt;员工信息表&lt;/h2&gt;</span><br><span class="line">          &lt;table cellspacing="0" width="100%" class="tableList"&gt;</span><br><span class="line">            &lt;tr class="title"&gt;</span><br><span class="line">              &lt;td colspan="8" class="centInfo"&gt;基本信息&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th style="width:10%"&gt;姓名&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="6" style="width:80%"&gt;{{ formData.username }}&lt;/td&gt;</span><br><span class="line">              &lt;td rowspan="5" style="width:10%"&gt;&lt;img style="width:155px;height:218px" :src="formData.staffPhoto"&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="6"&gt;{{ formData.sex }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;手机&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="6"&gt;{{ formData.mobile }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;出生日期&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="6"&gt;{{ formData.dateOfBirth | formatDate }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;最高学历&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="6"&gt;{{ formData.theHighestDegreeOfEducation }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th style="width:10%"&gt;是否可编辑&lt;/th&gt;</span><br><span class="line">              &lt;td style="width:35%"&gt;{{ formData.isItEditable }}&lt;/td&gt;</span><br><span class="line">              &lt;th style="width:10%"&gt;是否隐藏号码&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5" style="width:45%"&gt;{{ formData.doYouHideNumbers }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;国家地区&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.nationalArea }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;护照号&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.passportNo }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;身份证号&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.idNumber }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;身份证照片&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.iDCardPhoto }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;籍贯&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.nativePlace }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;民族&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.nation }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;英文名&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.englishName }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;婚姻状况&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.maritalStatus }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;员工照片&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.staffPhoto }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;生日&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.birthday }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;属相&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.zodiac }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.age }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;星座&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.constellation }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;血型&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.bloodType }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;户籍所在地&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.domicile }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;政治面貌&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.politicalOutlook }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;入党时间&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.timeToJoinTheParty }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;存档机构&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.archivingOrganization }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;子女状态&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.stateOfChildren }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;子女有无商业保险&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.doChildrenHaveCommercialInsurance }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;有无违法违纪行为&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.isThereAnyViolationOfLawOrDiscipline }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;有无重大病史&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.areThereAnyMajorMedicalHistories }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr class="title"&gt;</span><br><span class="line">              &lt;td colspan="8" class="centInfo"&gt;通讯信息&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;QQ&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.qQ }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;微信&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.weChat }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;居住证城市&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.residenceCardCity }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;居住证办理日期&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.dateOfResidencePermit }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;居住证截止日期&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.residencePermitDeadline }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;现居住地&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.placeOfResidence }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;通讯地址&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.postalAddress }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;联系手机&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.contactTheMobilePhone }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;个人邮箱&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.personalMailbox }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;紧急联系人&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.emergencyContact }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;紧急联系电话&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="7"&gt;{{ formData.emergencyContactNumber }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr class="title"&gt;</span><br><span class="line">              &lt;td colspan="8" class="centInfo"&gt;账号信息&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;社保电脑号&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.socialSecurityComputerNumber }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;公积金账号&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.providentFundAccount }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;银行卡号&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.bankCardNumber }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;开户行&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.openingBank }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr class="title"&gt;</span><br><span class="line">              &lt;td colspan="8" class="centInfo"&gt;教育信息&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;学历类型&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.educationalType }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;毕业学校&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.graduateSchool }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;入学时间&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.enrolmentTime }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;毕业时间&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.graduationTime }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;专业&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.major }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;毕业证书&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.graduationCertificate }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;学位证书&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="7"&gt;{{ formData.certificateOfAcademicDegree }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr class="title"&gt;</span><br><span class="line">              &lt;td colspan="8" class="centInfo"&gt;从业信息&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;上家公司&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.homeCompany }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;职称&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.title }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;简历&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.resume }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;有无竞业限制&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.isThereAnyCompetitionRestriction }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;前公司离职证明&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.proofOfDepartureOfFormerCompany }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;备注&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="5"&gt;{{ formData.remarks }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">          &lt;/table&gt;</span><br><span class="line">          &lt;div class="foot"&gt;签字：___________日期:___________&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div v-else&gt;</span><br><span class="line">          &lt;h2 class="centInfo"&gt;岗位信息表&lt;/h2&gt;</span><br><span class="line">          &lt;table cellspacing="0" width="100%" class="tableList"&gt;</span><br><span class="line">            &lt;tr class="title"&gt;</span><br><span class="line">              &lt;td colspan="4" class="centInfo"&gt;基本信息&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th style="width:10%"&gt;姓名&lt;/th&gt;</span><br><span class="line">              &lt;td style="width:40%"&gt;{{ formData.username }}&lt;/td&gt;</span><br><span class="line">              &lt;th style="width:10%"&gt;入职日期&lt;/th&gt;</span><br><span class="line">              &lt;td style="width:40%"&gt;{{ formData.dateOfEntry }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;部门&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.departmentName }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;岗位&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.post }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;工作邮箱&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.workMailbox }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;工号&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.workNumber }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;转正日期&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.dateOfCorrection }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;转正状态&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.stateOfCorrection }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;职级&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.rank }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;汇报对象&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.reportName }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;HRBP&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.hRBP }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;聘用形式&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.formOfEmployment }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;管理形式&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.formOfManagement }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;调整司龄&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.adjustmentAgedays }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;司龄&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.ageOfDivision }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;首次参加工作时间&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.workingTimeForTheFirstTime }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;调整工龄天&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.adjustmentOfLengthOfService }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;工龄&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.workingYears }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;纳税城市&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.taxableCity }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;转正评价&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.correctionEvaluation }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr class="title"&gt;</span><br><span class="line">              &lt;td colspan="4" class="centInfo"&gt;合同信息&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;首次合同开始时间&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.initialContractStartTime }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;首次合同结束时间&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.firstContractTerminationTime }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;现合同开始时间&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.currentContractStartTime }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;现合同结束时间&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.closingTimeOfCurrentContract }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;合同期限&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.contractPeriod }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;合同文件&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.contractDocuments }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;续签次数&lt;/th&gt;</span><br><span class="line">              &lt;td colspan="3"&gt;{{ formData.renewalNumber }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr class="title"&gt;</span><br><span class="line">              &lt;td colspan="4" class="centInfo"&gt;招聘信息&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;其他招聘渠道&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.otherRecruitmentChannels }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;招聘渠道&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.recruitmentChannels }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;社招校招&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.socialRecruitment }}&lt;/td&gt;</span><br><span class="line">              &lt;th&gt;推荐企业人&lt;/th&gt;</span><br><span class="line">              &lt;td&gt;{{ formData.recommenderBusinessPeople }}&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">          &lt;/table&gt;</span><br><span class="line">          &lt;div class="foot"&gt;签字：___________日期:___________&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import { getPersonalDetail, getJobDetail } from '@/api/employees'</span><br><span class="line">import { getUserDetailById } from '@/api/user'</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      formData: {},</span><br><span class="line">      userId: this.$route.params.id,</span><br><span class="line">      type: this.$route.query.type // 打印类型</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  // 创建完毕状态</span><br><span class="line">  created() {</span><br><span class="line">    this.type === 'personal' ? this.getPersonalDetail() : this.getJobDetail()</span><br><span class="line">  },</span><br><span class="line">  // 组件更新</span><br><span class="line">  methods: {</span><br><span class="line">    async getPersonalDetail() {</span><br><span class="line">      this.formData = await getPersonalDetail(this.userId) // 获取个人基本信息</span><br><span class="line">    },</span><br><span class="line">    async getJobDetail() {</span><br><span class="line">      const userInfo = await getUserDetailById(this.userId)</span><br><span class="line">      const jobInfo = await getJobDetail(this.userId) // 获取个人基本信息</span><br><span class="line">      this.formData = { ...userInfo, ...jobInfo }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="scss"&gt;</span><br><span class="line">.foot {</span><br><span class="line">  padding: 30px 0;</span><br><span class="line">  text-align: right;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>该页面内容实际上就是读取个人和详情的接口数据，根据传入的type类型决定显示个人还是岗位</p>
</blockquote>
<p>type为**<code>personal</code><strong>时显示个人，为</strong><code>job</code>**时显示岗位</p>
<p><strong>新建打印页面路由</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'print/:id'</span>, <span class="comment">// 二级默认路由</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/employees/print'</span>), <span class="comment">// 按需加载</span></span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">meta</span>: {</span><br><span class="line">      <span class="attr">title</span>: <span class="string">'打印'</span>, <span class="comment">// 标记当前路由规则的中文名称 后续在做左侧菜单时 使用</span></span><br><span class="line">      <span class="attr">icon</span>: <span class="string">'people'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<p>完成详情到打印的跳转</p>
<p><strong>个人</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-row type="flex" justify="end"&gt;</span><br><span class="line">           &lt;el-tooltip content="打印个人基本信息"&gt;</span><br><span class="line">               &lt;router-link :to="`/employees/print/${userId}?type=personal`"&gt;</span><br><span class="line">                 &lt;i class="el-icon-printer" /&gt;</span><br><span class="line">               &lt;/router-link&gt;</span><br><span class="line">            &lt;/el-tooltip&gt;</span><br><span class="line"> &lt;/el-row&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>岗位</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-row type="flex" justify="end"&gt;</span><br><span class="line">            &lt;el-tooltip content="打印岗位信息"&gt;</span><br><span class="line">              &lt;router-link :to="`/employees/print/${userId}?type=job`"&gt;</span><br><span class="line">                &lt;i class="el-icon-printer"  /&gt;</span><br><span class="line">              &lt;/router-link&gt;</span><br><span class="line">            &lt;/el-tooltip&gt;</span><br><span class="line">  &lt;/el-row&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="利用vue-print-nb进行打印"><a href="#利用vue-print-nb进行打印" class="headerlink" title="利用vue-print-nb进行打印"></a>利用vue-print-nb进行打印</h3><p>首先，打印功能我们借助一个比较流行的插件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i vue-print-nb</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>它的用法是 </p>
</blockquote>
<p>首先注册该插件</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Print <span class="keyword">from</span> <span class="string">'vue-print-nb'</span></span><br><span class="line">Vue.use(Print);</span><br></pre></td></tr></tbody></table></figure>

<p>使用v-print指令的方式进行打印</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-row type="flex" justify="end"&gt;</span><br><span class="line">        &lt;el-button v-print="printObj" size="small" type="primary"&gt;打印&lt;/el-button&gt;</span><br><span class="line"> &lt;/el-row&gt;</span><br><span class="line"> printObj: {</span><br><span class="line">      id: 'myPrint'</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<p>最终，我们看到的效果</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200728013006535.png" alt="image-20200728013006535"></p>
<p><strong>提交代码</strong></p>
<h1 id="8-权限设计和管理"><a href="#8-权限设计和管理" class="headerlink" title="8.权限设计和管理"></a>8.权限设计和管理</h1><h2 id="权限设计-RBAC的权限设计思想"><a href="#权限设计-RBAC的权限设计思想" class="headerlink" title="权限设计-RBAC的权限设计思想"></a>权限设计-RBAC的权限设计思想</h2><blockquote>
<p>首先，我们先了解下什么是传统的权限设计</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200901150655343.png" alt="image-20200901150655343"></p>
<p>从上面的图中，我们发现，传统的权限设计是对每个人进行单独的权限设置，但这种方式已经不适合目前企业的高效管控权限的发展需求，因为每个人都要单独去设置权限</p>
<blockquote>
<p>  基于此，RBAC的权限模型就应运而生了，RBAC(Role-Based Access control) ，也就是基于角色的权限分配解决方案，相对于传统方案，RBAC提供了中间层Role（角色），其权限模式如下</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200901151025021.png" alt="image-20200901151025021"></p>
<p>RBAC实现了用户和权限点的分离，想对某个用户设置权限，只需要对该用户设置相应的角色即可，而该角色就拥有了对应的权限，这样一来，权限的分配和设计就做到了极简，高效，当想对用户收回权限时，只需要收回角色即可，接下来，我们就在该项目中实施这一设想</p>
<h2 id="给分配员工角色"><a href="#给分配员工角色" class="headerlink" title="给分配员工角色"></a>给分配员工角色</h2><p>**<code>目标</code>**在员工管理页面，分配角色</p>
<h3 id="新建分配角色窗体"><a href="#新建分配角色窗体" class="headerlink" title="新建分配角色窗体"></a>新建分配角色窗体</h3><blockquote>
<p>在上一节章节中，员工管理的角色功能，我们并没有实现，此章节我们实现给员工分配角色</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200901151151286.png" alt="image-20200901151151286"></p>
<p>从上图中，可以看出，用户和角色是**<code>1对多</code>**的关系，即一个用户可以拥有多个角色，比如公司的董事长可以拥有总经理和系统管理员一样的角色</p>
<p>首先，新建分配角色窗体 <strong><code>assign-role.vue</code></strong>   </p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200728172853451.png" alt="image-20200728172853451"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-dialog title="分配角色" :visible="showRoleDialog"&gt;</span><br><span class="line">    &lt;!-- el-checkbox-group选中的是 当前用户所拥有的角色  需要绑定 当前用户拥有的角色--&gt;</span><br><span class="line">    &lt;el-checkbox-group&gt;</span><br><span class="line">      &lt;!-- 选项 --&gt;</span><br><span class="line">    &lt;/el-checkbox-group&gt;</span><br><span class="line">    &lt;el-row slot="footer" type="flex" justify="center"&gt;</span><br><span class="line">      &lt;el-col :span="6"&gt;</span><br><span class="line">        &lt;el-button type="primary" size="small"&gt;确定&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button size="small"&gt;取消&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">  &lt;/el-dialog&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  props: {</span><br><span class="line">    showRoleDialog: {</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    },</span><br><span class="line">    // 用户的id 用来查询当前用户的角色信息</span><br><span class="line">    userId: {</span><br><span class="line">      type: String,</span><br><span class="line">      default: null</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="获取角色列表和当前用户角色"><a href="#获取角色列表和当前用户角色" class="headerlink" title="获取角色列表和当前用户角色"></a>获取角色列表和当前用户角色</h3><p><strong>获取所有角色列表</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 分配角色 --&gt;</span><br><span class="line">  &lt;el-checkbox-group v-model="roleIds"&gt;</span><br><span class="line">    &lt;el-checkbox v-for="item in list" :key="item.id" :label="item.id"&gt;</span><br><span class="line">      {{</span><br><span class="line">        item.name</span><br><span class="line">      }}</span><br><span class="line">    &lt;/el-checkbox&gt;</span><br><span class="line">  &lt;/el-checkbox-group&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>获取角色列表</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { getRoleList } <span class="keyword">from</span> <span class="string">'@/api/setting'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">props</span>: {</span><br><span class="line">    <span class="attr">showRoleDialog</span>: {</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">userId</span>: {</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">list</span>: [], <span class="comment">// 角色列表</span></span><br><span class="line">      <span class="attr">roleIds</span>: []</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.getRoleList()</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="comment">//  获取所有角色</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getRoleList</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="keyword">const</span> { rows } = <span class="keyword">await</span> getRoleList()</span><br><span class="line">      <span class="built_in">this</span>.list = rows</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>获取用户的当前角色</strong>  </p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { getUserDetailById } <span class="keyword">from</span> <span class="string">'@/api/user'</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="title">getUserDetailById</span>(<span class="params">id</span>)</span> {</span><br><span class="line">      <span class="keyword">const</span> { roleIds } = <span class="keyword">await</span> getUserDetailById(id)</span><br><span class="line">      <span class="built_in">this</span>.roleIds = roleIds <span class="comment">// 赋值本用户的角色</span></span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>点击角色弹出层</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// 编辑角色</span><br><span class="line"> async  editRole(id) {</span><br><span class="line">      this.userId = id // props传值 是异步的</span><br><span class="line">      await this.$refs.assignRole.getUserDetailById(id) // 父组件调用子组件方法</span><br><span class="line">      this.showRoleDialog = true</span><br><span class="line">    },</span><br><span class="line">  &lt;!-- 放置角色分配组件 --&gt;</span><br><span class="line"> &lt;assign-role ref="assignRole" :show-role-dialog.sync="showRoleDialog" :user-id="userId" /&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="给员工分配角色"><a href="#给员工分配角色" class="headerlink" title="给员工分配角色"></a>给员工分配角色</h3><p><strong>分配角色接口</strong>  <strong><code>api/employees.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> * 给用户分配角色</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">assignRoles</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/sys/user/assignRoles'</span>,</span><br><span class="line">    data,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'put'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>确定保存</strong>  <strong><code>assign-role</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">btnOK</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="keyword">await</span> assignRoles({ <span class="attr">id</span>: <span class="built_in">this</span>.userId, <span class="attr">roleIds</span>: <span class="built_in">this</span>.roleIds })</span><br><span class="line">      <span class="comment">//   关闭窗体</span></span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">'update:showRoleDialog'</span>, <span class="literal">false</span>)</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure>

<p>**取消或者关闭 **  <strong><code>assign-role</code></strong> </p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">btnCancel</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.roleIds = [] <span class="comment">// 清空原来的数组</span></span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">'update:showRoleDialog'</span>, <span class="literal">false</span>)</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p><strong><code>本节任务</code></strong> 分配员工权限</p>
<h2 id="权限点管理页面开发"><a href="#权限点管理页面开发" class="headerlink" title="权限点管理页面开发"></a>权限点管理页面开发</h2><p>**<code>目标</code>**： 完成权限点页面的开发和管理</p>
<h3 id="新建权限点管理页面"><a href="#新建权限点管理页面" class="headerlink" title="新建权限点管理页面"></a>新建权限点管理页面</h3><blockquote>
<p>人已经有了角色， 那么权限是什么</p>
</blockquote>
<p>在企业服务中，权限一般分割为 <strong>页面访问权限</strong>，<strong>按钮操作权限</strong>，<strong>API访问权限</strong></p>
<blockquote>
<p>API权限多见于在后端进行拦截，所以我们这一版本只做**<code>页面访问</code><strong>和</strong><code>按钮操作授权</code>/**</p>
</blockquote>
<p>由此，我们可以根据业务需求设计权限管理页面</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200901160508382.png" alt="image-20200901160508382"></p>
<p><strong>完成权限页面结构</strong> <strong><code>src/views/permission/index.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="dashboard-container"&gt;</span><br><span class="line">    &lt;div class="app-container"&gt;</span><br><span class="line">      &lt;!-- 靠右的按钮 --&gt;</span><br><span class="line">      &lt;page-tools&gt;</span><br><span class="line">        &lt;template v-slot:after&gt;</span><br><span class="line">          &lt;el-button type="primary" size="small"&gt;添加权限&lt;/el-button&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/page-tools&gt;</span><br><span class="line">      &lt;!-- 表格 --&gt;</span><br><span class="line">      &lt;el-table border&gt;</span><br><span class="line">        &lt;el-table-column align="center" label="名称" /&gt;</span><br><span class="line">        &lt;el-table-column align="center" label="标识" /&gt;</span><br><span class="line">        &lt;el-table-column align="center" label="描述" /&gt;</span><br><span class="line">        &lt;el-table-column align="center" label="操作"&gt;</span><br><span class="line">          &lt;template&gt;</span><br><span class="line">            &lt;el-button type="text"&gt;添加&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button type="text"&gt;编辑&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button type="text"&gt;删除&lt;/el-button&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/el-table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>封装权限管理的增删改查请求</strong>  <strong><code>src/api/permisson.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取权限</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getPermissionList</span>(<span class="params">params</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/sys/permission'</span>,</span><br><span class="line">    params</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 新增权限</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addPermission</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/sys/permission'</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'post'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新权限</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updatePermission</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/permission/<span class="subst">${data.id}</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'put'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除权限</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">delPermission</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/permission/<span class="subst">${id}</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'delete'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 获取权限详情</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getPermissionDetail</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/permission/<span class="subst">${id}</span>`</span></span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="获取权限数据并转化树形"><a href="#获取权限数据并转化树形" class="headerlink" title="获取权限数据并转化树形"></a>获取权限数据并转化树形</h3><p>这里，我们通过树形操作方法，将列表转化成层级数据</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import { getPermissionList } from '@/api/permission'</span><br><span class="line">import { transListToTreeData } from '@/utils'</span><br><span class="line">export default {</span><br><span class="line">data() {</span><br><span class="line">    return {</span><br><span class="line">      list: [],</span><br><span class="line">      formData: {</span><br><span class="line">        name: '', // 名称</span><br><span class="line">        code: '', // 标识</span><br><span class="line">        description: '', // 描述</span><br><span class="line">        type: '', // 类型 该类型 不需要显示 因为点击添加的时候已经知道类型了</span><br><span class="line">        pid: '', // 因为做的是树 需要知道添加到哪个节点下了</span><br><span class="line">        enVisible: '0' // 开启</span><br><span class="line">      },</span><br><span class="line">      rules: {</span><br><span class="line">        name: [{ required: true, message: '权限名称不能为空', trigger: 'blur' }],</span><br><span class="line">        code: [{ required: true, message: '权限标识不能为空', trigger: 'blur' }]</span><br><span class="line">      },</span><br><span class="line">      showDialog: false</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  created() {</span><br><span class="line">    this.getPermissionList()</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    showText() {</span><br><span class="line">      return this.formData.id ? '编辑' : '新增'</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    async  getPermissionList() {</span><br><span class="line">      this.list = transListToTreeData(await getPermissionList(), '0')</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>绑定表格数据</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-table :data="list" border="" row-key="id"&gt;</span><br><span class="line">        &lt;el-table-column label="名称" prop="name" /&gt;</span><br><span class="line">        &lt;el-table-column label="标识" prop="code" /&gt;</span><br><span class="line">        &lt;el-table-column label="描述" prop="description" /&gt;</span><br><span class="line">        &lt;el-table-column label="操作"&gt;</span><br><span class="line">          &lt;template slot-scope="{ row }"&gt;</span><br><span class="line">            &lt;el-button v-if="row.type === 1" type="text" @click="addPermission(row.id, 2)"&gt;添加&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button type="text" @click="editPermission(row.id)"&gt;编辑&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button type="text" @click="delPermission(row.id)"&gt; 删除&lt;/el-button&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line">      &lt;/el-table&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>需要注意的是， 如果需要树表， 需要给<strong>el-table</strong>配置<strong>row-key</strong>属性  id</p>
<blockquote>
<p>当type为1时为访问权限，type为2时为功能权限</p>
</blockquote>
<blockquote>
<p>和前面内容一样，我们需要完成 新增权限 / 删除权限 / 编辑权限</p>
</blockquote>
<h3 id="新增编辑权限的弹层"><a href="#新增编辑权限的弹层" class="headerlink" title="新增编辑权限的弹层"></a>新增编辑权限的弹层</h3><p><strong>新增权限/编辑权限弹层</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 放置一个弹层 用来编辑新增节点 --&gt;</span><br><span class="line"> &lt;el-dialog :title="`${showText}权限点`" :visible="showDialog" @close="btnCancel"&gt;</span><br><span class="line">    &lt;!-- 表单 --&gt;</span><br><span class="line">    &lt;el-form ref="perForm" :model="formData" :rules="rules" label-width="120px"&gt;</span><br><span class="line">      &lt;el-form-item label="权限名称" prop="name"&gt;</span><br><span class="line">        &lt;el-input v-model="formData.name" style="width:90%" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label="权限标识" prop="code"&gt;</span><br><span class="line">        &lt;el-input v-model="formData.code" style="width:90%" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label="权限描述"&gt;</span><br><span class="line">        &lt;el-input v-model="formData.description" style="width:90%" /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label="开启"&gt;</span><br><span class="line">        &lt;el-switch</span><br><span class="line">          v-model="formData.enVisible"</span><br><span class="line">          active-value="1"</span><br><span class="line">          inactive-value="0"</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">    &lt;el-row slot="footer" type="flex" justify="center"&gt;</span><br><span class="line">      &lt;el-col :span="6"&gt;</span><br><span class="line">        &lt;el-button size="small" type="primary" @click="btnOK"&gt;确定&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button size="small" @click="btnCancel"&gt;取消&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">  &lt;/el-dialog&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="新增，编辑，删除权限点"><a href="#新增，编辑，删除权限点" class="headerlink" title="新增，编辑，删除权限点"></a>新增，编辑，删除权限点</h3><p><strong>新增/删除/编辑逻辑</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { updatePermission, addPermission, getPermissionDetail, delPermission, getPermissionList } <span class="keyword">from</span> <span class="string">'@/api/permission'</span></span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">     <span class="comment">// 删除操作</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">delPermission</span>(<span class="params">id</span>)</span> {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">await</span> <span class="built_in">this</span>.$confirm(<span class="string">'确定要删除该数据吗'</span>)</span><br><span class="line">        <span class="keyword">await</span> delPermission(id)</span><br><span class="line">        <span class="built_in">this</span>.getPermissionList()</span><br><span class="line">        <span class="built_in">this</span>.$message.success(<span class="string">'删除成功'</span>)</span><br><span class="line">      } <span class="keyword">catch</span> (error) {</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="title">btnOK</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.$refs.perForm.validate().then(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.formData.id) {</span><br><span class="line">          <span class="keyword">return</span> updatePermission(<span class="built_in">this</span>.formData)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> addPermission(<span class="built_in">this</span>.formData)</span><br><span class="line">      }).then(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="comment">//  提示消息</span></span><br><span class="line">        <span class="built_in">this</span>.$message.success(<span class="string">'新增成功'</span>)</span><br><span class="line">        <span class="built_in">this</span>.getPermissionList()</span><br><span class="line">        <span class="built_in">this</span>.showDialog = <span class="literal">false</span></span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="title">btnCancel</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.formData = {</span><br><span class="line">        <span class="attr">name</span>: <span class="string">''</span>, <span class="comment">// 名称</span></span><br><span class="line">        <span class="attr">code</span>: <span class="string">''</span>, <span class="comment">// 标识</span></span><br><span class="line">        <span class="attr">description</span>: <span class="string">''</span>, <span class="comment">// 描述</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">''</span>, <span class="comment">// 类型 该类型 不需要显示 因为点击添加的时候已经知道类型了</span></span><br><span class="line">        <span class="attr">pid</span>: <span class="string">''</span>, <span class="comment">// 因为做的是树 需要知道添加到哪个节点下了</span></span><br><span class="line">        <span class="attr">enVisible</span>: <span class="string">'0'</span> <span class="comment">// 开启</span></span><br><span class="line">      }</span><br><span class="line">      <span class="built_in">this</span>.$refs.perForm.resetFields()</span><br><span class="line">      <span class="built_in">this</span>.showDialog = <span class="literal">false</span></span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="title">addPermission</span>(<span class="params">pid, type</span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.formData.pid = pid</span><br><span class="line">      <span class="built_in">this</span>.formData.type = type</span><br><span class="line">      <span class="built_in">this</span>.showDialog = <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">editPermission</span>(<span class="params">id</span>)</span> {</span><br><span class="line">      <span class="comment">// 根据获取id获取详情</span></span><br><span class="line">      <span class="built_in">this</span>.formData = <span class="keyword">await</span> getPermissionDetail(id)</span><br><span class="line">      <span class="built_in">this</span>.showDialog = <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p><strong><code>本节任务</code></strong>: 权限点管理页面开发</p>
<h2 id="给角色分配权限"><a href="#给角色分配权限" class="headerlink" title="给角色分配权限"></a>给角色分配权限</h2><p>**<code>目标</code>**： 完成给角色分配权限的业务</p>
<h3 id="新建分配权限弹出层"><a href="#新建分配权限弹出层" class="headerlink" title="新建分配权限弹出层"></a>新建分配权限弹出层</h3><blockquote>
<p>在公司设置的章节中，我们没有实现分配权限的功能，在这里我们来实现一下</p>
</blockquote>
<p><strong>封装分配权限的api</strong>  <strong><code>src/api/setting.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 给角色分配权限</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">assignPerm</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> request({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'/sys/role/assignPrem'</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'put'</span>,</span><br><span class="line">    data</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p><strong>给角色分配权限弹出层</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-dialog title="分配权限" :visible="showPermDialog" @close="btnPermCancel"&gt;</span><br><span class="line">      &lt;!-- 权限是一颗树 --&gt;</span><br><span class="line">      &lt;!-- 将数据绑定到组件上 --&gt;</span><br><span class="line">      &lt;!-- check-strictly 如果为true 那表示父子勾选时  不互相关联 如果为false就互相关联 --&gt;</span><br><span class="line">      &lt;!-- id作为唯一标识 --&gt;</span><br><span class="line">      &lt;el-tree</span><br><span class="line">        ref="permTree"</span><br><span class="line">        :data="permData"</span><br><span class="line">        :props="defaultProps"</span><br><span class="line">        :show-checkbox="true"</span><br><span class="line">        :check-strictly="true"</span><br><span class="line">        :default-expand-all="true"</span><br><span class="line">        :default-checked-keys="selectCheck"</span><br><span class="line">        node-key="id"</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;!-- 确定 取消 --&gt;</span><br><span class="line">      &lt;el-row slot="footer" type="flex" justify="center"&gt;</span><br><span class="line">        &lt;el-col :span="6"&gt;</span><br><span class="line">          &lt;el-button type="primary" size="small" @click="btnPermOK"&gt;确定&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button size="small" @click="btnPermCancel"&gt;取消&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>定义数据</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">showPermDialog: <span class="literal">false</span>, <span class="comment">// 控制分配权限弹层的显示后者隐藏</span></span><br><span class="line"><span class="attr">defaultProps</span>: {</span><br><span class="line">  <span class="attr">label</span>: <span class="string">'name'</span></span><br><span class="line">},</span><br><span class="line"> <span class="attr">permData</span>: [], <span class="comment">// 专门用来接收权限数据 树形数据</span></span><br><span class="line"><span class="attr">selectCheck</span>: [], <span class="comment">// 定义一个数组来接收 已经选中的节点</span></span><br><span class="line"><span class="attr">roleId</span>: <span class="literal">null</span> <span class="comment">// 用来记录分配角色的id</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>点击分配权限</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-button size="small" type="success" @click="assignPerm(row.id)"&gt;分配权限&lt;/el-button&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="给角色分配权限-1"><a href="#给角色分配权限-1" class="headerlink" title="给角色分配权限"></a>给角色分配权限</h3><p><strong>分配权限</strong>/<strong>树形数据</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> { transListToTreeData } <span class="keyword">from</span> <span class="string">'@/utils'</span></span><br><span class="line"><span class="keyword">import</span> { getPermissionList } <span class="keyword">from</span> <span class="string">'@/api/permission'</span></span><br><span class="line"><span class="attr">methods</span>: {</span><br><span class="line">    <span class="comment">// 点击分配权限</span></span><br><span class="line">  <span class="comment">// 获取权限点数据 在点击的时候调用 获取权限点数据</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">assignPerm</span>(<span class="params">id</span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.permData = tranListToTreeData(<span class="keyword">await</span> getPermissionList(), <span class="string">'0'</span>) <span class="comment">// 转化list到树形数据</span></span><br><span class="line">      <span class="built_in">this</span>.roleId = id</span><br><span class="line">      <span class="comment">// 应该去获取 这个id的 权限点</span></span><br><span class="line">      <span class="comment">// 有id 就可以 id应该先记录下来</span></span><br><span class="line">      <span class="keyword">const</span> { permIds } = <span class="keyword">await</span> getRoleDetail(id) <span class="comment">// permIds是当前角色所拥有的权限点数据</span></span><br><span class="line">      <span class="built_in">this</span>.selectCheck = permIds <span class="comment">// 将当前角色所拥有的权限id赋值</span></span><br><span class="line">      <span class="built_in">this</span>.showPermDialog = <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">async</span>  <span class="function"><span class="title">btnPermOK</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="comment">// 调用el-tree的方法</span></span><br><span class="line">      <span class="comment">// console.log(this.$refs.permTree.getCheckedKeys())</span></span><br><span class="line">      <span class="keyword">await</span> assignPerm({ <span class="attr">permIds</span>: <span class="built_in">this</span>.$refs.permTree.getCheckedKeys(), <span class="attr">id</span>: <span class="built_in">this</span>.roleId })</span><br><span class="line">      <span class="built_in">this</span>.$message.success(<span class="string">'分配权限成功'</span>)</span><br><span class="line">      <span class="built_in">this</span>.showPermDialog = <span class="literal">false</span></span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="title">btnPermCancel</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.selectCheck = [] <span class="comment">// 重置数据</span></span><br><span class="line">      <span class="built_in">this</span>.showPermDialog = <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p><strong><code>本节任务</code></strong> 给角色分配权限</p>
<h2 id="前端权限应用-页面访问和菜单"><a href="#前端权限应用-页面访问和菜单" class="headerlink" title="前端权限应用-页面访问和菜单"></a>前端权限应用-页面访问和菜单</h2><p>**<code>目标</code>**： 在当前项目应用用户的页面访问权限</p>
<h3 id="权限受控的主体思路"><a href="#权限受控的主体思路" class="headerlink" title="权限受控的主体思路"></a>权限受控的主体思路</h3><blockquote>
<p>到了最关键的环节，我们设置的权限如何应用？</p>
</blockquote>
<p>在上面的几个小节中，我们已经把给用户分配了角色， 给角色分配了权限，那么在用户登录获取资料的时候，会自动查出该用户拥有哪些权限，这个权限需要和我们的菜单还有路由有效结合起来</p>
<blockquote>
<p>我们在路由和页面章节中，已经介绍过，动态权限其实就是根据用户的实际权限来访问的，接下来我们操作一下</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200730002842243.png" alt="image-20200730002842243"></p>
<p>在权限管理页面中，我们设置了一个<strong>标识</strong>， 这个标识可以和我们的路由模块进行关联，也就是说，如果用户拥有这个标识，那么用户就可以<strong>拥有这个路由模块</strong>，如果没有这个标识，就不能<strong>访问路由模块</strong></p>
<blockquote>
<p>用什么来实现？</p>
</blockquote>
<p>vue-router提供了一个叫做<a href="https://router.vuejs.org/zh/api/#router-addroutes">addRoutes</a>的API方法，这个方法的含义是<strong>动态添加路由规则</strong></p>
<p>思路如下</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200901164312005.png" alt="image-20200901164312005"></p>
<h3 id="新建Vuex中管理权限的模块"><a href="#新建Vuex中管理权限的模块" class="headerlink" title="新建Vuex中管理权限的模块"></a>新建Vuex中管理权限的模块</h3><blockquote>
<p> 在<strong>主页模块</strong>章节中，我们将用户的资料设置到vuex中，其中便有权限数据，我们可以就此进行操作</p>
</blockquote>
<p>我们可以在vuex中新增一个permission模块</p>
<p><strong><code>src/store/modules/permission.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// vuex的权限模块</span></span><br><span class="line"><span class="keyword">import</span> { constantRoutes } <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"><span class="comment">// vuex中的permission模块用来存放当前的 静态路由 + 当前用户的 权限路由</span></span><br><span class="line"><span class="keyword">const</span> state = {</span><br><span class="line">  <span class="attr">routes</span>: constantRoutes <span class="comment">// 所有人默认拥有静态路由</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> mutations = {</span><br><span class="line">  <span class="comment">// newRoutes可以认为是 用户登录 通过权限所得到的动态路由的部分</span></span><br><span class="line">  <span class="function"><span class="title">setRoutes</span>(<span class="params">state, newRoutes</span>)</span> {</span><br><span class="line">    <span class="comment">// 下面这么写不对 不是语法不对 是业务不对</span></span><br><span class="line">    <span class="comment">// state.routes = [...state.routes, ...newRoutes]</span></span><br><span class="line">    <span class="comment">// 有一种情况  张三 登录 获取了动态路由 追加到路由上  李四登录 4个动态路由</span></span><br><span class="line">    <span class="comment">// 应该是每次更新 都应该在静态路由的基础上进行追加</span></span><br><span class="line">    state.routes = [...constantRoutes, ...newRoutes]</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> actions = {}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>在Vuex管理模块中引入permisson模块</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> permission <span class="keyword">from</span> <span class="string">'./modules/permission'</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">  <span class="attr">modules</span>: {</span><br><span class="line">    <span class="comment">// 子模块   $store.state.app.</span></span><br><span class="line">    <span class="comment">// mapGetters([])</span></span><br><span class="line">    app,</span><br><span class="line">    settings,</span><br><span class="line">    user,</span><br><span class="line">    permission</span><br><span class="line">  },</span><br><span class="line">  getters</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Vuex筛选权限路由"><a href="#Vuex筛选权限路由" class="headerlink" title="Vuex筛选权限路由"></a>Vuex筛选权限路由</h3><blockquote>
<p> OK， 那么我们在哪将用户的标识和权限进行关联呢 ？</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200815184203715.png" alt="image-20200815184203715"></p>
<p>我们可以在这张图中，进一步的进行操作</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200815184407204.png" alt="image-20200815184407204"></p>
<p>访问权限的数据在用户属性**<code>menus</code><strong>中，</strong><code>menus</code>**中的标识该怎么和路由对应呢？</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200815185230597.png" alt="image-20200815185230597"></p>
<blockquote>
<p>  可以将路由模块的根节点**<code>name</code>**属性命名和权限标识一致，这样只要标识能对上，就说明用户拥有了该权限</p>
</blockquote>
<p>这一步，在我们命名路由的时候已经操作过了</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200730011629326.png" alt="image-20200730011629326"></p>
<p>接下来， vuex的permission中提供一个action，进行关联</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { asyncRoutes, constantRoutes } <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = {</span><br><span class="line">  <span class="comment">// 筛选权限路由</span></span><br><span class="line">  <span class="comment">// 第二个参数为当前用户的所拥有的菜单权限</span></span><br><span class="line">  <span class="comment">// menus: ["settings","permissions"]</span></span><br><span class="line">  <span class="comment">// asyncRoutes是所有的动态路由</span></span><br><span class="line">  <span class="comment">// asyncRoutes  [{path: 'setting',name: 'setting'},{}]</span></span><br><span class="line">  <span class="function"><span class="title">filterRoutes</span>(<span class="params">context, menus</span>)</span> {</span><br><span class="line">    <span class="keyword">const</span> routes = []</span><br><span class="line">    <span class="comment">//   筛选出 动态路由中和menus中能够对上的路由</span></span><br><span class="line">    menus.forEach(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">      <span class="comment">// key就是标识</span></span><br><span class="line">      <span class="comment">// asyncRoutes 找 有没有对象中的name属性等于 key的 如果找不到就没权限 如果找到了 要筛选出来</span></span><br><span class="line">      routes.push(...asyncRoutes.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.name === key)) <span class="comment">// 得到一个数组 有可能 有元素 也有可能是空数组</span></span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 得到的routes是所有模块中满足权限要求的路由数组</span></span><br><span class="line">    <span class="comment">// routes就是当前用户所拥有的 动态路由的权限</span></span><br><span class="line">    context.commit(<span class="string">'setRoutes'</span>, routes) <span class="comment">// 将动态路由提交给mutations</span></span><br><span class="line">    <span class="keyword">return</span> routes <span class="comment">// 这里为什么还要return  state数据 是用来 显示左侧菜单用的  return  是给路由addRoutes用的</span></span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="权限拦截出调用筛选权限Action"><a href="#权限拦截出调用筛选权限Action" class="headerlink" title="权限拦截出调用筛选权限Action"></a>权限拦截出调用筛选权限Action</h3><p>在拦截的位置，调用关联action， 获取新增routes，并且<strong>addRoutes</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 权限拦截在路由跳转  导航守卫</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span> <span class="comment">// 引入store实例 和组件中的this.$store是一回事</span></span><br><span class="line"><span class="keyword">import</span> nprogress <span class="keyword">from</span> <span class="string">'nprogress'</span> <span class="comment">// 引入进度条</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'nprogress/nprogress.css'</span> <span class="comment">// 引入进度条样式</span></span><br><span class="line"><span class="comment">// 不需要导出  因为只需要让代码执行即可</span></span><br><span class="line"><span class="comment">// 前置守卫</span></span><br><span class="line"><span class="comment">// next是前置守卫必须必须必须执行的钩子  next必须执行 如果不执行 页面就死了</span></span><br><span class="line"><span class="comment">// next()  放过</span></span><br><span class="line"><span class="comment">// next(false) 跳转终止</span></span><br><span class="line"><span class="comment">// next(地址) 跳转到某个地址</span></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">'/login'</span>, <span class="string">'/404'</span>] <span class="comment">// 定义白名单</span></span><br><span class="line">router.beforeEach(<span class="keyword">async</span>(to, <span class="keyword">from</span>, next) =&gt; {</span><br><span class="line">  nprogress.start() <span class="comment">// 开启进度条的意思</span></span><br><span class="line">  <span class="keyword">if</span> (store.getters.token) {</span><br><span class="line">    <span class="comment">// 只有有token的情况下 才能获取资料</span></span><br><span class="line">    <span class="comment">//   如果有token</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) {</span><br><span class="line">      <span class="comment">// 如果要访问的是 登录页</span></span><br><span class="line">      next(<span class="string">'/'</span>) <span class="comment">// 跳到主页  // 有token 用处理吗？不用</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// 只有放过的时候才去获取用户资料</span></span><br><span class="line">      <span class="comment">// 是每次都获取吗</span></span><br><span class="line">      <span class="comment">// 如果当前vuex中有用户的资料的id 表示 已经有资料了 不需要获取了 如果没有id才需要获取</span></span><br><span class="line">      <span class="keyword">if</span> (!store.getters.userId) {</span><br><span class="line">        <span class="comment">// 如果没有id才表示当前用户资料没有获取过</span></span><br><span class="line">        <span class="comment">// async 函数所return的内容 用 await就可以接收到</span></span><br><span class="line">        <span class="keyword">const</span> { roles } = <span class="keyword">await</span> store.dispatch(<span class="string">'user/getUserInfo'</span>)</span><br><span class="line">        <span class="comment">// 如果说后续 需要根据用户资料获取数据的话 这里必须改成 同步</span></span><br><span class="line">        <span class="comment">// 筛选用户的可用路由</span></span><br><span class="line">        <span class="comment">// actions中函数 默认是Promise对象 调用这个对象 想要获取返回的值话 必须 加 await或者是then</span></span><br><span class="line">        <span class="comment">// actions是做异步操作的</span></span><br><span class="line">        <span class="keyword">const</span> routes = <span class="keyword">await</span> store.dispatch(<span class="string">'permission/filterRoutes'</span>, roles.menus)</span><br><span class="line">        <span class="comment">// routes就是筛选得到的动态路由</span></span><br><span class="line">        <span class="comment">// 动态路由 添加到 路由表中 默认的路由表 只有静态路由 没有动态路由</span></span><br><span class="line">        <span class="comment">// addRoutes  必须 用 next(地址) 不能用next()</span></span><br><span class="line">        router.addRoutes(routes) <span class="comment">// 添加动态路由到路由表  铺路</span></span><br><span class="line">        <span class="comment">// 添加完动态路由之后</span></span><br><span class="line">        next(to.path) <span class="comment">// 相当于跳到对应的地址  相当于多做一次跳转 为什么要多做一次跳转</span></span><br><span class="line">        <span class="comment">// 进门了，但是进门之后我要去的地方的路还没有铺好，直接走，掉坑里，多做一次跳转，再从门外往里进一次，跳转之前 把路铺好，再次进来的时候，路就铺好了</span></span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        next()</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">//   没有token的情况下</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.indexOf(to.path) &gt; -<span class="number">1</span>) {</span><br><span class="line">      <span class="comment">//  表示要去的地址在白名单</span></span><br><span class="line">      next()</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      next(<span class="string">'/login'</span>)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  nprogress.done() <span class="comment">// 解决手动切换地址时 进度条不关闭的问题</span></span><br><span class="line">})</span><br><span class="line"><span class="comment">// 后置守卫</span></span><br><span class="line">router.afterEach(<span class="function">() =&gt;</span> {</span><br><span class="line">  nprogress.done() <span class="comment">// 关闭进度条</span></span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="静态路由动态路由解除合并"><a href="#静态路由动态路由解除合并" class="headerlink" title="静态路由动态路由解除合并"></a>静态路由动态路由解除合并</h3><p><strong>注意</strong>： 这里有个非常容易出问题的位置，当我们判断用户是否已经添加路由的前后，不能都是用**next()**，</p>
<p>在添加路由之后应该使用 <strong>next(to.path)<strong>， 否则会使刷新页面之后 权限消失，这属于一个vue-router的</strong>已知缺陷</strong></p>
<p>同时，不要忘记，我们将原来的静态路由 + 动态路由合体的模式 改成 只有静态路由  <strong><code>src/router/index.js</code></strong></p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200730012805239.png" alt="image-20200730012805239"></p>
<blockquote>
<p>  此时，我们已经完成了权限设置的一半， 此时我们发现左侧菜单失去了内容，这是因为左侧菜单读取的是固定的路由，我们要把它换成实时的最新路由</p>
</blockquote>
<p>在**<code>src/store/getters.js</code>**配置导出routes</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = {</span><br><span class="line">  <span class="attr">sidebar</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.app.sidebar,</span><br><span class="line">  <span class="attr">device</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.app.device,</span><br><span class="line">  <span class="attr">token</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.token,</span><br><span class="line">  <span class="attr">name</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.userInfo.username, <span class="comment">// 建立用户名称的映射</span></span><br><span class="line">  <span class="attr">userId</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.userInfo.userId, <span class="comment">// 建立用户id的映射</span></span><br><span class="line">  <span class="attr">companyId</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.userInfo.companyId, <span class="comment">// 建立用户的公司Id映射</span></span><br><span class="line">  <span class="attr">routes</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.permission.routes <span class="comment">// 导出当前的路由</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>在左侧菜单组件中， 引入routes</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">computed: {</span><br><span class="line">  ...mapGetters([</span><br><span class="line">    <span class="string">'sidebar'</span>, <span class="string">'routes'</span></span><br><span class="line">  ]),</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p> OK，到现在为止，我们已经可以实现不同用户登录的时候，菜单是动态的了</p>
</blockquote>
<p><strong>提交代码</strong></p>
<p><strong><code>本节任务</code></strong> 前端权限应用-页面访问和菜单</p>
<h2 id="登出时，重置路由权限和-404问题"><a href="#登出时，重置路由权限和-404问题" class="headerlink" title="登出时，重置路由权限和 404问题"></a>登出时，重置路由权限和 404问题</h2><p><strong>目标</strong>： 处理当登出页面时，路由不正确的问题</p>
<blockquote>
<p> 上一小节，我们看似完成了访问权限的功能，实则不然，因为当我们登出操作之后，虽然看不到菜单，但是用户实际上可以访问页面，直接在地址栏输入地址就能访问</p>
</blockquote>
<p>这是怎么回事？</p>
<blockquote>
<p> 这是因为我们前面在<strong>addRoutes</strong>的时候，一直都是在<strong>加</strong>，登出的时候，我们并没有删，也没有重置，也就是说，我们之前加的路由在登出之后一直在，这怎么处理？</p>
</blockquote>
<p>大家留意我们的<strong>router/index.js</strong>文件，发现一个重置路由方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 重置路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resetRouter</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> newRouter = createRouter()</span><br><span class="line">  router.matcher = newRouter.matcher <span class="comment">// 重新设置路由的可匹配路径</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>没错，这个方法就是将路由重新实例化，相当于换了一个新的路由，之前**<code>加的路由</code>**自然不存在了，只需要在登出的时候， 处理一下即可</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 登出的action</span></span><br><span class="line"><span class="function"><span class="title">lgout</span>(<span class="params">context</span>)</span> {</span><br><span class="line">  <span class="comment">// 删除token</span></span><br><span class="line">  context.commit(<span class="string">'removeToken'</span>) <span class="comment">// 不仅仅删除了vuex中的 还删除了缓存中的</span></span><br><span class="line">  <span class="comment">// 删除用户资料</span></span><br><span class="line">  context.commit(<span class="string">'removeUserInfo'</span>) <span class="comment">// 删除用户信息</span></span><br><span class="line">  <span class="comment">// 重置路由</span></span><br><span class="line">  resetRouter()</span><br><span class="line">  <span class="comment">// 还有一步  vuex中的数据是不是还在</span></span><br><span class="line">  <span class="comment">// 要清空permission模块下的state数据</span></span><br><span class="line">  <span class="comment">// vuex中 user子模块  permission子模块</span></span><br><span class="line">  <span class="comment">// 子模块调用子模块的action  默认情况下 子模块的context是子模块的</span></span><br><span class="line">  <span class="comment">// 父模块 调用 子模块的action</span></span><br><span class="line">  context.commit(<span class="string">'permission/setRoutes'</span>, [], { <span class="attr">root</span>: <span class="literal">true</span> })</span><br><span class="line">  <span class="comment">// 子模块调用子模块的action 可以 将 commit的第三个参数 设置成  { root: true } 就表示当前的context不是子模块了 而是父模块</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>除此之外，我们发现在页面刷新的时候，本来应该拥有权限的页面出现了404，这是因为404的匹配权限放在了静态路由，而动态路由在没有addRoutes之前，找不到对应的地址，就会显示404，所以我们需要将404放置到动态路由的最后</p>
<p><strong><code>src/permission.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">router.addRoutes([...routes, { <span class="attr">path</span>: <span class="string">'*'</span>, <span class="attr">redirect</span>: <span class="string">'/404'</span>, <span class="attr">hidden</span>: <span class="literal">true</span> }]) <span class="comment">// 添加到路由表</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<h2 id="功能权限应用"><a href="#功能权限应用" class="headerlink" title="功能权限应用"></a>功能权限应用</h2><p><strong>目标</strong>： 实现功能权限的应用</p>
<h3 id="功能权限的受控思路"><a href="#功能权限的受控思路" class="headerlink" title="功能权限的受控思路"></a>功能权限的受控思路</h3><blockquote>
<p> 上小节中，当我们拥有了一个模块，一个页面的访问权限之后，页面中的某些功能，用户可能有，也可能没有，这就是功能权限</p>
</blockquote>
<p>这就是上小节，查询出来的数据中的**<code>points</code>**</p>
<blockquote>
<p> 比如，我们想对员工管理的删除功能做个权限怎么做？</p>
</blockquote>
<p>首先需要在员工管理的权限点下， 新增一个删除权限点，启用</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200730020732919.png" alt="image-20200730020732919"></p>
<blockquote>
<p>  我们要做的就是看看用户，是否拥有<strong>point-user-delete</strong>这个point，有就可以让删除能用，没有就隐藏或者禁用</p>
</blockquote>
<h3 id="使用Mixin技术将检查方法注入"><a href="#使用Mixin技术将检查方法注入" class="headerlink" title="使用Mixin技术将检查方法注入"></a>使用Mixin技术将检查方法注入</h3><p>所以，我们可以采用一个新的技术 <a href="https://cn.vuejs.org/v2/guide/mixins.html">mixin(混入)</a>来让所有的组件可以拥有一个公共的方法</p>
<p><strong><code>src/mixin/checkPermission.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="function"><span class="title">checkPermission</span>(<span class="params">key</span>)</span> {</span><br><span class="line">      <span class="keyword">const</span> { userInfo } = store.state.user</span><br><span class="line">      <span class="keyword">if</span> (userInfo.roles.points &amp;&amp; userInfo.roles.points.length) {</span><br><span class="line">        <span class="keyword">return</span> userInfo.roles.points.some(<span class="function"><span class="params">item</span> =&gt;</span> item === key)</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p><strong>在员工组件中检查权限点</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-button :disabled="!checkPermission('POINT-USER-UPDATE')" type="text" size="small" @click="$router.push(`/employees/detail/${obj.row.id}`)"&gt;查看&lt;/el-button&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>此时，可以通过配置权限的方式，检查权限的可用性了</p>
<p><strong>提交代码</strong></p>
<h1 id="9-其他模块集成"><a href="#9-其他模块集成" class="headerlink" title="9.其他模块集成"></a>9.其他模块集成</h1><h2 id="全模块集成"><a href="#全模块集成" class="headerlink" title="全模块集成"></a>全模块集成</h2><p><strong>目标</strong>： 将其他业务模块代码集成到该项目中</p>
<blockquote>
<p>到目前为止，我们已经完成了一个基本项目框架 + 组织架构 + 公司 + 员工  +  权限的 业务联调， 时间关系，我们不可能将所有的业务都去编写一遍，这里提供大家 其余模块的集成代码，最终的目的是让大家得到一个完成的业务模块</p>
</blockquote>
<p>要集成的模块业务，包括工资模块，社保模块，考勤模块，审批模块</p>
<blockquote>
<p>在我们提供的资源集成模块中，我们提供了四个模块的**<code>路由</code><strong>/</strong><code>页面</code><strong>/</strong><code>api</code>*, 按照下面的路径拷贝即可</p>
</blockquote>
<p>路由 =&gt;  <strong><code>src/router/modules</code></strong></p>
<p>页面 =&gt;  <strong><code>src/views</code></strong></p>
<p>api  =&gt;  <strong><code>src/api</code></strong></p>
<p>除此之外，我们需要将 <strong><code>router/modules/user.js </code></strong> 导入到静态路由中，因为这个模块是所有模块都可以访问的</p>
<p>最终，我们将得到一个较为完整的系统业务。</p>
<h1 id="10-主页审批"><a href="#10-主页审批" class="headerlink" title="10.主页审批"></a>10.主页审批</h1><h2 id="首页的页面结构"><a href="#首页的页面结构" class="headerlink" title="首页的页面结构"></a>首页的页面结构</h2><p>**<code>目标</code>**： 实现系统首页的页面结构</p>
<blockquote>
<p>目前，我们的页面还剩下首页，这里我们可以按照如图实现一下的结构</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200802002002229.png" alt="image-20200802002002229"></p>
<p>首页页面结构，<strong>src/views/dashboard/index.vue</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="dashboard-container"&gt;</span><br><span class="line">    &lt;!-- 头部内容 --&gt;</span><br><span class="line">    &lt;el-card class="header-card"&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div class="fl headL"&gt;</span><br><span class="line">          &lt;div class="headImg"&gt;</span><br><span class="line">            &lt;img src="@/assets/common/head.jpg"&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class="headInfoTip"&gt;</span><br><span class="line">            &lt;p class="firstChild"&gt;早安，管理员，祝你开心每一天！&lt;/p&gt;</span><br><span class="line">            &lt;p class="lastChild"&gt;早安，管理员，祝你开心每一天！&lt;/p&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="fr" /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-card&gt;</span><br><span class="line">    &lt;!-- 主要内容 --&gt;</span><br><span class="line">    &lt;el-row type="flex" justify="space-between"&gt;</span><br><span class="line">      &lt;!-- 左侧内容 --&gt;</span><br><span class="line">      &lt;el-col :span="13" style="padding-right:26px"&gt;</span><br><span class="line">        &lt;!-- 工作日历 --&gt;</span><br><span class="line">        &lt;el-card class="box-card"&gt;</span><br><span class="line">          &lt;div slot="header" class="header"&gt;</span><br><span class="line">            &lt;span&gt;工作日历&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;!-- 放置日历组件 --&gt;</span><br><span class="line">        &lt;/el-card&gt;</span><br><span class="line">        &lt;!-- 公告 --&gt;</span><br><span class="line">        &lt;el-card class="box-card"&gt;</span><br><span class="line">          &lt;div class="advContent"&gt;</span><br><span class="line">            &lt;div class="title"&gt; 公告&lt;/div&gt;</span><br><span class="line">            &lt;div class="contentItem"&gt;</span><br><span class="line">              &lt;ul class="noticeList"&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                  &lt;div class="item"&gt;</span><br><span class="line">                    &lt;img src="@/assets/common/img.jpeg" alt=""&gt;</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                      &lt;p&gt;&lt;span class="col"&gt;朱继柳&lt;/span&gt; 发布了 第1期“传智大讲堂”互动讨论获奖名单公布&lt;/p&gt;</span><br><span class="line">                      &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                  &lt;div class="item"&gt;</span><br><span class="line">                    &lt;img src="@/assets/common/img.jpeg" alt=""&gt;</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                      &lt;p&gt;&lt;span class="col"&gt;朱继柳&lt;/span&gt; 发布了 第2期“传智大讲堂”互动讨论获奖名单公布&lt;/p&gt;</span><br><span class="line">                      &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                  &lt;div class="item"&gt;</span><br><span class="line">                    &lt;img src="@/assets/common/img.jpeg" alt=""&gt;</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                      &lt;p&gt;&lt;span class="col"&gt;朱继柳&lt;/span&gt; 发布了 第3期“传智大讲堂”互动讨论获奖名单公布&lt;/p&gt;</span><br><span class="line">                      &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">              &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/el-card&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">      &lt;!-- 右侧内容 --&gt;</span><br><span class="line">      &lt;el-col :span="11"&gt;</span><br><span class="line">        &lt;el-card class="box-card"&gt;</span><br><span class="line">          &lt;div class="header headTit"&gt;</span><br><span class="line">            &lt;span&gt;流程申请&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class="sideNav"&gt;</span><br><span class="line">            &lt;el-button class="sideBtn"&gt;加班离职&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button class="sideBtn"&gt;请假调休&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button class="sideBtn"&gt;审批列表&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button class="sideBtn"&gt;我的信息&lt;/el-button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/el-card&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 绩效指数 --&gt;</span><br><span class="line">        &lt;el-card class="box-card"&gt;</span><br><span class="line">          &lt;div slot="header" class="header"&gt;</span><br><span class="line">            &lt;span&gt;绩效指数&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;!-- 放置雷达图 --&gt;</span><br><span class="line">        &lt;/el-card&gt;</span><br><span class="line">        &lt;!-- 帮助连接 --&gt;</span><br><span class="line">        &lt;el-card class="box-card"&gt;</span><br><span class="line">          &lt;div class="header headTit"&gt;</span><br><span class="line">            &lt;span&gt;帮助链接&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class="sideLink"&gt;</span><br><span class="line">            &lt;el-row&gt;</span><br><span class="line">              &lt;el-col :span="8"&gt;</span><br><span class="line">                &lt;a href="#"&gt;</span><br><span class="line">                  &lt;span class="icon iconGuide" /&gt;</span><br><span class="line">                  &lt;p&gt;入门指南&lt;/p&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">              &lt;/el-col&gt;</span><br><span class="line">              &lt;el-col :span="8"&gt;</span><br><span class="line">                &lt;a href="#"&gt;</span><br><span class="line">                  &lt;span class="icon iconHelp" /&gt;</span><br><span class="line">                  &lt;p&gt;在线帮助手册&lt;/p&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">              &lt;/el-col&gt;</span><br><span class="line">              &lt;el-col :span="8"&gt;</span><br><span class="line">                &lt;a href="#"&gt;</span><br><span class="line">                  &lt;span class="icon iconTechnology" /&gt;</span><br><span class="line">                  &lt;p&gt;联系技术支持&lt;/p&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">              &lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/el-card&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import { mapGetters } from 'vuex'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'Dashboard',</span><br><span class="line">  computed: {</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      'name'</span><br><span class="line">    ])</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line">.dashboard-container {</span><br><span class="line">  margin: 10px;</span><br><span class="line">  li {</span><br><span class="line">    list-style: none;</span><br><span class="line">  }</span><br><span class="line">  .headImg {</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background: #999;</span><br><span class="line">          img {</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      border-radius: 50%;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  .headInfoTip {</span><br><span class="line">    padding: 25px 0 0;</span><br><span class="line">    margin-left: 120px;</span><br><span class="line">    p {</span><br><span class="line">      padding: 0 0 15px;</span><br><span class="line">      margin: 0;</span><br><span class="line">      &amp;.firstChild {</span><br><span class="line">        font-size: 24px;</span><br><span class="line">      }</span><br><span class="line">      &amp;.lastChild {</span><br><span class="line">        font-size: 20px;</span><br><span class="line">        color: #7f8c8d;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.box-card {</span><br><span class="line">  padding: 5px 10px;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">  .header {</span><br><span class="line">    span {</span><br><span class="line">      color: #2c3e50;</span><br><span class="line">      font-size: 24px;</span><br><span class="line">    }</span><br><span class="line">    .item {</span><br><span class="line">      color: #97a8be;</span><br><span class="line">      float: right;</span><br><span class="line">      padding: 3px 0;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  .headTit {</span><br><span class="line">    span {</span><br><span class="line">      border-bottom: 4px solid #8a97f8;</span><br><span class="line">      padding-bottom: 10px;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">.header-card{</span><br><span class="line">  position: relative;</span><br><span class="line">  .header {</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 20px;</span><br><span class="line">    top: 15px;</span><br><span class="line">    z-index: 1;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.advContent {</span><br><span class="line">  background: #fff;</span><br><span class="line">  border-radius: 5px 5px 0px 0px;</span><br><span class="line">  .title {</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    border-bottom: solid 1px #ccc;</span><br><span class="line">  }</span><br><span class="line">  .contentItem {</span><br><span class="line">    padding: 0 30px;</span><br><span class="line">    min-height: 350px;</span><br><span class="line">    .item {</span><br><span class="line">      display: flex;</span><br><span class="line">      padding:18px 0 10px;</span><br><span class="line">      border-bottom: solid 1px #ccc;</span><br><span class="line">      .col {</span><br><span class="line">        color: #8a97f8;</span><br><span class="line">      }</span><br><span class="line">      img {</span><br><span class="line">        width: 56px;</span><br><span class="line">        height: 56px;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        margin-right: 10px;</span><br><span class="line">      }</span><br><span class="line">      p{</span><br><span class="line">        padding: 0 0 8px;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">.noticeList {</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">}</span><br><span class="line">.sideNav,</span><br><span class="line">.sideLink {</span><br><span class="line">  padding: 30px 0 12px;</span><br><span class="line">  .sideBtn {</span><br><span class="line">    padding: 16px 26px;</span><br><span class="line">    font-size:16px;</span><br><span class="line">    margin: 10px 5px;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">.sideLink {</span><br><span class="line">  text-align: center;</span><br><span class="line">  .icon {</span><br><span class="line">    display: inline-block;</span><br><span class="line">    width: 76px;</span><br><span class="line">    height: 76px;</span><br><span class="line">    background: url('./../../assets/common/icon.png') no-repeat;</span><br><span class="line">  }</span><br><span class="line">  .iconGuide {</span><br><span class="line">    background-position: 0 0;</span><br><span class="line">  }</span><br><span class="line">  .iconHelp {</span><br><span class="line">    background-position: -224px 0;</span><br><span class="line">  }</span><br><span class="line">  .iconTechnology {</span><br><span class="line">    background-position: -460px 0;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>通过上面的代码，我们得到了如下的页面</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200802015023168.png" alt="image-20200802015023168"></p>
<p>大家发现，我们预留了**<code>工作日历</code><strong>和</strong><code>绩效指数</code>**两个组件，我们会在后续的组件中进行开发</p>
<p><strong>提交代码</strong></p>
<h2 id="首页用户资料显示"><a href="#首页用户资料显示" class="headerlink" title="首页用户资料显示"></a>首页用户资料显示</h2><p>​ **<code>目标</code>**：将首页的信息换成真实的用户资料</p>
<blockquote>
<p>直接获取Vuex的用户资料即可</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import { createNamespacedHelpers } from 'vuex'</span><br><span class="line">const { mapState } = createNamespacedHelpers('user')</span><br><span class="line">export default {</span><br><span class="line">  name: 'Dashboard',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      defaultImg: require('@/assets/common/head.jpg'),</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    ...mapState(['userInfo'])</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>在 vue视图中绑定</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div class="fl headL"&gt;</span><br><span class="line">          &lt;div class="headImg"&gt;</span><br><span class="line">            &lt;img :src="userInfo.staffPhoto"&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class="headInfoTip"&gt;</span><br><span class="line">            &lt;p class="firstChild"&gt;早安，{{ userInfo.username }}，祝你开心每一天！&lt;/p&gt;</span><br><span class="line">            &lt;p class="lastChild"&gt;{{ userInfo.username }}   |  {{ userInfo.companyName }}-{{ userInfo.departmentName }}&lt;/p&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>除此之外，当我们加载图片失败的时候，图片地址存在，但是却不能显示，之前我们封装的图片错误指令可以应用</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;img  :src="userInfo.staffPhoto" v-imageerror="defaultImg"&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="工作日历组件封装"><a href="#工作日历组件封装" class="headerlink" title="工作日历组件封装"></a>工作日历组件封装</h2><p>**<code>目标</code>**封装一个工作日历组件在首页中展示</p>
<h3 id="新建工作日历组件结构"><a href="#新建工作日历组件结构" class="headerlink" title="新建工作日历组件结构"></a>新建工作日历组件结构</h3><blockquote>
<p> 工作日历的要求很简单，显示每个月的日期，可以设定日期的范围</p>
</blockquote>
<p>我们可以基于Element组件<a href="https://element.eleme.cn/#/zh-CN/component/calendar">el-calendar</a>进行封装</p>
<p>代码如下  <strong><code>src/views/dashboard/components/work-calendar.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-row type="flex" justify="end"&gt;</span><br><span class="line">      &lt;el-select v-model="currentYear" size="small" style="width: 120px" @change="dateChange"&gt;</span><br><span class="line">        &lt;el-option v-for="item in yearList" :key="item" :label="item" :value="item"&gt;{{ item }}&lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">      &lt;el-select v-model="currentMonth" size="small" style="width: 120px;margin-left:10px" @change="dateChange"&gt;</span><br><span class="line">        &lt;el-option v-for="item in 12" :key="item" :label="item" :value="item"&gt;{{ item }}&lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">    &lt;el-calendar v-model="currentDate"&gt;</span><br><span class="line">      &lt;template v-slot:dateCell="{ date, data }" class="content"&gt;</span><br><span class="line">        &lt;div class="date-content"&gt;</span><br><span class="line">          &lt;span class="text"&gt; {{ data.day | getDay }}&lt;/span&gt;</span><br><span class="line">          &lt;span v-if="isWeek(date)" class="rest"&gt;休&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt; </span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/el-calendar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  props: {</span><br><span class="line">    startDate: {</span><br><span class="line">      type: Date,</span><br><span class="line">      default: () =&gt; new Date()</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      currentMonth: null, // 当前月份</span><br><span class="line">      currentYear: null, // 当前年份</span><br><span class="line">      currentDate: null,</span><br><span class="line">      yearList: []</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style  scoped&gt;</span><br><span class="line"> /deep/ .el-calendar-day {</span><br><span class="line">  height:  auto;</span><br><span class="line"> }</span><br><span class="line"> /deep/ .el-calendar-table__row td,/deep/ .el-calendar-table tr td:first-child,  /deep/ .el-calendar-table__row td.prev{</span><br><span class="line">  border:none;</span><br><span class="line"> }</span><br><span class="line">.date-content {</span><br><span class="line">  height: 40px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">}</span><br><span class="line">.date-content .rest {</span><br><span class="line">  color: #fff;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  background: rgb(250, 124, 77);</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">}</span><br><span class="line">.date-content .text{</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line"> display: inline-block;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"> /deep/ .el-calendar-table td.is-selected .text{</span><br><span class="line">   background: #409eff;</span><br><span class="line">   color: #fff;</span><br><span class="line">   border-radius: 50%;</span><br><span class="line"> }</span><br><span class="line"> /deep/ .el-calendar__header {</span><br><span class="line">   display: none</span><br><span class="line"> }</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="实现工作日历逻辑"><a href="#实现工作日历逻辑" class="headerlink" title="实现工作日历逻辑"></a>实现工作日历逻辑</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">filters</span>: {</span><br><span class="line">    <span class="function"><span class="title">getDay</span>(<span class="params">value</span>)</span> {</span><br><span class="line">      <span class="keyword">const</span> day = value.split(<span class="string">'-'</span>)[<span class="number">2</span>]</span><br><span class="line">      <span class="keyword">return</span> day.startsWith(<span class="string">'0'</span>) ? day.substr(<span class="number">1</span>) : day</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">props</span>: {</span><br><span class="line">    <span class="attr">startDate</span>: {</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Date</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">currentMonth</span>: <span class="literal">null</span>, <span class="comment">// 当前月份</span></span><br><span class="line">      <span class="attr">currentYear</span>: <span class="literal">null</span>, <span class="comment">// 当前年份</span></span><br><span class="line">      <span class="attr">currentDate</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">yearList</span>: []</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">//   初始化事件</span></span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="comment">//    处理起始时间</span></span><br><span class="line">    <span class="comment">// 组件要求起始时间必须是 周一开始 以一个月为开始</span></span><br><span class="line">    <span class="built_in">this</span>.currentMonth = <span class="built_in">this</span>.startDate.getMonth() + <span class="number">1</span></span><br><span class="line">    <span class="built_in">this</span>.currentYear = <span class="built_in">this</span>.startDate.getFullYear()</span><br><span class="line">    <span class="comment">// 根据当前的年 生成可选年份 前后各加5年</span></span><br><span class="line">    <span class="built_in">this</span>.yearList = <span class="built_in">Array</span>.from(<span class="built_in">Array</span>(<span class="number">11</span>), <span class="function">(<span class="params">value, index</span>) =&gt;</span>  <span class="built_in">this</span>.currentYear + index - <span class="number">5</span> )</span><br><span class="line">    <span class="comment">// 计算 当年当月的第一个周一 再加上 四周之后的一个月月份</span></span><br><span class="line">    <span class="built_in">this</span>.dateChange()</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="comment">// 是否是休息日</span></span><br><span class="line">    <span class="function"><span class="title">isWeek</span>(<span class="params">value</span>)</span> {</span><br><span class="line">      <span class="keyword">return</span> value.getDay() === <span class="number">6</span> || value.getDay() === <span class="number">0</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 年月份改变之后</span></span><br><span class="line">    <span class="function"><span class="title">dateChange</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="keyword">const</span> year = <span class="built_in">this</span>.currentYear</span><br><span class="line">      <span class="keyword">const</span> month = <span class="built_in">this</span>.currentMonth</span><br><span class="line">      <span class="built_in">this</span>.currentDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">`<span class="subst">${year}</span>-<span class="subst">${month}</span>-1`</span>) <span class="comment">// 以当前月的1号为起始</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>在主页中应用</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 放置日历组件 --&gt;</span><br><span class="line">&lt;work-calendar /&gt;</span><br></pre></td></tr></tbody></table></figure>



<p><strong>提交代码</strong></p>
<h2 id="封装雷达图图表显示在首页"><a href="#封装雷达图图表显示在首页" class="headerlink" title="封装雷达图图表显示在首页"></a>封装雷达图图表显示在首页</h2><p>**<code>目标</code>**：封装一个echarts中的雷达图表显示在首页的绩效指数的位置</p>
<h3 id="了解雷达图"><a href="#了解雷达图" class="headerlink" title="了解雷达图"></a>了解雷达图</h3><h3 id="封装雷达图插件"><a href="#封装雷达图插件" class="headerlink" title="封装雷达图插件"></a>封装雷达图插件</h3><blockquote>
<p>首页中，还有一个绩效指数的位置需要放置一个雷达图的图表，我们可以采用百度的echarts进行封装</p>
</blockquote>
<p>第一步， 安装echarts图表</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i echarts</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>echarts是一个很大的包，里面包含了众多图形，假设我们只使用雷达图，可以做按需加载</p>
</blockquote>
<p>第二步， 新建雷达图组件，**<code>src/views/dashboard/components/radar.vue</code>**</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 雷达图  图表必须给高和宽度--&gt;</span><br><span class="line">  &lt;div ref="myDiv" class="radar-echart" /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 完成加载过程</span><br><span class="line">// var echarts = require('echarts')</span><br><span class="line">var echarts = require('echarts/lib/echarts') // 引入echarts主模块</span><br><span class="line">require('echarts/lib/chart/radar') // 引入雷达图</span><br><span class="line">// 引入提示框和标题组件</span><br><span class="line">require('echarts/lib/component/tooltip')</span><br><span class="line">require('echarts/lib/component/title')</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  // 页面渲染完毕事件</span><br><span class="line">  mounted() {</span><br><span class="line">    const myChart = echarts.init(this.$refs.myDiv) // 得到图表实例</span><br><span class="line">    myChart.setOption({</span><br><span class="line">      title: {</span><br><span class="line">        text: '基础雷达图'</span><br><span class="line">      },</span><br><span class="line">      tooltip: {},</span><br><span class="line">      legend: {</span><br><span class="line">        data: ['预算分配（Allocated Budget）', '实际开销（Actual Spending）']</span><br><span class="line">      },</span><br><span class="line">      radar: {</span><br><span class="line">        // shape: 'circle',</span><br><span class="line">        name: {</span><br><span class="line">          textStyle: {</span><br><span class="line">            color: '#fff',</span><br><span class="line">            backgroundColor: '#999',</span><br><span class="line">            borderRadius: 3,</span><br><span class="line">            padding: [3, 5]</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        // 每个区域的最高值</span><br><span class="line">        indicator: [</span><br><span class="line">          { name: '工作效率', max: 100 },</span><br><span class="line">          { name: '考勤', max: 100 },</span><br><span class="line">          { name: '积极性', max: 100 },</span><br><span class="line">          { name: '帮助同事', max: 100 },</span><br><span class="line">          { name: '自主学习', max: 100 },</span><br><span class="line">          { name: '正确率', max: 100 }</span><br><span class="line">        ]</span><br><span class="line">      },</span><br><span class="line">      series: [{</span><br><span class="line">        name: '预算 vs 开销（Budget vs spending）',</span><br><span class="line">        type: 'radar',</span><br><span class="line">        // areaStyle: {normal: {}},</span><br><span class="line">        data: [</span><br><span class="line">          {</span><br><span class="line">            value: [10, 1, 100, 5, 100, 0],</span><br><span class="line">            name: '张三'</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            value: [50, 50, 50, 50, 50, 10],</span><br><span class="line">            name: '李四'</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }]</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.radar-echart {</span><br><span class="line">    width: 600px;</span><br><span class="line">    height: 400px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>我们得到一个雷达图，对绩效指数进行统计</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200924111334856.png" alt="image-20200924111334856"></p>
<p>**<code>注意</code>**：相关数据的缺失，所以这里我们进行的是模拟数据</p>
<p><strong>在主页中引入使用</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import Radar from './components/radar'</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="审批流程业务的基本介绍"><a href="#审批流程业务的基本介绍" class="headerlink" title="审批流程业务的基本介绍"></a>审批流程业务的基本介绍</h2><blockquote>
<p>什么是审批流程</p>
</blockquote>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20201102215131402.png" alt="image-20201102215131402"></p>
<h2 id="提交一个离职审批"><a href="#提交一个离职审批" class="headerlink" title="提交一个离职审批"></a>提交一个离职审批</h2><p>**<code>目标</code>**： 提交一个离职的审批，并完成业务流转</p>
<p><strong>离职弹层</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 弹出层 --&gt;</span><br><span class="line">&lt;el-dialog :visible="showDialog" title="离职申请" @close="btnCancel"&gt;</span><br><span class="line">  &lt;el-form</span><br><span class="line">    ref="ruleForm"</span><br><span class="line">    :model="ruleForm"</span><br><span class="line">    status-icon</span><br><span class="line">    label-width="110px"</span><br><span class="line">    :rules="rules"</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!--离职表单--&gt;</span><br><span class="line">    &lt;el-form-item label="离职时间" prop="end_time"&gt;</span><br><span class="line">      &lt;el-date-picker</span><br><span class="line">        v-model="ruleForm.exceptTime"</span><br><span class="line">        type="datetime"</span><br><span class="line">        value-format="yyyy-MM-dd HH:mm:ss"</span><br><span class="line">        placeholder="选择日期时间"</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label="离职原因" prop="reason"&gt;</span><br><span class="line">      &lt;el-input</span><br><span class="line">        v-model="ruleForm.reason"</span><br><span class="line">        type="textarea"</span><br><span class="line">        :autosize="{ minRows: 3, maxRows: 8}"</span><br><span class="line">        style="width: 70%;"</span><br><span class="line">        placeholder="请输入内容"</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">  &lt;el-row slot="footer" type="flex" justify="center"&gt;</span><br><span class="line">    &lt;el-col :span="6"&gt;</span><br><span class="line">      &lt;el-button size="small" type="primary" @click="btnOK"&gt;确定&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button size="small" @click="btnCancel"&gt;取消&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-col&gt;</span><br><span class="line">  &lt;/el-row&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>显示弹层</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-button class="sideBtn" @click="showDialog = true"&gt;加班离职&lt;/el-button&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>加班数据及校验</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">showDialog: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">ruleForm</span>: {</span><br><span class="line">  <span class="attr">exceptTime</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">reason</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">processKey</span>: <span class="string">'process_dimission'</span>, <span class="comment">// 特定的审批</span></span><br><span class="line">  <span class="attr">processName</span>: <span class="string">'离职'</span></span><br><span class="line">},</span><br><span class="line"><span class="attr">rules</span>: {</span><br><span class="line">  <span class="attr">exceptTime</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'离职时间不能为空'</span> }],</span><br><span class="line">  <span class="attr">reason</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'离职原因不能为空'</span> }]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交审批逻辑</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { startProcess } <span class="keyword">from</span> <span class="string">'@/api/approvals'</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">methods</span>: {</span><br><span class="line">    <span class="function"><span class="title">btnOK</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.$refs.ruleForm.validate(<span class="keyword">async</span> validate =&gt; {</span><br><span class="line">        <span class="keyword">if</span> (validate) {</span><br><span class="line">          <span class="keyword">const</span> data = { ...this.ruleForm, <span class="attr">userId</span>: <span class="built_in">this</span>.userInfo.userId }</span><br><span class="line">          <span class="keyword">await</span> startProcess(data)</span><br><span class="line">          <span class="built_in">this</span>.$message.success(<span class="string">'提交流程成功'</span>)</span><br><span class="line">          <span class="built_in">this</span>.btnCancel()</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="title">btnCancel</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="built_in">this</span>.showDialog = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">this</span>.$refs.ruleForm.resetFields()</span><br><span class="line">      <span class="built_in">this</span>.ruleForm = {</span><br><span class="line">        <span class="attr">exceptTime</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="attr">reason</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="attr">processKey</span>: <span class="string">'process_dimission'</span>, <span class="comment">// 特定的审批</span></span><br><span class="line">        <span class="attr">processName</span>: <span class="string">'离职'</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>配置审批列表的导航</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-button class="sideBtn" @click="$router.push('/users/approvals')"&gt;审批列表&lt;/el-button&gt;</span><br><span class="line">&lt;el-button class="sideBtn" @click="$router.push('/users/info')"&gt;我的信息&lt;/el-button&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>完成该流程的审批和流转</strong></p>
<p>注意： 审批接口中的同意接口存在一定问题，可以测试   提交 /撤销 驳回等操作</p>
<p><strong><code>提交代码</code></strong></p>
<h1 id="11-多语言tab页面全屏主题"><a href="#11-多语言tab页面全屏主题" class="headerlink" title="11.多语言tab页面全屏主题"></a>11.多语言tab页面全屏主题</h1><h2 id="全屏插件的引用"><a href="#全屏插件的引用" class="headerlink" title="全屏插件的引用"></a>全屏插件的引用</h2><p><strong>目标</strong>：实现页面的全屏功能</p>
<blockquote>
<p>全屏功能可以借助一个插件来实现</p>
</blockquote>
<p>第一步，安装全局插件<strong>screenfull</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i screenfull</span><br></pre></td></tr></tbody></table></figure>

<p>第二步，封装全屏显示的插件·· <strong><code>src/components/ScreenFull/index.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 放置一个图标 --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 放置一个svg的图标 --&gt;</span><br><span class="line">    &lt;svg-icon icon-class="fullscreen" style="color:#fff; width: 20px; height: 20px" @click="changeScreen" /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ScreenFull from 'screenfull'</span><br><span class="line">export default {</span><br><span class="line">  methods: {</span><br><span class="line">    //   改变全屏</span><br><span class="line">    changeScreen() {</span><br><span class="line">      if (!ScreenFull.isEnabled) {</span><br><span class="line">        // 此时全屏不可用</span><br><span class="line">        this.$message.warning('此时全屏组件不可用')</span><br><span class="line">        return</span><br><span class="line">      }</span><br><span class="line">      // document.documentElement.requestFullscreen()  原生js调用</span><br><span class="line">      //   如果可用 就可以全屏</span><br><span class="line">      ScreenFull.toggle()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>第三步，全局注册该组件  <strong><code>src/components/index.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ScreenFull <span class="keyword">from</span> <span class="string">'./ScreenFull'</span></span><br><span class="line">Vue.component(<span class="string">'ScreenFull'</span>, ScreenFull) <span class="comment">// 注册全屏组件</span></span><br></pre></td></tr></tbody></table></figure>

<p>第四步，放置于**<code>layout/navbar.vue</code>**中</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;screen-full class="right-menu-item" /&gt;</span><br><span class="line">.right-menu-item {</span><br><span class="line">   vertical-align: middle;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<p>**<code>本节任务</code>**： 实现页面的全屏功能</p>
<h2 id="动态主题的设置"><a href="#动态主题的设置" class="headerlink" title="动态主题的设置"></a>动态主题的设置</h2><p>**<code>目标</code>**： 实现动态主题的设置</p>
<blockquote>
<p>我们想要实现在页面中实时的切换颜色，此时页面的主题可以跟着设置的颜色进行变化</p>
</blockquote>
<p><strong>简单说明一下它的原理：</strong> element-ui 2.0 版本之后所有的样式都是基于 SCSS 编写的，所有的颜色都是基于几个基础颜色<a href="https://github.com/PanJiaChen/custom-element-theme/blob/master/element-variables.scss">变量</a>来设置的，所以就不难实现动态换肤了，只要找到那几个颜色变量修改它就可以了。 首先我们需要拿到通过 <code>package.json</code> 拿到 element-ui 的版本号，根据该版本号去请求相应的样式。拿到样式之后将样色，通过正则匹配和替换，将颜色变量替换成你需要的，之后动态添加 <code>style</code> 标签来覆盖原有的 css 样式。</p>
<p>第一步， 封装颜色选择组件 <strong><code>ThemePicker</code></strong> 代码地址：<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/components/ThemePicker/index.vue">@/components/ThemePicker</a>。</p>
<blockquote>
<p>注意：本章节重点在于集成，内部的更换主题可以先不用关心。</p>
</blockquote>
<p><strong>实现代码</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-color-picker</span><br><span class="line">    v-model="theme"</span><br><span class="line">    :predefine="['#409EFF', '#1890ff', '#304156','#212121','#11a983', '#13c2c2', '#6959CD', '#f5222d', ]"</span><br><span class="line">    class="theme-picker"</span><br><span class="line">    popper-class="theme-picker-dropdown"</span><br><span class="line">  /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">const version = require('element-ui/package.json').version // element-ui version from node_modules</span><br><span class="line">const ORIGINAL_THEME = '#409EFF' // default color</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      chalk: '', // content of theme-chalk css</span><br><span class="line">      theme: ''</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    defaultTheme() {</span><br><span class="line">      return this.$store.state.settings.theme</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  watch: {</span><br><span class="line">    defaultTheme: {</span><br><span class="line">      handler: function(val, oldVal) {</span><br><span class="line">        this.theme = val</span><br><span class="line">      },</span><br><span class="line">      immediate: true</span><br><span class="line">    },</span><br><span class="line">    async theme(val) {</span><br><span class="line">      const oldVal = this.chalk ? this.theme : ORIGINAL_THEME</span><br><span class="line">      if (typeof val !== 'string') return</span><br><span class="line">      const themeCluster = this.getThemeCluster(val.replace('#', ''))</span><br><span class="line">      const originalCluster = this.getThemeCluster(oldVal.replace('#', ''))</span><br><span class="line">      console.log(themeCluster, originalCluster)</span><br><span class="line">      const $message = this.$message({</span><br><span class="line">        message: '  Compiling the theme',</span><br><span class="line">        customClass: 'theme-message',</span><br><span class="line">        type: 'success',</span><br><span class="line">        duration: 0,</span><br><span class="line">        iconClass: 'el-icon-loading'</span><br><span class="line">      })</span><br><span class="line">      const getHandler = (variable, id) =&gt; {</span><br><span class="line">        return () =&gt; {</span><br><span class="line">          const originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace('#', ''))</span><br><span class="line">          const newStyle = this.updateStyle(this[variable], originalCluster, themeCluster)</span><br><span class="line">          let styleTag = document.getElementById(id)</span><br><span class="line">          if (!styleTag) {</span><br><span class="line">            styleTag = document.createElement('style')</span><br><span class="line">            styleTag.setAttribute('id', id)</span><br><span class="line">            document.head.appendChild(styleTag)</span><br><span class="line">          }</span><br><span class="line">          styleTag.innerText = newStyle</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      if (!this.chalk) {</span><br><span class="line">        const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`</span><br><span class="line">        await this.getCSSString(url, 'chalk')</span><br><span class="line">      }</span><br><span class="line">      const chalkHandler = getHandler('chalk', 'chalk-style')</span><br><span class="line">      chalkHandler()</span><br><span class="line">      const styles = [].slice.call(document.querySelectorAll('style'))</span><br><span class="line">        .filter(style =&gt; {</span><br><span class="line">          const text = style.innerText</span><br><span class="line">          return new RegExp(oldVal, 'i').test(text) &amp;&amp; !/Chalk Variables/.test(text)</span><br><span class="line">        })</span><br><span class="line">      styles.forEach(style =&gt; {</span><br><span class="line">        const { innerText } = style</span><br><span class="line">        if (typeof innerText !== 'string') return</span><br><span class="line">        style.innerText = this.updateStyle(innerText, originalCluster, themeCluster)</span><br><span class="line">      })</span><br><span class="line">      this.$emit('change', val)</span><br><span class="line">      $message.close()</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    updateStyle(style, oldCluster, newCluster) {</span><br><span class="line">      let newStyle = style</span><br><span class="line">      oldCluster.forEach((color, index) =&gt; {</span><br><span class="line">        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index])</span><br><span class="line">      })</span><br><span class="line">      return newStyle</span><br><span class="line">    },</span><br><span class="line">    getCSSString(url, variable) {</span><br><span class="line">      return new Promise(resolve =&gt; {</span><br><span class="line">        const xhr = new XMLHttpRequest()</span><br><span class="line">        xhr.onreadystatechange = () =&gt; {</span><br><span class="line">          if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) {</span><br><span class="line">            this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '')</span><br><span class="line">            resolve()</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        xhr.open('GET', url)</span><br><span class="line">        xhr.send()</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    getThemeCluster(theme) {</span><br><span class="line">      const tintColor = (color, tint) =&gt; {</span><br><span class="line">        let red = parseInt(color.slice(0, 2), 16)</span><br><span class="line">        let green = parseInt(color.slice(2, 4), 16)</span><br><span class="line">        let blue = parseInt(color.slice(4, 6), 16)</span><br><span class="line">        if (tint === 0) { // when primary color is in its rgb space</span><br><span class="line">          return [red, green, blue].join(',')</span><br><span class="line">        } else {</span><br><span class="line">          red += Math.round(tint * (255 - red))</span><br><span class="line">          green += Math.round(tint * (255 - green))</span><br><span class="line">          blue += Math.round(tint * (255 - blue))</span><br><span class="line">          red = red.toString(16)</span><br><span class="line">          green = green.toString(16)</span><br><span class="line">          blue = blue.toString(16)</span><br><span class="line">          return `#${red}${green}${blue}`</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      const shadeColor = (color, shade) =&gt; {</span><br><span class="line">        let red = parseInt(color.slice(0, 2), 16)</span><br><span class="line">        let green = parseInt(color.slice(2, 4), 16)</span><br><span class="line">        let blue = parseInt(color.slice(4, 6), 16)</span><br><span class="line">        red = Math.round((1 - shade) * red)</span><br><span class="line">        green = Math.round((1 - shade) * green)</span><br><span class="line">        blue = Math.round((1 - shade) * blue)</span><br><span class="line">        red = red.toString(16)</span><br><span class="line">        green = green.toString(16)</span><br><span class="line">        blue = blue.toString(16)</span><br><span class="line">        return `#${red}${green}${blue}`</span><br><span class="line">      }</span><br><span class="line">      const clusters = [theme]</span><br><span class="line">      for (let i = 0; i &lt;= 9; i++) {</span><br><span class="line">        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))))</span><br><span class="line">      }</span><br><span class="line">      clusters.push(shadeColor(theme, 0.1))</span><br><span class="line">      return clusters</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.theme-message,</span><br><span class="line">.theme-picker-dropdown {</span><br><span class="line">  z-index: 99999 !important;</span><br><span class="line">}</span><br><span class="line">.theme-picker .el-color-picker__trigger {</span><br><span class="line">  height: 26px !important;</span><br><span class="line">  width: 26px !important;</span><br><span class="line">  padding: 2px;</span><br><span class="line">}</span><br><span class="line">.theme-picker-dropdown .el-color-dropdown__link-btn {</span><br><span class="line">  display: none;</span><br><span class="line">}</span><br><span class="line">.el-color-picker {</span><br><span class="line">  height: auto !important;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>注册代码</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ThemePicker <span class="keyword">from</span> <span class="string">'./ThemePicker'</span></span><br><span class="line">Vue.component(<span class="string">'ThemePicker'</span>, ThemePicker)</span><br></pre></td></tr></tbody></table></figure>

<p>第二步，  放置于**<code>layout/navbar.vue</code>**中</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 放置全屏插件 --&gt;</span><br><span class="line"> &lt;theme-picker class="right-menu-item" /&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>提交代码</strong></p>
<h2 id="多语言实现"><a href="#多语言实现" class="headerlink" title="多语言实现"></a>多语言实现</h2><p>**<code>目标</code>**实现国际化语言切换</p>
<h3 id="初始化多语言包"><a href="#初始化多语言包" class="headerlink" title="初始化多语言包"></a>初始化多语言包</h3><p>本项目使用国际化 i18n 方案。通过 <a href="https://github.com/kazupon/vue-i18n">vue-i18n</a>而实现。</p>
<p><strong>第一步，我们需要首先国际化的包</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i vue-i18n</span><br></pre></td></tr></tbody></table></figure>

<p><strong>第二步，需要单独一个多语言的实例化文件 <code>src/lang/index.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span> <span class="comment">// 引入Vue</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">'vue-i18n'</span> <span class="comment">// 引入国际化的包</span></span><br><span class="line"><span class="keyword">import</span> Cookie <span class="keyword">from</span> <span class="string">'js-cookie'</span> <span class="comment">// 引入cookie包</span></span><br><span class="line"><span class="keyword">import</span> elementEN <span class="keyword">from</span> <span class="string">'element-ui/lib/locale/lang/en'</span> <span class="comment">// 引入饿了么的英文包</span></span><br><span class="line"><span class="keyword">import</span> elementZH <span class="keyword">from</span> <span class="string">'element-ui/lib/locale/lang/zh-CN'</span> <span class="comment">// 引入饿了么的中文包</span></span><br><span class="line">Vue.use(VueI18n) <span class="comment">// 全局注册国际化包</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueI18n({</span><br><span class="line">  <span class="attr">locale</span>: Cookie.get(<span class="string">'language'</span>) || <span class="string">'zh'</span>, <span class="comment">// 从cookie中获取语言类型 获取不到就是中文</span></span><br><span class="line">  <span class="attr">messages</span>: {</span><br><span class="line">    <span class="attr">en</span>: {</span><br><span class="line">      ...elementEN <span class="comment">// 将饿了么的英文语言包引入</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">zh</span>: {</span><br><span class="line">      ...elementZH <span class="comment">// 将饿了么的中文语言包引入</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>上面的代码的作用是将Element的两种语言导入了</p>
</blockquote>
<p><strong>第三步，在main.js中对挂载 i18n的插件，并设置element为当前的语言</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 设置element为当前的语言</span></span><br><span class="line">Vue.use(ElementUI, {</span><br><span class="line">  <span class="attr">i18n</span>: <span class="function">(<span class="params">key, value</span>) =&gt;</span> i18n.t(key, value)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  i18n,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="引入自定义语言包"><a href="#引入自定义语言包" class="headerlink" title="引入自定义语言包"></a>引入自定义语言包</h3><blockquote>
<p>此时，element已经变成了zh，也就是中文，但是我们常规的内容怎么根据当前语言类型显示？</p>
</blockquote>
<p>这里，针对英文和中文，我们可以提供两个不同的语言包 <strong><code>src/lang/zh.js , src/lang/en.js</code></strong></p>
<blockquote>
<p>该语言包，我们已经在资源中提供</p>
</blockquote>
<p><strong>第四步，在index.js中同样引入该语言包</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> customZH <span class="keyword">from</span> <span class="string">'./zh'</span> <span class="comment">// 引入自定义中文包</span></span><br><span class="line"><span class="keyword">import</span> customEN <span class="keyword">from</span> <span class="string">'./en'</span> <span class="comment">// 引入自定义英文包</span></span><br><span class="line">Vue.use(VueI18n) <span class="comment">// 全局注册国际化包</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueI18n({</span><br><span class="line">  <span class="attr">locale</span>: Cookie.get(<span class="string">'language'</span>) || <span class="string">'zh'</span>, <span class="comment">// 从cookie中获取语言类型 获取不到就是中文</span></span><br><span class="line">  <span class="attr">messages</span>: {</span><br><span class="line">    <span class="attr">en</span>: {</span><br><span class="line">      ...elementEN, <span class="comment">// 将饿了么的英文语言包引入</span></span><br><span class="line">      ...customEN</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">zh</span>: {</span><br><span class="line">      ...elementZH, <span class="comment">// 将饿了么的中文语言包引入</span></span><br><span class="line">      ...customZH</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<h3 id="在左侧菜单中应用多语言包"><a href="#在左侧菜单中应用多语言包" class="headerlink" title="在左侧菜单中应用多语言包"></a>在左侧菜单中应用多语言包</h3><blockquote>
<p> 自定义语言包的内容怎么使用?</p>
</blockquote>
<p><strong>第五步，在左侧菜单应用</strong></p>
<p>当我们全局注册i18n的时候，每个组件都会拥有一个**<code>$t</code>**的方法，它会根据传入的key，自动的去寻找当前语言的文本，我们可以将左侧菜单变成多语言展示文本</p>
<p><strong><code>layout/components/SidebarItem.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;item :icon="onlyOneChild.meta.icon||(item.meta&amp;&amp;item.meta.icon)" :title="$t('route.'+onlyOneChild.name)" /&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>注意：当文本的值为嵌套时，可以通过**<code>$t(key1.key2.key3...)</code>**的方式获取</p>
<blockquote>
<p>现在，我们已经完成了多语言的接入，现在封装切换多语言的组件</p>
</blockquote>
<h3 id="封装多语言插件"><a href="#封装多语言插件" class="headerlink" title="封装多语言插件"></a>封装多语言插件</h3><p><strong>第六步，封装多语言组件</strong>  <strong><code>src/components/lang/index.vue</code></strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-dropdown trigger="click" @command="changeLanguage"&gt;</span><br><span class="line">    &lt;!-- 这里必须加一个div --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;svg-icon style="color:#fff;font-size:20px" icon-class="language" /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;el-dropdown-menu slot="dropdown"&gt;</span><br><span class="line">      &lt;el-dropdown-item command="zh" :disabled="'zh'=== $i18n.locale "&gt;中文&lt;/el-dropdown-item&gt;</span><br><span class="line">      &lt;el-dropdown-item command="en" :disabled="'en'=== $i18n.locale "&gt;en&lt;/el-dropdown-item&gt;</span><br><span class="line">    &lt;/el-dropdown-menu&gt;</span><br><span class="line">  &lt;/el-dropdown&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Cookie from 'js-cookie'</span><br><span class="line">export default {</span><br><span class="line">  methods: {</span><br><span class="line">    changeLanguage(lang) {</span><br><span class="line">      Cookie.set('language', lang) // 切换多语言</span><br><span class="line">      this.$i18n.locale = lang // 设置给本地的i18n插件</span><br><span class="line">      this.$message.success('切换多语言成功')</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>第七步，在Navbar组件中引入</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 放置切换多语言 --&gt;</span><br><span class="line">     &lt;lang class="right-menu-item" /&gt;</span><br><span class="line">     &lt;!-- 放置主题 --&gt;</span><br><span class="line">     &lt;theme-picker class="right-menu-item" /&gt;</span><br><span class="line">     &lt;!-- 放置全屏插件 --&gt;</span><br><span class="line">     &lt;screen-full class="right-menu-item" /&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>最终效果</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200804001654730.png" alt="image-20200804001654730"></p>
<p><strong>提交代码</strong></p>
<h2 id="tab页的视图引入"><a href="#tab页的视图引入" class="headerlink" title="tab页的视图引入"></a>tab页的视图引入</h2><p>**<code>目标</code>**： 实现tab页打开路由的功能</p>
<blockquote>
<p>当前我们实现的打开页面，看到一个页面之后，另一个页面就会关闭，为了显示更加有效率，我们可以引入多页签组件</p>
</blockquote>
<p>多页签的组件的代码过于繁杂，开发实际需要的是集成和调用能力，所以我们只是将开发好的组件集成到当前的功能项中即可。</p>
<blockquote>
<p> 在资源目录中，**<code>多页签</code>**目录下放置的是 组件和vuex模块</p>
</blockquote>
<p>第一步，将组件TagsView目录放置到**<code>src/components</code>** , 并全局注册</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> TagsView <span class="keyword">from</span> <span class="string">'./TagsView'</span></span><br><span class="line">Vue.component(<span class="string">'TagsView'</span>, TagsView)</span><br></pre></td></tr></tbody></table></figure>



<p>第二步，将Vuex模块**<code>tagsView.js</code>**放置到 <strong><code>src/store/modules</code></strong></p>
<p>并在store中引入该模块</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tagsView <span class="keyword">from</span> <span class="string">'./modules/tagsView'</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">  <span class="attr">modules</span>: {</span><br><span class="line">    app,</span><br><span class="line">    settings,</span><br><span class="line">    user,</span><br><span class="line">    permission,</span><br><span class="line">    tagsView</span><br><span class="line">  },</span><br><span class="line">  getters</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>第三步，在**<code>src/layout/Index.vue</code>**中引入该组件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :class="classObj" class="app-wrapper"&gt;</span><br><span class="line">    &lt;div v-if="device==='mobile'&amp;&amp;sidebar.opened" class="drawer-bg" @click="handleClickOutside" /&gt;</span><br><span class="line">    &lt;sidebar class="sidebar-container" /&gt;</span><br><span class="line">    &lt;div class="main-container"&gt;</span><br><span class="line">      &lt;div :class="{'fixed-header':fixedHeader}"&gt;</span><br><span class="line">        &lt;navbar /&gt;</span><br><span class="line">        &lt;!-- 放置tabsview --&gt;</span><br><span class="line">        &lt;tags-view /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;app-main /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>效果如下</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200804012117287.png" alt="image-20200804012117287"></p>
<p><strong><code>提交代码</code></strong><br>#12.打包上线</p>
<h2 id="打包之前的路由模式"><a href="#打包之前的路由模式" class="headerlink" title="打包之前的路由模式"></a><strong>打包之前的路由模式</strong></h2><p>**<code>目标</code>**配置打包之前的路由模式</p>
<blockquote>
<p>在SPA单页应用中，有两种路由模式</p>
</blockquote>
<p><strong>hash模式</strong> ： #后面是路由路径，特点是前端访问，#后面的变化不会经过服务器</p>
<p><strong>history模式</strong>：正常的/访问模式，特点是后端访问，任意地址的变化都会访问服务器</p>
<blockquote>
<p>开发到现在，我们一直都在用hash模式，打包我们尝试用history模式</p>
</blockquote>
<p>改成history模式非常简单，只需要将路由的mode类型改成history即可</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> createRouter = <span class="function">() =&gt;</span> <span class="keyword">new</span> Router({</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">'history'</span>, <span class="comment">// require service support</span></span><br><span class="line">  <span class="attr">scrollBehavior</span>: <span class="function">() =&gt;</span> ({ <span class="attr">y</span>: <span class="number">0</span> }), <span class="comment">// 管理滚动行为 如果出现滚动 切换就让 让页面回到顶部</span></span><br><span class="line">  <span class="attr">routes</span>: [...constantRoutes] <span class="comment">// 改成只有静态路由</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>假设我们的地址是这样的  <strong><code>www.xxxx/com/hr</code></strong>/a <strong><code>www.xxxx/com/hr</code></strong>/b</p>
</blockquote>
<p>我们会发现，其实域名是**<code>www.xxxx/com</code>**，hr是特定的前缀地址，此时我们可以配置一个base属性，配置为hr</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> createRouter = <span class="function">() =&gt;</span> <span class="keyword">new</span> Router({</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">'history'</span>, <span class="comment">// require service support</span></span><br><span class="line">  <span class="attr">base</span>: <span class="string">'/hr/'</span>, <span class="comment">// 配置项目的基础地址</span></span><br><span class="line">  <span class="attr">scrollBehavior</span>: <span class="function">() =&gt;</span> ({ <span class="attr">y</span>: <span class="number">0</span> }), <span class="comment">// 管理滚动行为 如果出现滚动 切换就让 让页面回到顶部</span></span><br><span class="line">  <span class="attr">routes</span>: [...constantRoutes] <span class="comment">// 改成只有静态路由</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>此时，我们会发现地址已经变成我们想要的样子了</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200804014626686.png" alt="image-20200804014626686"></p>
<p><strong>提交代码</strong></p>
<h2 id="性能分析和CDN的应用"><a href="#性能分析和CDN的应用" class="headerlink" title="性能分析和CDN的应用"></a>性能分析和CDN的应用</h2><p>**<code>目标</code>**： 对开发的应用进行性能分析和CDN的应用</p>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><blockquote>
<p>我们集成了 功能，写了很多组件，最终都会打包成一堆文件，那么真实运行的性能如何呢？</p>
</blockquote>
<p>我们可以使用vue-cli本身提供的性能分析工具，对我们开发的所有功能进行打包分析</p>
<p>它的应用非常简单</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm run preview -- --report</span><br></pre></td></tr></tbody></table></figure>

<p>这个命令会从我们的**<code>入口main.js</code>**进行依赖分析，分析出最大的包，方便我们进行观察和优化</p>
<p>执行完这个命令，我们会看到如下的页面</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200804015849396.png" alt="image-20200804015849396"></p>
<p>如图所以，方块越大，说明该文件占用的文件越大，文件越大，对于网络带宽和访问速度的要求就越高，这也就是我们优化的方向</p>
<blockquote>
<p>像这种情况，我们怎么优化一下呢</p>
</blockquote>
<h3 id="webpack排除打包"><a href="#webpack排除打包" class="headerlink" title="webpack排除打包"></a>webpack排除打包</h3><p>CDN是一个比较好的方式</p>
<blockquote>
<p>文件不是大吗？我们就不要把这些大的文件和那些小的文件打包到一起了，像这种xlsx,element这种功能性很全的插件，我们可以放到CDN服务器上，一来，减轻整体包的大小，二来CDN的加速服务可以加快我们对于插件的访问速度</p>
</blockquote>
<p><strong>使用方式</strong></p>
<p>先找到 <code>vue.config.js</code>， 添加 <code>externals</code> 让 <code>webpack</code> 不打包 <code>xlsx</code> 和 <code>element</code>   </p>
<p><strong><code>vue.config.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 排除 elementUI xlsx  和 vue </span></span><br><span class="line"> <span class="attr">externals</span>:</span><br><span class="line">     {</span><br><span class="line">       <span class="string">'vue'</span>: <span class="string">'Vue'</span>,</span><br><span class="line">       <span class="string">'element-ui'</span>: <span class="string">'ELEMENT'</span>,</span><br><span class="line">       <span class="string">'xlsx'</span>: <span class="string">'XLSX'</span></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>

<p>再次运行，我们会发现包的大小已经大幅减小</p>
<h3 id="CDN文件配置"><a href="#CDN文件配置" class="headerlink" title="CDN文件配置"></a>CDN文件配置</h3><blockquote>
<p>但是，没有被打包的几个模块怎么处理？</p>
</blockquote>
<p>可以采用CDN的方式，在页面模板中预先引入</p>
<p><strong><code>vue.config.js</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cdn = {</span><br><span class="line">  <span class="attr">css</span>: [</span><br><span class="line">    <span class="comment">// element-ui css</span></span><br><span class="line">    <span class="string">'https://unpkg.com/element-ui/lib/theme-chalk/index.css'</span> <span class="comment">// 样式表</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">js</span>: [</span><br><span class="line">    <span class="comment">// vue must at first!</span></span><br><span class="line">    <span class="string">'https://unpkg.com/vue/dist/vue.js'</span>, <span class="comment">// vuejs</span></span><br><span class="line">    <span class="comment">// element-ui js</span></span><br><span class="line">    <span class="string">'https://unpkg.com/element-ui/lib/index.js'</span>, <span class="comment">// elementUI</span></span><br><span class="line">      <span class="string">'https://cdn.jsdelivr.net/npm/xlsx@0.16.6/dist/jszip.min.js'</span>,</span><br><span class="line">    <span class="string">'https://cdn.jsdelivr.net/npm/xlsx@0.16.6/dist/xlsx.full.min.js'</span></span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>但是请注意，这时的配置实际上是对开发环境和生产环境都生效的，在开发环境时，没有必要使用CDN，此时我们可以使用环境变量来进行区分</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cdn = { <span class="attr">css</span>: [], <span class="attr">js</span>: [] }</span><br><span class="line"><span class="comment">// 通过环境变量 来区分是否使用cdn</span></span><br><span class="line"><span class="keyword">const</span> isProd = process.env.NODE_ENV === <span class="string">'production'</span> <span class="comment">// 判断是否是生产环境</span></span><br><span class="line"><span class="keyword">let</span> externals = {}</span><br><span class="line"><span class="keyword">if</span> (isProd) {</span><br><span class="line">  <span class="comment">// 如果是生产环境 就排除打包 否则不排除</span></span><br><span class="line">  externals = {</span><br><span class="line">    <span class="comment">// key(包名) / value(这个值 是 需要在CDN中获取js, 相当于 获取的js中 的该包的全局的对象的名字)</span></span><br><span class="line">    <span class="string">'vue'</span>: <span class="string">'Vue'</span>, <span class="comment">// 后面的名字不能随便起 应该是 js中的全局对象名</span></span><br><span class="line">    <span class="string">'element-ui'</span>: <span class="string">'ELEMENT'</span>, <span class="comment">// 都是js中全局定义的</span></span><br><span class="line">    <span class="string">'xlsx'</span>: <span class="string">'XLSX'</span> <span class="comment">// 都是js中全局定义的</span></span><br><span class="line">  }</span><br><span class="line">  cdn = {</span><br><span class="line">    <span class="attr">css</span>: [</span><br><span class="line">      <span class="string">'https://unpkg.com/element-ui/lib/theme-chalk/index.css'</span> <span class="comment">// 提前引入elementUI样式</span></span><br><span class="line">    ], <span class="comment">// 放置css文件目录</span></span><br><span class="line">    <span class="attr">js</span>: [</span><br><span class="line">      <span class="string">'https://unpkg.com/vue/dist/vue.js'</span>, <span class="comment">// vuejs</span></span><br><span class="line">      <span class="string">'https://unpkg.com/element-ui/lib/index.js'</span>, <span class="comment">// element</span></span><br><span class="line">      <span class="string">'https://cdn.jsdelivr.net/npm/xlsx@0.16.6/dist/xlsx.full.min.js'</span>, <span class="comment">// xlsx 相关</span></span><br><span class="line">      <span class="string">'https://cdn.jsdelivr.net/npm/xlsx@0.16.6/dist/jszip.min.js'</span> <span class="comment">// xlsx 相关</span></span><br><span class="line">    ] <span class="comment">// 放置js文件目录</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="注入CDN文件到模板"><a href="#注入CDN文件到模板" class="headerlink" title="注入CDN文件到模板"></a>注入CDN文件到模板</h3><p>之后通过 <code>html-webpack-plugin</code>注入到 <code>index.html</code>之中:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">config.plugin(<span class="string">'html'</span>).tap(<span class="function"><span class="params">args</span> =&gt;</span> {</span><br><span class="line">  args[<span class="number">0</span>].cdn = cdn</span><br><span class="line">  <span class="keyword">return</span> args</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>找到 <code>public/index.html</code>。通过你配置的<code>CDN Config</code> 依次注入 css 和 js。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;!-- 引入样式 --&gt;</span><br><span class="line">  &lt;% for(var css of htmlWebpackPlugin.options.cdn.css) { %&gt;</span><br><span class="line">    &lt;link rel="stylesheet" href="&lt;%=css%&gt;"&gt;</span><br><span class="line">  &lt;% } %&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入JS --&gt;</span><br><span class="line">&lt;% for(var js of htmlWebpackPlugin.options.cdn.js) { %&gt;</span><br><span class="line">  &lt;script src="&lt;%=js%&gt;"&gt;&lt;/script&gt;</span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>最后，进行打包 </p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm run build:prod</span><br></pre></td></tr></tbody></table></figure>

<h2 id="在nodejs环境中应用并代理跨域"><a href="#在nodejs环境中应用并代理跨域" class="headerlink" title="在nodejs环境中应用并代理跨域"></a>在nodejs环境中应用并代理跨域</h2><p>**<code>目标</code>**将打包好的代码打包上线，并在nodejs中代理跨域</p>
<h3 id="使用koa框架部署项目"><a href="#使用koa框架部署项目" class="headerlink" title="使用koa框架部署项目"></a>使用koa框架部署项目</h3><blockquote>
<p>到现在为止，我们已经完成了一个前端工程师的开发流程，按照常规的做法，此时，运维会将我们的代码部署到阿里云的ngix服务上，对于我们而言，我们可以将其部署到本机的nodejs环境中</p>
</blockquote>
<p>部署 自动化部署 /手动部署</p>
<p>第一步，建立web服务文件夹  <strong><code>hrServer</code></strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mkdir hrServer <span class="comment">#建立hrServer文件夹 </span></span><br></pre></td></tr></tbody></table></figure>

<p>第二步，在该文件夹下，初始化npm</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm init -y</span><br></pre></td></tr></tbody></table></figure>

<p>第三步，安装服务端框架koa(也可以采用express或者egg)</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i koa koa-static</span><br></pre></td></tr></tbody></table></figure>

<p>第四步，拷贝上小节打包的dist目录到**<code>hrServer/public</code>**下</p>
<p>第五步，在根目录下创建app.js，代码如下</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa  = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> serve = <span class="built_in">require</span>(<span class="string">'koa-static'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(serve(__dirname + <span class="string">"/public"</span>)); <span class="comment">//将public下的代码静态化</span></span><br><span class="line">app.listen(<span class="number">3333</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'人资项目启动'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>此时，我们可以访问，<a href="http://localhost:3333/">http://localhost:3333</a></p>
</blockquote>
<p>页面出来了</p>
<p><img src="/2021/07/02/vue%E5%BA%94%E7%94%A83%E2%80%94HR-saas%E4%B8%AD%E5%8F%B0%E7%B3%BB%E7%BB%9F/image-20200805012430884.png" alt="image-20200805012430884"></p>
<h3 id="解决history页面访问问题"><a href="#解决history页面访问问题" class="headerlink" title="解决history页面访问问题"></a>解决history页面访问问题</h3><p>但是，此时存在两个问题，</p>
<ol>
<li><strong>当我们刷新页面，发现404</strong></li>
</ol>
<blockquote>
<p>  这是因为我们采用了history的模式，地址的变化会引起服务器的刷新，我们只需要在app.js对所有的地址进行一下处理即可</p>
</blockquote>
<p>安装 koa中间件 </p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i koa2-connect-history-api-fallback <span class="comment">#专门处理history模式的中间件</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>注册中间件</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa  = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> serve = <span class="built_in">require</span>(<span class="string">'koa-static'</span>);</span><br><span class="line"><span class="keyword">const</span>  { historyApiFallback } = <span class="built_in">require</span>(<span class="string">'koa2-connect-history-api-fallback'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="comment">// 这句话 的意思是除接口之外所有的请求都发送给了 index.html</span></span><br><span class="line">app.use(historyApiFallback({ </span><br><span class="line">     <span class="attr">whiteList</span>: [<span class="string">'/prod-api'</span>]</span><br><span class="line"> }));  <span class="comment">// 这里的whiteList是 白名单的意思</span></span><br><span class="line">app.use(serve(__dirname + <span class="string">"/public"</span>)); <span class="comment">//将public下的代码静态化</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3333</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'人资项目启动'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<h3 id="解决生产环境跨域问题"><a href="#解决生产环境跨域问题" class="headerlink" title="解决生产环境跨域问题"></a>解决生产环境跨域问题</h3><ol>
<li>当点击登录时，发现接口404</li>
</ol>
<blockquote>
<p>  前面我们讲过，vue-cli的代理只存在于开发期，当我们上线到node环境或者ngix环境时，需要我们再次在环境中代理</p>
</blockquote>
<p>在nodejs中代理</p>
<p>安装跨域代理中间件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i koa2-proxy-middleware</span><br></pre></td></tr></tbody></table></figure>

<p>配置跨越代理</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">'koa2-proxy-middleware'</span>)</span><br><span class="line"></span><br><span class="line">app.use(proxy({</span><br><span class="line">  <span class="attr">targets</span>: {</span><br><span class="line">    <span class="comment">// (.*) means anything</span></span><br><span class="line">    <span class="string">'/prod-api/(.*)'</span>: {</span><br><span class="line">        <span class="attr">target</span>: <span class="string">'http://ihrm-java.itheima.net/api'</span>, <span class="comment">//后端服务器地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: {  </span><br><span class="line">            <span class="string">'/prod-api'</span>: <span class="string">""</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}))</span><br></pre></td></tr></tbody></table></figure>

<p>注意：这里之所以用了<strong>pathRewrite</strong>，是因为生产环境的请求基础地址是 <strong>/prod-api</strong>，需要将该地址去掉</p>
<p>此时，项目就可以跨域访问了！</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue应用</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
